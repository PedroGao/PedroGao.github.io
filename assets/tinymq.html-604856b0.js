const t=JSON.parse('{"key":"v-67314688","path":"/posts/distribute/tinymq.html","title":"tinymq设计与实现","lang":"zh-CN","frontmatter":{"icon":"edit","title":"tinymq设计与实现","date":"2023-09-07T00:00:00.000Z","tag":["mq"],"category":["distribute","mq"],"description":"旨在探索 MQ 的设计与实现，掌握基本原型即可，不上升高级功能。 中间件三驾马车：数据库、缓存，MQ，是每个后端工程师都应深入理解的必备技能，同时也是工作、面试的常客。 自工作以来，笔者基本每天都在与消息队列（MQ）打交道，无论是模块解耦，流量削峰，还是事件通知，MQ 都太好用了。 彻底搞懂 MQ，这个目标一直都在，但苦于下面的原因所以一直没有实施： 工作内容又繁又杂，没有一个整块时间去思考与沉淀； MQ 选型众多，Kafka，RocketMQ，Pulsar 等都非常好用，但各有各的特点与不同； MQ 经过这么多年的发展，本来也越来越复杂，一头扎进去难免一叶障目；","head":[["meta",{"property":"og:url","content":"https://pedrogao.github.io/posts/distribute/tinymq.html"}],["meta",{"property":"og:site_name","content":"廊中别苑"}],["meta",{"property":"og:title","content":"tinymq设计与实现"}],["meta",{"property":"og:description","content":"旨在探索 MQ 的设计与实现，掌握基本原型即可，不上升高级功能。 中间件三驾马车：数据库、缓存，MQ，是每个后端工程师都应深入理解的必备技能，同时也是工作、面试的常客。 自工作以来，笔者基本每天都在与消息队列（MQ）打交道，无论是模块解耦，流量削峰，还是事件通知，MQ 都太好用了。 彻底搞懂 MQ，这个目标一直都在，但苦于下面的原因所以一直没有实施： 工作内容又繁又杂，没有一个整块时间去思考与沉淀； MQ 选型众多，Kafka，RocketMQ，Pulsar 等都非常好用，但各有各的特点与不同； MQ 经过这么多年的发展，本来也越来越复杂，一头扎进去难免一叶障目；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-07T14:11:18.000Z"}],["meta",{"property":"article:author","content":"pedrogao"}],["meta",{"property":"article:tag","content":"mq"}],["meta",{"property":"article:published_time","content":"2023-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-07T14:11:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"tinymq设计与实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-07T14:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pedrogao\\",\\"url\\":\\"https://github.com/pedrogao/\\"}]}"]]},"headers":[{"level":2,"title":"架构设计","slug":"架构设计","link":"#架构设计","children":[]},{"level":2,"title":"详细设计","slug":"详细设计","link":"#详细设计","children":[{"level":3,"title":"元数据","slug":"元数据","link":"#元数据","children":[]},{"level":3,"title":"Broker","slug":"broker","link":"#broker","children":[]},{"level":3,"title":"生产者","slug":"生产者","link":"#生产者","children":[]},{"level":3,"title":"消费者","slug":"消费者","link":"#消费者","children":[]}]},{"level":2,"title":"其它待实现特性","slug":"其它待实现特性","link":"#其它待实现特性","children":[]}],"git":{"createdTime":1694095878000,"updatedTime":1694095878000,"contributors":[{"name":"pedrogao","email":"1312342604@qq.com","commits":1}]},"readingTime":{"minutes":5.98,"words":1795},"filePathRelative":"posts/distribute/tinymq.md","localizedDate":"2023年9月7日","excerpt":"<blockquote>\\n<p>旨在探索 MQ 的设计与实现，掌握基本原型即可，不上升高级功能。</p>\\n</blockquote>\\n<p>中间件三驾马车：数据库、缓存，MQ，是每个后端工程师都应深入理解的必备技能，同时也是工作、面试的常客。</p>\\n<p>自工作以来，笔者基本每天都在与消息队列（MQ）打交道，无论是模块解耦，流量削峰，还是事件通知，MQ 都太好用了。</p>\\n<p>彻底搞懂 MQ，这个目标一直都在，但苦于下面的原因所以一直没有实施：</p>\\n<ol>\\n<li>工作内容又繁又杂，没有一个整块时间去思考与沉淀；</li>\\n<li>MQ 选型众多，Kafka，RocketMQ，Pulsar 等都非常好用，但各有各的特点与不同；</li>\\n<li>MQ 经过这么多年的发展，本来也越来越复杂，一头扎进去难免一叶障目；</li>\\n</ol>","autoDesc":true}');export{t as data};
