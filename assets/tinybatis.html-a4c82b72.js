import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as s,a as e,b as t,e as n,w as d,f as c}from"./app-c1430808.js";const h={},p=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),t(" 前言")],-1),_=e("h2",{id:"tdd-流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tdd-流程","aria-hidden":"true"},"#"),t(" TDD 流程")],-1),m=e("blockquote",null,[e("p",null,"以下仅为个人理解，一千个读者就有一千个哈姆雷特，欢迎大家探讨。")],-1),f={href:"https://en.wikipedia.org/wiki/Test-driven_development",target:"_blank",rel:"noopener noreferrer"},u=c('<p>之前笔者编程的模式一直是：<strong>先写代码，后写测试</strong>。</p><p>这样编程会带来几个很麻烦的问题：</p><ol><li>代码写完后，测试用例写起来很麻烦，因为代码的设计并没有考虑到测试用例，所以测试用例写起来很费劲。</li><li>严重依赖模块、代码结构设计，写起来很容易卡壳。</li><li>误导排期和进度，代码写完了不代表功能完成了。</li></ol><p>而 TDD 的核心思想是：<strong>先写测试，后写代码</strong>：</p><ol><li>编写测试用例，测试用例是对功能的需求的描述，有助于理解需求（需求都没理解，怎么可能写好代码）；</li><li>测试用例反推代码结构，有利于写出测试良好的代码；</li><li>重构方便，完备的测试用例保证了重构后代码的正确性；</li></ol><p>有了 TDD 思想指导后，笔者的流程是这样的：</p><ol><li>理解需求，先写入口测试用例；</li><li>从入口测试用例反推代码结构，写出测试良好的代码；</li><li>通过测试用例；</li><li>发现不合理代码，重构再通过测试用例；</li></ol><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><p>TinyBatis 的需求是这样的：</p><p>TODO</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',11),D={href:"https://www.jetbrains.com/help/idea/generating-java-code-from-xml-schema.html#jaxb",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Test-driven_development",target:"_blank",rel:"noopener noreferrer"};function g(k,x){const a=r("RouterLink"),i=r("ExternalLinkIcon");return l(),s("div",null,[p,e("p",null,[t("之前有幸学习过徐昊的 "),n(a,{to:"/posts/engineering/tdd1.html"},{default:d(()=>[t("TDD")]),_:1}),t(" 课程，收获颇大，但是一直没有好的 idea 去实践，这次就用 TDD 的模式来实现一个简单的 Mybatis，取名为 TinyBatis。")]),_,m,e("p",null,[e("a",f,[t("TDD(Test-Driven Development)"),n(i)]),t("核心是一套指导思想。")]),u,e("ul",null,[e("li",null,[e("a",D,[t("Generating java code from xml schema"),n(i)])]),e("li",null,[e("a",b,[t("Test-driven development"),n(i)])])])])}const w=o(h,[["render",g],["__file","tinybatis.html.vue"]]);export{w as default};
