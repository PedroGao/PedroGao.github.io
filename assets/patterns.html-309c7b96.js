import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,f as c,a as s,b as l,e as i}from"./app-4eb79304.js";const u={},k={href:"https://pedrogao.github.io/patterns-of-distributed-systems/",target:"_blank",rel:"noopener noreferrer"};function r(d,n){const a=p("ExternalLinkIcon");return e(),o("div",null,[n[1]||(n[1]=c(`<p>《Patterns of Distributed Systems》这本书由 Unmesh Joshi 撰写，全面介绍了分布式系统中的各种模式。以下是对这本书的总结：</p><h3 id="第一部分-概述" tabindex="-1"><a class="header-anchor" href="#第一部分-概述" aria-hidden="true">#</a> 第一部分：概述</h3><ul><li><strong>为什么要分布式</strong><ul><li><strong>资源限制</strong>：CPU、内存、网络和磁盘是计算的基本资源，单服务器处理能力受这些资源上限限制，如网络带宽决定数据传输上限，磁盘有读写速度限制，内存限制可加载的数据量，CPU 处理能力有限。当请求数超过资源上限，请求需排队等待，影响系统吞吐量，因此需通过分布式利用多服务器资源。</li><li><strong>分区和复制</strong>：介绍了两种常见的分布式架构方式。一是分离业务逻辑和数据层，无状态部分暴露功能，有状态部分由数据库管理，通过水平扩展无状态服务处理更多请求，但存在数据库响应和连接处理问题，可通过添加缓存层缓解，但缓存不适用于所有情况。二是按领域边界分区，如微服务架构，不同领域有各自的软件系统，但共享基础设施组件仍可能面临类似问题。还强调了数据量和请求数增长导致的问题，以及处理数据时故障处理和复制的重要性。</li><li><strong>定义分布式系统</strong>：存储数据并在多服务器上作为多个进程运行，协调数据状态的软件系统。具有运行在多个进程、管理数据、通过消息传递通信、容忍部分故障等特点。</li></ul></li><li><strong>模式概述</strong><ul><li>介绍了分布式系统中的两种基本操作：分区和复制。以一个简单的数据记录在三个节点上的复制为例，阐述了在不同场景下如何保证数据的一致性和可用性。</li></ul></li></ul><h3 id="第二部分-数据复制模式" tabindex="-1"><a class="header-anchor" href="#第二部分-数据复制模式" aria-hidden="true">#</a> 第二部分：数据复制模式</h3><ul><li><strong>Write - Ahead Log</strong><ul><li><strong>问题</strong>：服务器存储数据失败时需强耐久性保证，即使重启丢失内存状态，也应执行已同意的操作。</li><li><strong>解决方案</strong>：将每个状态变化作为命令存储在硬盘文件的日志中，单个服务器进程维护一个顺序追加的日志。日志更新可通过 Singular Update Queue 实现。日志条目有唯一标识符，有助于其他操作，如分段日志或低水位标记清理日志。</li><li><strong>示例</strong>：Consensus 算法（如 Zookeeper、RAFT）的日志实现，Kafka 的存储实现，以及所有数据库（包括 NoSQL 数据库如 Cassandra）都使用类似技术。</li></ul></li><li><strong>Segmented Log</strong><ul><li><strong>问题</strong>：单个日志文件可能增长过大，在启动时读取成为性能瓶颈，且清理操作困难。</li><li><strong>解决方案</strong>：将单个日志分割成多个较小的段，日志文件达到指定大小限制后滚动。需要一种方法将逻辑日志偏移量映射到日志段文件。</li><li><strong>示例</strong>：Zookeeper、RAFT 的日志实现，Kafka 的存储实现以及所有数据库（包括 NoSQL 数据库如 Cassandra）都使用基于预配置日志大小的滚动策略。</li></ul></li><li><strong>Low - Water Mark</strong><ul><li><strong>问题</strong>：Write - Ahead Log 会无限增长磁盘存储，需一种机制确定可安全丢弃的日志部分。</li><li><strong>解决方案</strong>：通过机制（如基于快照或时间）确定可丢弃的日志下限（低水位标记），后台任务持续检查并删除可丢弃的日志文件。</li><li><strong>示例</strong>：Zookeeper、RAFT 等 Consensus 算法实现基于快照的日志清理，Kafka 实现基于时间的日志清理。</li></ul></li><li><strong>Leader and Followers</strong><ul><li><strong>问题</strong>：为实现系统容错需在多服务器复制数据，同时要保证数据一致性，Write 和 Read Quorum 不够，需更强的一致性保证。</li><li><strong>解决方案</strong>：在集群中选一个服务器作为领导者（Leader），负责决策并将决策传播给其他服务器（Followers）。服务器启动时查找领导者，无领导者则触发选举，只有领导者处理客户端请求，追随者可转发请求给领导者。</li><li><strong>示例</strong>：Consensus 算法需一个服务器协调复制过程，如 Paxos Made Simple 论文中强调的，以及 Raft 和 Zab 等 Consensus 算法中的领导者选举。</li></ul></li><li><strong>HeartBeat</strong><ul><li><strong>问题</strong>：在集群中，服务器需及时检测其他服务器故障，以便采取正确行动处理故障服务器上的数据请求。</li><li><strong>解决方案</strong>：服务器定期向其他服务器发送心跳消息，若一段时间未收到某个服务器的心跳，则认为该服务器故障。心跳间隔需大于网络往返时间，小于服务器等待心跳的超时时间。</li><li><strong>示例</strong>：在基于 Consensus 的系统（如 RAFT、Zookeeper）中，领导者向追随者发送心跳；在大规模集群中，如 Akka、Cassandra 使用 Phi Accrual 故障检测器，Hashicorp Consul 使用基于 Gossip 的故障检测器。</li></ul></li><li><strong>Paxos</strong><ul><li><strong>问题</strong>：多个节点共享状态时需达成一致，在无领导者或领导者选举时节点需自行确定值，且要处理节点故障和网络问题。</li><li><strong>解决方案</strong>：Paxos 算法通过三个阶段（准备阶段、接受阶段、提交阶段）确保多个节点对同一值达成一致，即使存在部分网络或节点故障。</li><li><strong>示例</strong>：在集群中多个节点需确定一个值的场景，如设置集群名称；在一些数据库产品（如 Cosmos DB、Spanner）中使用 Paxos 的变体（如 Multi - Paxos），Cassandra 使用基本 Paxos 实现轻量级事务。</li></ul></li><li><strong>Replicated Log</strong><ul><li><strong>问题</strong>：多个节点共享状态时需同步状态，且每个副本需按相同顺序执行请求，以保证最终状态一致。</li><li><strong>解决方案</strong>：集群节点维护 Write - Ahead Log，通过共识算法协调日志条目复制，使所有节点有相同日志。选举领导者协调复制，客户端与领导者通信，领导者添加请求到日志并确保复制到追随者。</li><li><strong>示例</strong>：Raft 和 Multi - Paxos 是实现 Replicated Log 的流行算法，被许多数据库和分布式系统使用。</li></ul></li><li><strong>Quorum</strong><ul><li><strong>问题</strong>：在分布式系统中，需平衡系统性能和连续性，确定多少服务器确认复制才能保证更新可靠。</li><li><strong>解决方案</strong>：集群中多数节点确认更新时认为更新已接收，这个多数称为 Quorum。Quorum 用于决定何时数据对客户端可见以及领导者选举等。</li><li><strong>示例</strong>：所有基于 Consensus 的实现（如 Zab、Raft、Paxos）都基于 Quorum，在一些非 Consensus 系统中，也用 Quorum 确保在故障或网络分区时最新更新至少在一个服务器可用。</li></ul></li><li><strong>Generation Clock</strong><ul><li><strong>问题</strong>：在 Leader 和 Followers 模式中，领导者可能暂时与追随者断开连接，集群需检测并处理来自旧领导者的请求。</li><li><strong>解决方案</strong>：每个进程维护一个 Generation Clock，每次选举领导者时递增。领导者在日志中标记请求所属的 Generation，追随者通过比较 Generation 拒绝旧领导者的请求。</li><li><strong>示例</strong>：Raft 使用 Term 概念标记领导者 Generation，Zookeeper 中每个事务 ID 包含 Epoch（类似 Generation），Cassandra 中服务器重启时递增 Generation 并在系统键空间中传播。</li></ul></li><li><strong>High - Water Mark</strong><ul><li><strong>问题</strong>：在复制日志的系统中，需确定日志中哪些部分已安全复制到多数追随者，以便在领导者故障时数据仍可用。</li><li><strong>解决方案</strong>：High - Water Mark 是日志中最后成功复制到 Quorum 的索引。领导者将其添加到心跳消息中，追随者根据此标记确定可提交的日志条目。</li><li><strong>示例</strong>：在 RAFT 共识算法中称为 CommitIndex，Kafka 复制协议中有单独的 High - Water Mark，Apache BookKeeper 有类似概念。</li></ul></li><li><strong>Singular Update Queue</strong><ul><li><strong>问题</strong>：多个并发客户端更新状态时，需安全地逐个处理更新，同时避免阻塞调用者和影响系统吞吐量。</li><li><strong>解决方案</strong>：使用工作队列和单个处理线程，多个客户端可提交状态变化到队列，单个线程按顺序处理。</li><li><strong>示例</strong>：所有基于 Consensus 的实现（如 Zookeeper、etcd）需要严格顺序处理请求，使用类似代码结构；Apache Kafka 的 Controller 和 Cassandra 的某些阶段也使用单线程处理更新。</li></ul></li><li><strong>Request Waiting List</strong><ul><li><strong>问题</strong>：集群节点处理客户端请求需与其他节点通信复制数据，需等待其他节点响应后才能响应客户端，且要处理异步响应。</li><li><strong>解决方案</strong>：集群节点维护一个等待列表，映射请求和回调函数。当收到其他节点响应时，通过回调函数处理响应并确定是否满足客户端请求的条件（如 Quorum）。</li><li><strong>示例</strong>：Cassandra 使用异步消息传递并处理响应消息，Kafka 使用数据结构跟踪等待请求，etcd 维护等待列表响应客户端请求。</li></ul></li><li><strong>Idempotent Receiver</strong><ul><li><strong>问题</strong>：客户端发送请求可能未收到响应，重试时服务器可能收到重复请求，需确保请求只处理一次。</li><li><strong>解决方案</strong>：为客户端分配唯一 ID，客户端注册自己，服务器为每个客户端存储请求响应。客户端发送请求时带上唯一 ID 和请求编号，服务器根据编号检查是否已处理。</li><li><strong>示例</strong>：Raft 实现提供线性化操作的幂等性，Kafka 允许幂等生产者，Zookeeper 通过 Sessions 和 zxid 概念实现客户端恢复。</li></ul></li><li><strong>Follower Reads</strong><ul><li><strong>问题</strong>：在 Leader 和 Followers 模式中，领导者可能因过多请求而过载，且在多数据中心设置中，远程客户端请求领导者会有额外延迟。</li><li><strong>解决方案</strong>：允许追随者处理读请求，以减轻领导者负载并提高吞吐量。追随者可根据位置或延迟选择，同时要处理读请求可能返回旧值的问题。</li><li><strong>示例</strong>：许多数据库和分布式系统支持追随者读，如 Neo4j 的因果集群，MongoDB 的副本集，CockroachDB 和 Kafka 的相关实现。</li></ul></li><li><strong>Versioned Value</strong><ul><li><strong>问题</strong>：在分布式系统中，节点需确定某个键的最新值，有时还需知道过去的值。</li><li><strong>解决方案</strong>：为每个值存储一个版本号，每次更新递增版本号。客户端可读取特定版本的值，服务器根据版本号处理读请求。</li><li><strong>示例</strong>：许多数据系统使用版本号实现 MVCC 和事务隔离，如 RocksDB、etcd、MongoDB 和 CockroachDB 等。</li></ul></li><li><strong>Version Vector</strong><ul><li><strong>问题</strong>：多个服务器允许更新同一键时，需检测并发更新。</li><li><strong>解决方案</strong>：为每个键关联一个版本向量，向量包含每个集群节点的计数器。通过比较版本向量检测并发更新并处理冲突。</li><li><strong>示例</strong>：一些数据库（如 riak、voldemort）使用版本向量，Cassandra 不使用版本向量，而是通过时间戳支持最后写入获胜的冲突解决策略。</li></ul></li></ul><h3 id="第三部分-数据分区模式" tabindex="-1"><a class="header-anchor" href="#第三部分-数据分区模式" aria-hidden="true">#</a> 第三部分：数据分区模式</h3><ul><li><strong>Fixed Partitions</strong><ul><li><strong>问题</strong>：将数据映射到集群节点时，要保证数据均匀分布，且能快速确定某个数据记录存储在哪个节点，同时在集群节点变化时尽量减少数据移动。</li><li><strong>解决方案</strong>：将数据映射到逻辑分区，逻辑分区再映射到集群节点。选择合适的哈希函数保证哈希值不受平台和运行时影响，通过 Consistent Core 或其他协调器管理分区映射，并跟踪集群成员。</li><li><strong>示例</strong>：Kafka 每个主题有固定数量的分区，Akka 的分片分配有固定数量的分片，一些内存数据网格产品（如 Apache Ignite、Hazelcast）配置有固定数量的分区。</li></ul></li><li><strong>Key - Range Partitions</strong><ul><li><strong>问题</strong>：使用哈希映射数据到集群节点时，查询一个键范围的数据需查询所有分区，效率低下。</li><li><strong>解决方案</strong>：创建按键范围排序的逻辑分区，将分区映射到集群节点。可以预定义键范围，也可实现自动拆分分区。</li><li><strong>示例</strong>：一些数据库（如 hbase、CockroachDB、YugabyteDB、TiKV）支持范围分区。</li></ul></li><li><strong>Two Phase Commit</strong><ul><li><strong>问题</strong>：在多个集群节点上原子性地存储数据时，每个节点需知道其他节点是否成功存储数据。</li><li><strong>解决方案</strong>：两阶段提交协议包括准备阶段和提交阶段。一个节点作为协调者跟踪事务状态，在准备阶段各节点获取所需资源并承诺可提交，在提交阶段实际执行更新。</li><li><strong>示例</strong>：一些分布式数据库（如 CockroachDB、MongoDB）使用两阶段提交在分区上原子性存储值，Kafka 允许跨多个分区原子性地生产消息。</li></ul></li></ul><h3 id="第四部分-分布式时间模式" tabindex="-1"><a class="header-anchor" href="#第四部分-分布式时间模式" aria-hidden="true">#</a> 第四部分：分布式时间模式</h3><ul><li><strong>Lamport Clock</strong><ul><li><strong>问题</strong>：在多个服务器上存储数据时，需确定数据的存储顺序，但系统时钟不可靠（可能不单调），不能用于比较不同服务器的时间戳。</li><li><strong>解决方案</strong>：Lamport Clock 为每个服务器维护一个逻辑时间戳，每次写操作时递增。通过比较逻辑时间戳确定事件的先后顺序。</li><li><strong>示例</strong>：一些数据库（如 MongoDB、CockroachDB）使用 Lamport Clock 的变体实现 MVCC 存储，Generation Clock 是 Lamport Clock 的一个例子。</li></ul></li><li><strong>Hybrid Clock</strong><ul><li><strong>问题</strong>：使用 Lamport Clock 作为版本号时，客户端无法知道版本的实际日期时间。</li><li><strong>解决方案</strong>：Hybrid Clock 结合系统时间戳和逻辑时间戳，既保证单调递增又与实际日期时间相关。</li><li><strong>示例</strong>：一些数据库（如 MongoDB、CockroachDB、YugabyteDB）使用 Hybrid Clock 维护分布式事务的因果关系。</li></ul></li><li><strong>Clock - Bound Wait</strong><ul><li><strong>问题</strong>：在分布式系统中，由于时钟不同步，可能导致读操作无法获取最新值，或写操作无法保证数据顺序正确。</li><li><strong>解决方案</strong>：集群节点在读写值之前等待，直到集群中所有节点的时钟值都高于分配给该值的时间戳。可根据历史观察选择一个合理的最大时钟漂移值，或使用特定的时钟 API（如 Google 的 True Time、AWS 的相关服务）。</li><li><strong>示例</strong>：一些数据库（如 CockroachDB、YugabyteDB）实现读重启机制，Google 的 Spanner 使用相关技术实现提交等待。</li></ul></li></ul><h3 id="第五部分-集群管理模式" tabindex="-1"><a class="header-anchor" href="#第五部分-集群管理模式" aria-hidden="true">#</a> 第五部分：集群管理模式</h3><ul><li><strong>Consistent Core</strong><ul><li><strong>问题</strong>：在大型数据集群中，要提供线性一致性保证，同时处理客户端交互的各种问题（如查找领导者、处理重复请求等），且要保证系统的容错性。</li><li><strong>解决方案</strong>：实现一个较小的（3 - 5 个节点）提供线性一致性和容错性的集群，用于管理大型数据集群的元数据和做出集群范围的决策。通过 Consensus 算法实现，如 Raft。处理客户端交互时，提供查找领导者的机制（如通过追随者返回领导者地址或转发请求），使用幂等接收器处理重复请求。</li><li><strong>示例</strong>：Google 的 Chubby 用于协调和元数据管理，Kafka 使用 Zookeeper 管理元数据，Kubernetes 使用 etcd 进行协调和管理元数据及组成员信息。</li></ul></li><li><strong>Lease</strong><ul><li><strong>问题</strong>：集群节点需要对某些资源有独占访问权，但节点可能出现故障或暂时断开连接，不能无限期占用资源。</li><li><strong>解决方案</strong>：节点向 Consistent Core 请求一个有时间限制的租约，定期刷新租约。租约在所有节点上创建，但只有领导者跟踪租约超时。节点通过 HeartBeat 刷新租约时间。</li><li><strong>示例</strong>：Google 的 Chubby 服务、Zookeeper 的会话管理、Kafka 的 KIP - 631 提案以及 etcd 都使用了类似的时间绑定租约机制，dhcp 协议也涉及租约概念。</li></ul></li><li><strong>State Watch</strong><ul><li><strong>问题</strong>：客户端需要知道服务器上特定值的变化，但持续轮询服务器会增加服务器负担，且过多连接会使服务器不堪重负。</li><li><strong>解决方案</strong>：允许客户端向服务器注册对特定状态变化的兴趣，服务器通过单套接字通道通知客户端。服务器维护状态变化的映射，客户端发送注册请求并存储回调函数。</li><li><strong>示例</strong>：Zookeeper 可设置节点观察，用于 Kafka 的组成员和集群成员故障检测；etcd 的观察实现用于 Kubernetes 的资源观察。</li></ul></li><li><strong>Gossip Dissemination</strong><ul><li><strong>问题</strong>：在集群中，节点需要传递元数据信息给其他节点，若所有节点两两通信会消耗大量网络带宽，且要保证信息在网络问题下也能到达所有节点。</li><li><strong>解决方案</strong>：节点使用 Gossip 风格的通信，定期随机选择一个节点传递信息。基于流行病学模型，即使每个节点只与少数节点通信，信息也能在对数时间内传播到所有节点。同时可限制消息数量和带宽使用，并处理节点故障和网络问题。</li><li><strong>示例</strong>：Cassandra 使用 Gossip 协议进行组成员和故障检测以及元数据传输，Consul 使用相关协议进行组成员和故障检测，同时结合 Consistent Core 存储服务目录。</li></ul></li><li><strong>Emergent Leader</strong><ul><li><strong>问题</strong>：在对等网络系统中，没有严格的领导者选举过程，但仍需要一个节点作为集群协调器处理任务，如分配数据分区和跟踪节点加入或故障。</li><li><strong>解决方案</strong>：根据节点在集群中的“年龄”选择领导者，最老的节点作为协调器。节点通过种子节点加入集群，协调器负责处理节点加入请求、更新成员列表并发送给所有节点，同时处理节点故障和网络问题。</li><li><strong>示例</strong>：JGroups 中最老的成员是协调器，Akka 中最老的成员决定固定分区的放置，一些内存数据网格（如 Hazelcast、Ignite）以最老的成员作为集群协调器。</li></ul></li></ul><h3 id="第六部分-节点间通信模式" tabindex="-1"><a class="header-anchor" href="#第六部分-节点间通信模式" aria-hidden="true">#</a> 第六部分：节点间通信模式</h3><ul><li><strong>Single Socket Channel</strong><ul><li><strong>问题</strong>：在 Leader 和 Followers 模式中，需保证领导者和追随者之间消息的顺序，同时避免过多的新连接增加系统延迟。</li><li><strong>解决方案</strong>：使用单个 TCP 连接（Single Socket Channel）进行通信，节点打开连接后不关闭，通过线程读写请求。使用 HeartBeat 保持连接活跃，并设置合理的连接超时。</li><li><strong>示例</strong>：Zookeeper、Kafka 和 Raft 的参考实现都使用了 Single Socket Channel 进行通信。</li></ul></li><li><strong>Request Batch</strong><ul><li><strong>问题</strong>：当向集群节点发送大量小数据量的请求时，网络延迟和请求处理</li></ul></li></ul><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><p>这些模式往往都是多个一起出现某个系统中，比如 ETCD，有实现 Lease，Leader-flower，Replace Log，Lamport Clock 等等一系列模式。</p><p>当然这也带来了学习的门槛，这本书将这些常用的分布式设计模式都剥离了出来，附加说明与伪代码，是学习分布式系统的绝佳资料。</p><h3 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h3><h4 id="lease-模式示例代码" tabindex="-1"><a class="header-anchor" href="#lease-模式示例代码" aria-hidden="true">#</a> Lease 模式示例代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token comment">// 租约类</span>
<span class="token keyword">class</span> <span class="token class-name">Lease</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> ttl<span class="token punctuation">;</span> <span class="token comment">// 租约有效期（以毫秒为单位）</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> expiresAt<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Lease</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> ttl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ttl <span class="token operator">=</span> ttl<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expiresAt <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ttl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> expiresAt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        expiresAt <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ttl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 租约管理器类</span>
<span class="token keyword">class</span> <span class="token class-name">LeaseManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Lease</span> currentLease<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">acquireLease</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> ttl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLease <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> currentLease<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentLease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lease</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">releaseLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLease<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentLease <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">refreshLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLease<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentLease<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">hasLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> currentLease<span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span>currentLease<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeasePatternExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">LeaseManager</span> leaseManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaseManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 尝试获取租约</span>
        <span class="token keyword">boolean</span> acquired <span class="token operator">=</span> leaseManager<span class="token punctuation">.</span><span class="token function">acquireLease</span><span class="token punctuation">(</span><span class="token string">&quot;resource1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约获取成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 模拟使用资源</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 刷新租约</span>
            <span class="token keyword">boolean</span> refreshed <span class="token operator">=</span> leaseManager<span class="token punctuation">.</span><span class="token function">refreshLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>refreshed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约刷新成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约刷新失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 继续使用资源</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 释放租约</span>
            <span class="token keyword">boolean</span> released <span class="token operator">=</span> leaseManager<span class="token punctuation">.</span><span class="token function">releaseLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>released<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约释放成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约释放失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租约获取失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 检查是否还有租约</span>
        <span class="token keyword">boolean</span> hasLease <span class="token operator">=</span> leaseManager<span class="token punctuation">.</span><span class="token function">hasLease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasLease<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;仍然持有租约&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有租约&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gossip-模式示例代码" tabindex="-1"><a class="header-anchor" href="#gossip-模式示例代码" aria-hidden="true">#</a> Gossip 模式示例代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token comment">// 节点状态类</span>
<span class="token keyword">class</span> <span class="token class-name">NodeState</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        metadata<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> metadata<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Gossip节点类</span>
<span class="token keyword">class</span> <span class="token class-name">GossipNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nodeId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">InetSocketAddress</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">NodeState</span> state<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">&gt;</span></span> seedNodes<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">GossipNode</span><span class="token punctuation">&gt;</span></span> clusterNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">GossipNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> nodeId<span class="token punctuation">,</span> <span class="token class-name">InetSocketAddress</span> address<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">&gt;</span></span> seedNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeId <span class="token operator">=</span> nodeId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seedNodes <span class="token operator">=</span> seedNodes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 首先连接种子节点并交换信息</span>
        <span class="token function">connectToSeedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动定期发送和接收Gossip消息的任务</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">sendGossipPeriodically</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">receiveGossip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connectToSeedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> seedNode <span class="token operator">:</span> seedNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>seedNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 这里可以进行信息交换，例如发送自己的状态并接收对方的状态</span>
                <span class="token class-name">GossipMessage</span> outgoingMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GossipMessage</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">,</span> state<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">GossipMessage</span> incomingMessage <span class="token operator">=</span> <span class="token function">sendAndReceiveMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">mergeState</span><span class="token punctuation">(</span>incomingMessage<span class="token punctuation">.</span><span class="token function">getNodeStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                clusterNodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>incomingMessage<span class="token punctuation">.</span><span class="token function">getNodeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendGossipPeriodically</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每隔5秒发送一次Gossip消息</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GossipNode</span><span class="token punctuation">&gt;</span></span> nodesToSend <span class="token operator">=</span> <span class="token function">selectRandomNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GossipNode</span> node <span class="token operator">:</span> nodesToSend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">GossipMessage</span> outgoingMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GossipMessage</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">,</span> state<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">GossipMessage</span> incomingMessage <span class="token operator">=</span> <span class="token function">sendAndReceiveMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">mergeState</span><span class="token punctuation">(</span>incomingMessage<span class="token punctuation">.</span><span class="token function">getNodeStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GossipNode</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectRandomNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GossipNode</span><span class="token punctuation">&gt;</span></span> selectedNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numToSelect <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> clusterNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次选择最多3个节点进行发送</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numToSelect<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>clusterNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">GossipNode</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GossipNode</span><span class="token punctuation">)</span> clusterNodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectedNodes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                selectedNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> selectedNodes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">receiveGossip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">GossipMessage</span> incomingMessage <span class="token operator">=</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">GossipMessage</span> outgoingMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GossipMessage</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">,</span> state<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sendMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">mergeState</span><span class="token punctuation">(</span>incomingMessage<span class="token punctuation">.</span><span class="token function">getNodeStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">GossipMessage</span> <span class="token function">sendAndReceiveMessage</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">,</span> <span class="token class-name">GossipMessage</span> outgoingMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">sendMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">,</span> <span class="token class-name">GossipMessage</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里需要实现消息的序列化和发送逻辑</span>
        <span class="token comment">// 为了简单起见，这里只是打印消息内容</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">GossipMessage</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里需要实现消息的反序列化和接收逻辑</span>
        <span class="token comment">// 为了简单起见，这里只是返回一个模拟的消息</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GossipMessage</span><span class="token punctuation">(</span><span class="token string">&quot;node2&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeState</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> otherState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> otherState<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token function">isNewerVersion</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isNewerVersion</span><span class="token punctuation">(</span><span class="token class-name">String</span> newValue<span class="token punctuation">,</span> <span class="token class-name">String</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里可以根据实际情况定义版本比较逻辑</span>
        <span class="token comment">// 为了简单起见，这里只是比较字符串长度</span>
        <span class="token keyword">return</span> newValue<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> oldValue<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Gossip消息类</span>
<span class="token keyword">class</span> <span class="token class-name">GossipMessage</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nodeId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeStates<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">GossipMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> nodeId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeStates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeId <span class="token operator">=</span> nodeId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeStates <span class="token operator">=</span> nodeStates<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNodeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nodeId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNodeStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nodeStates<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GossipDisseminationExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">InetSocketAddress</span> node1Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> node2Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">&gt;</span></span> seedNodes <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>node2Address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GossipNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GossipNode</span><span class="token punctuation">(</span><span class="token string">&quot;node1&quot;</span><span class="token punctuation">,</span> node1Address<span class="token punctuation">,</span> seedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GossipNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GossipNode</span><span class="token punctuation">(</span><span class="token string">&quot;node2&quot;</span><span class="token punctuation">,</span> node2Address<span class="token punctuation">,</span> seedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="emergent-leader-模式示例代码" tabindex="-1"><a class="header-anchor" href="#emergent-leader-模式示例代码" aria-hidden="true">#</a> Emergent Leader 模式示例代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeoutException</span></span><span class="token punctuation">;</span>

<span class="token comment">// 成员类，表示集群中的一个节点</span>
<span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">InetSocketAddress</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> joined<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>joined <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">InetSocketAddress</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasJoined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> joined<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJoined</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> joined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>joined <span class="token operator">=</span> joined<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 成员服务类，负责管理节点的加入和集群成员信息</span>
<span class="token keyword">class</span> <span class="token class-name">MembershipService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Member</span> self<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Member</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxJoinAttempts <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MembershipService</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> selfAddress<span class="token punctuation">,</span> <span class="token keyword">int</span> selfAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>self <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span>selfAddress<span class="token punctuation">,</span> selfAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> seedAddress<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>seedAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果自己是种子节点，初始化成员列表并设置自己已加入</span>
            self<span class="token punctuation">.</span><span class="token function">setJoined</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            members<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 非种子节点尝试加入集群</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxJoinAttempts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> joinFuture <span class="token operator">=</span> <span class="token function">attemptJoin</span><span class="token punctuation">(</span>seedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">boolean</span> joined <span class="token operator">=</span> joinFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 加入超时，继续尝试</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;无法加入集群&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">attemptJoin</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> seedAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里可以模拟与种子节点的通信，发送加入请求</span>
                <span class="token comment">// 为了简单起见，这里直接返回是否成功加入的结果</span>
                <span class="token keyword">return</span> seedAddress<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里可以启动一些与集群管理相关的任务，如心跳检测等</span>
        <span class="token comment">// 为了简单起见，这里只是打印节点已加入集群的信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 已加入集群&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Member</span> <span class="token function">getCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Member</span> coordinator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Member</span> member <span class="token operator">:</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>coordinator <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> member<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> coordinator<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                coordinator <span class="token operator">=</span> member<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> coordinator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCoordinator</span><span class="token punctuation">(</span><span class="token class-name">Member</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> member <span class="token operator">==</span> <span class="token function">getCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNodeFailure</span><span class="token punctuation">(</span><span class="token class-name">Member</span> failedMember<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        members<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>failedMember<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCoordinator</span><span class="token punctuation">(</span>failedMember<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果故障节点是协调器，重新选举协调器</span>
            <span class="token class-name">Member</span> newCoordinator <span class="token operator">=</span> <span class="token function">getCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newCoordinator<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newCoordinator<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 成为新的协调器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 集群节点类</span>
<span class="token keyword">class</span> <span class="token class-name">ClusterNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MembershipService</span> membershipService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">InetSocketAddress</span> seedAddress<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>membershipService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembershipService</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>membershipService<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>seedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        membershipService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMembershipService</span><span class="token punctuation">(</span><span class="token class-name">MembershipService</span> membershipService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>membershipService <span class="token operator">=</span> membershipService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MembershipService</span> <span class="token function">getMembershipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> membershipService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmergentLeaderExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token class-name">InetSocketAddress</span> seedAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> node1Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> node2Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8082</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> node3Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建节点并加入集群</span>
        <span class="token class-name">ClusterNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span>node1Address<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> seedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClusterNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span>node2Address<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> seedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClusterNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span>node3Address<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> seedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动节点</span>
        node1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟节点故障</span>
        node2<span class="token punctuation">.</span><span class="token function">getMembershipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleNodeFailure</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span><span class="token function">getMembershipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wal-模式示例代码" tabindex="-1"><a class="header-anchor" href="#wal-模式示例代码" aria-hidden="true">#</a> WAL 模式示例代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ScheduledExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token comment">// Write Ahead Log条目类</span>
<span class="token keyword">class</span> <span class="token class-name">WALEntry</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> entryIndex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WALEntry</span><span class="token punctuation">(</span><span class="token keyword">long</span> entryIndex<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>entryIndex <span class="token operator">=</span> entryIndex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getEntryIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> entryIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 分段日志段类</span>
<span class="token keyword">class</span> <span class="token class-name">WALSegment</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALEntry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> baseOffset<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> maxLogSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">File</span> file<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WALSegment</span><span class="token punctuation">(</span><span class="token keyword">long</span> baseOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> maxLogSize<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>baseOffset <span class="token operator">=</span> baseOffset<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLogSize <span class="token operator">=</span> maxLogSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> file<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">writeEntry</span><span class="token punctuation">(</span><span class="token class-name">WALEntry</span> entry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> maxLogSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        entries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> baseOffset <span class="token operator">+</span> entries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALEntry</span><span class="token punctuation">&gt;</span></span> <span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> entries<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        entries<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Write Ahead Log类</span>
<span class="token keyword">class</span> <span class="token class-name">WriteAheadLog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALSegment</span><span class="token punctuation">&gt;</span></span> segments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> currentBaseOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> maxLogSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">File</span> logDir<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ScheduledExecutorService</span> cleanerExecutor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WriteAheadLog</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxLogSize<span class="token punctuation">,</span> <span class="token class-name">File</span> logDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLogSize <span class="token operator">=</span> maxLogSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logDir <span class="token operator">=</span> logDir<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cleanerExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动低水位标记清理任务</span>
        cleanerExecutor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">cleanLogs</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">writeEntry</span><span class="token punctuation">(</span><span class="token class-name">WALEntry</span> entry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">WALSegment</span> currentSegment <span class="token operator">=</span> <span class="token function">getCurrentSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> currentSegment<span class="token punctuation">.</span><span class="token function">writeEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALEntry</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALEntry</span><span class="token punctuation">&gt;</span></span> allEntries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WALSegment</span> segment <span class="token operator">:</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            allEntries<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> allEntries<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">WALSegment</span> <span class="token function">getCurrentSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>segments<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> segments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>segments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> maxLogSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>logDir<span class="token punctuation">,</span> <span class="token string">&quot;segment_&quot;</span> <span class="token operator">+</span> currentBaseOffset <span class="token operator">+</span> <span class="token string">&quot;.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">WALSegment</span> newSegment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WALSegment</span><span class="token punctuation">(</span>currentBaseOffset<span class="token punctuation">,</span> maxLogSize<span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            segments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newSegment<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentBaseOffset <span class="token operator">+=</span> maxLogSize<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> segments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>segments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 低水位标记清理方法</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cleanLogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里可以根据具体的低水位标记逻辑来确定哪些日志段可以被清理</span>
        <span class="token comment">// 为了简单起见，这里只是删除最早的一个日志段</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>segments<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">WALSegment</span> segmentToDelete <span class="token operator">=</span> segments<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> fileToDelete <span class="token operator">=</span> segmentToDelete<span class="token punctuation">.</span>file<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fileToDelete<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fileToDelete<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cleanerExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WALSegment</span> segment <span class="token operator">:</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                segment<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteAheadLogExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> logDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;logs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>logDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logDir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">WriteAheadLog</span> wal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteAheadLog</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> logDir<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 写入一些日志条目</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">WALEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WALEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&quot;Data &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            wal<span class="token punctuation">.</span><span class="token function">writeEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 读取所有日志条目并打印</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WALEntry</span><span class="token punctuation">&gt;</span></span> allEntries <span class="token operator">=</span> wal<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WALEntry</span> entry <span class="token operator">:</span> allEntries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Index: &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getEntryIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Data: &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 等待一段时间，让清理任务执行</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wal<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>`,26)),s("ul",null,[s("li",null,[s("a",k,[n[0]||(n[0]=l("分布式系统模式")),i(a)])])])])}const b=t(u,[["render",r],["__file","patterns.html.vue"]]);export{b as default};
