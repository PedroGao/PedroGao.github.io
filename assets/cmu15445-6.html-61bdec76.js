const t=JSON.parse('{"key":"v-3bc9facb","path":"/posts/database/cmu15445-6.html","title":"谈谈关系数据库的设计与实现(6)——日志和恢复","lang":"zh-CN","frontmatter":{"icon":"edit","title":"谈谈关系数据库的设计与实现(6)——日志和恢复","date":"2023-04-22T00:00:00.000Z","tag":["sql","database","oltp"],"category":["database"],"description":"日志和恢复 计算机容易发生各种故障，如磁盘故障、宕机、软件错误等。一旦计算机故障就容易引起运行其内的数据库丢失数据，因此数据库必须预先采取措施以保证即使发生故障，数据仍然找回。 恢复机制是数据库必不可少的一部分，它能保证数据库即使在故障发生的情况下，仍然恢复到发生前的状态，保证前后数据的一致性，保证数据库的高可用性。 恢复算法是确保数据库一致性、原子性和持久性的关键技术。 恢复算法主要工作包括如下两部分： 记录事务处理期间的操作，以确保 DBMS 可以从故障中恢复； 将数据库恢复到某个失败后的状态，确保操作的原子性、一致性和持久性。 恢复算法主要思路： 预写日志(WAL)： 任何数据更改在应用到数据库之前，必须先由日志写入磁盘。 必须使用 STEAL + NO-FORCE 缓冲池策略。 在重做期间恢复历史数据：在重新启动时，重做操作并将数据库恢复到崩溃前的状态。 撤消期间记录更改：将撤消操作记录到日志中以确保操作不会在重复失败的情况下重复执行。","head":[["meta",{"property":"og:url","content":"https://pedrogao.github.io/posts/database/cmu15445-6.html"}],["meta",{"property":"og:site_name","content":"廊中别苑"}],["meta",{"property":"og:title","content":"谈谈关系数据库的设计与实现(6)——日志和恢复"}],["meta",{"property":"og:description","content":"日志和恢复 计算机容易发生各种故障，如磁盘故障、宕机、软件错误等。一旦计算机故障就容易引起运行其内的数据库丢失数据，因此数据库必须预先采取措施以保证即使发生故障，数据仍然找回。 恢复机制是数据库必不可少的一部分，它能保证数据库即使在故障发生的情况下，仍然恢复到发生前的状态，保证前后数据的一致性，保证数据库的高可用性。 恢复算法是确保数据库一致性、原子性和持久性的关键技术。 恢复算法主要工作包括如下两部分： 记录事务处理期间的操作，以确保 DBMS 可以从故障中恢复； 将数据库恢复到某个失败后的状态，确保操作的原子性、一致性和持久性。 恢复算法主要思路： 预写日志(WAL)： 任何数据更改在应用到数据库之前，必须先由日志写入磁盘。 必须使用 STEAL + NO-FORCE 缓冲池策略。 在重做期间恢复历史数据：在重新启动时，重做操作并将数据库恢复到崩溃前的状态。 撤消期间记录更改：将撤消操作记录到日志中以确保操作不会在重复失败的情况下重复执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-22T13:56:51.000Z"}],["meta",{"property":"article:author","content":"pedrogao"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:tag","content":"oltp"}],["meta",{"property":"article:published_time","content":"2023-04-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-22T13:56:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"谈谈关系数据库的设计与实现(6)——日志和恢复\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-22T13:56:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pedrogao\\",\\"url\\":\\"https://github.com/pedrogao/\\"}]}"]]},"headers":[{"level":2,"title":"日志和恢复","slug":"日志和恢复","link":"#日志和恢复","children":[{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":3,"title":"恢复","slug":"恢复","link":"#恢复","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]}],"git":{"createdTime":1682171811000,"updatedTime":1682171811000,"contributors":[{"name":"pedrogao","email":"1312342604@qq.com","commits":1}]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"posts/database/cmu15445-6.md","localizedDate":"2023年4月22日","excerpt":"<h2> 日志和恢复</h2>\\n<p>计算机容易发生各种故障，如磁盘故障、宕机、软件错误等。一旦计算机故障就容易引起运行其内的数据库丢失数据，因此数据库必须预先采取措施以保证即使发生故障，数据仍然找回。</p>\\n<p>恢复机制是数据库必不可少的一部分，它能保证数据库即使在故障发生的情况下，仍然恢复到发生前的状态，保证前后数据的一致性，保证数据库的高可用性。</p>\\n<p>恢复算法是确保数据库一致性、原子性和持久性的关键技术。</p>\\n<p>恢复算法主要工作包括如下两部分：</p>\\n<ul>\\n<li>\\n<p>记录事务处理期间的操作，以确保 DBMS 可以从故障中恢复；</p>\\n</li>\\n<li>\\n<p>将数据库恢复到某个失败后的状态，确保操作的原子性、一致性和持久性。\\n恢复算法主要思路：</p>\\n</li>\\n<li>\\n<p>预写日志(WAL)：</p>\\n<ul>\\n<li>任何数据更改在应用到数据库之前，必须先由日志写入磁盘。</li>\\n<li>必须使用 STEAL + NO-FORCE 缓冲池策略。</li>\\n</ul>\\n</li>\\n<li>\\n<p>在重做期间恢复历史数据：在重新启动时，重做操作并将数据库恢复到崩溃前的状态。</p>\\n</li>\\n<li>\\n<p>撤消期间记录更改：将撤消操作记录到日志中以确保操作不会在重复失败的情况下重复执行。</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
