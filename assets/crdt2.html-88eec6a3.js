import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,a as n,e as a,w as r,b as s,f as e}from"./app-1a4365f6.js";const k="/assets/RGA-local-operations-c30e2715.png",d="/assets/rga1-0eb7cccf.png",m="/assets/rga2-341ad91b.png",v="/assets/rga3-b5a4d6b4.png",b="/assets/rga4-7c7123bc.png",h="/assets/rga5-e666d39b.png",g="/assets/rga6-3b329293.png",y="/assets/rga7-d18727ad.png",w="/assets/rga8-9d478908.png",f={},_=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),I={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"这两种算法分别是知名 CRDT 库 Automerge 和 Yjs 所采用的算法，被广泛应用于生产环境，是深入 CRDT 应用的基础。",-1),A=n("p",null,"本篇文章我们将介绍 RGA 算法，下一篇文章我们将介绍 YATA 算法。",-1),R=n("h2",{id:"rga",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rga","aria-hidden":"true"},"#"),s(" RGA")],-1),T={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"},G=e('<blockquote><p>千万别被名字吓到了，其实 RGA 就是列表的 CRDT 实现。论文原话是：<br> growable array is the Vector class of JAVA or STL.</p></blockquote><p>论文中提到 RGA 在有序复制集合上拥有良好的插入、删除性能，优于已有的 OT 算法，适合用于协同文本编辑场景。</p><p>当然 RGA 不仅适用于有序文本，同时也能推广到有序列表，哈希表等场景，因此 RGA 也是 Automerge 库的基础。</p><p>论文中，给出了 RGA 基于双向链表实现的部分伪代码，如下：</p><p><img src="'+k+'" alt="RGA-local-operations"></p><p>伪代码实现十分简单，无论是插入还是删除，都是在链表中排除已删除项，找到<code>i</code>对应的位置，然后插入或删除即可。</p><p>不过，双向链表显然无法满足大文本编辑、查找等场景的性能要求，因此有不少优化版的 RGA 实现，比如：</p>',7),D={href:"https://automerge.org/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://nomad.foo/blog/cola",target:"_blank",rel:"noopener noreferrer"},j={href:"https://pages.lip6.fr/Marc.Shapiro/papers/rgasplit-group2016-11.pdf",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例","aria-hidden":"true"},"#"),s(" 案例")],-1),S=n("p",null,[s("下面，以"),n("a",{href:"XXX"},"纯文本协同编辑"),s("为例，看看 RGA 是如何工作的。")],-1),P=n("hr",null,null,-1),B=e('<hr><blockquote><p>只支持简单的英文、数字文本增、删，不支持中文、复制粘贴等操作。<br> 没办法，input 中文事件笔者不会啊。</p></blockquote><p>在左侧输入框中编辑文本内容，都会同步到对方，最终保证两个输入框的内容一致。</p><h2 id="推演" tabindex="-1"><a class="header-anchor" href="#推演" aria-hidden="true">#</a> 推演</h2><p>文本内容本质上是<strong>插入操作的集合</strong>，因此我们可以通过插入操作来推演 RGA 的工作原理。</p><p>下面，以<strong>纯文本</strong>协同编辑为例，看看 RGA 是保证多方编辑内容最终一致的。</p><p>首先，我们看一个最简单的例子：<strong>有且只有一个客户端进行编辑</strong></p><p><img src="'+d+'" alt="rga1"></p><p>客户端 1 在位置<code>0</code>插入字符<code>1</code>，并将插入操作(op)同步到客户端 2，客户端 2 收到 op 并应用后，将<code>1</code>插入到位置<code>0</code>，此时客户端 1 和客户端 2 的文本内容是一致的。</p><p>因为只有客户端 1 有编辑操作，其它客户端处于只读状态，那么就不能产生<strong>编辑冲突</strong>，因此最后的文本内容肯定是一致的。</p><p>可一旦有多个客户端同时进行编辑，就会产生<strong>编辑冲突</strong>，导致最终文本内容不一致，比如：</p><p><img src="'+m+`" alt="rga2"></p><p>客户端 1、2 分别在位置<code>1</code>插入字符<code>2</code>、<code>3</code>，并将插入操作(op)同步到对方应用后，此时客户端 1 和客户端 2 的文本内容不一致。</p><p>而产生不一致的原因是，操作同步的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然携带了插入位置<code>1</code>和插入数据<code>2</code>，但没有其它约束条件，导致最终文本内容不一致。</p><p>我们可以通过<strong>插入意图</strong>来解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">client1</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">client2</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>&quot;1&quot;</code>就是插入意图，表示在<code>1</code>之后插入<code>2</code>，<code>3</code>，但这样就能保证最终文本内容一致吗？</p><p>显然是不能的，因为<code>1</code>虽然是插入意图，但是文本中可能存在多个<code>1</code>，比如：</p><p><img src="`+v+`" alt="rga3"></p><p>我们为每个插入字符都添加一个唯一的标识符 Id，比如字符<code>1</code>的 Id：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// [siteId, counter]</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Id</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Id</code> 包括两部分，第一部分是客户端的唯一标识符，第二部分是客户端操作的序号，这样就能保证每个字符都有唯一的 Id。</p><p>有了 Id 后，操作同步数据就变成了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// params:</span>
<span class="token comment">// 1. 插入位置</span>
<span class="token comment">// 2. 插入数据</span>
<span class="token comment">// 3. 插入意图，即当前插入位置字符的 Id</span>
<span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样能够保证最终文本内容一致了吗？如下：</p><p><img src="`+b+`" alt="rga4"></p><p>客户端 1、2 分别在位置<code>1</code>插入字符<code>2</code>、<code>3</code>，因为两个插入操作的意图是一致的，都插入在字符<code>1</code>右侧，但字符<code>2</code>，<code>3</code>之间位置暂时不知如何排列，从而导致最终文本内容不一致。</p><p>我们可以通过字符<code>2</code>，<code>3</code>的 Id 来解决二者之间的插入排序问题，即：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">client1</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">client2</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;site2&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约定</strong>，如果插入意图一致，那么就按照字符 Id 来排序：</p><ul><li>如果<code>counter</code>不同，那么按照<code>counter</code>排序，大者在右边；</li><li>如果<code>counter</code>相同，那么按照<code>siteId</code>排序，大者在右边；</li></ul><p>有了排序后，最终文本内容就一致了：</p><p><img src="`+h+`" alt="rga5"></p><p>最后，来看看删除操作，我们将<strong>一次插入</strong>抽象为一个<code>Item</code>，即：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入内容</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span> <span class="token comment">// Id</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入意图</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于删除，最容易想到的是将<code>Item</code>直接删除掉，但这显然不行，因此不同客户端可能在同一个插入意图上工作，如果将字符删除掉了，那么意图也就丢失了，文本最终内容也就不一致了。</p><p>因此，我们不能直接删除<code>Item</code>，而是引入<strong>墓碑机制</strong>，即：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入内容</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span> <span class="token comment">// Id</span>
  isDeleted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入意图</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除<code>Item</code>时，将<code>isDeleted</code>设置为 true，这样就能保留插入意图，从而保证最终文本内容一致。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>充分推演后，我们就能给出一个<a href="XXXX">简单 RGA 的实现</a>了。</p><p>首先是数据建模，每个插入字符操作被抽象为一个<code>Item</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// root item has no content</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span>
  isDeleted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  children<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// children of this item</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// parent of this item</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parent</code>：插入意图；</li><li><code>children</code>：子节点，每个字符都可能成为多个字符的意图，因此子节点可能有多个；</li></ul><p>很明显，这样的数据结构导致文本内容是一个树：</p><p><img src="`+g+`" alt="rga6"></p><blockquote><p>ROOT 节点是虚拟节点，标识文档的开始，没有实际意义。</p></blockquote><p>因此我们可以使用<code>Map</code>来存储<code>Item</code>，其中<code>key</code>是<code>Item.id</code>，<code>value</code>是<code>Item</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Doc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  root<span class="token operator">:</span> Id<span class="token punctuation">;</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  vector<span class="token operator">:</span> Vector<span class="token punctuation">;</span>
  clientId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  store<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>clientId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cid <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>
      content<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      id<span class="token operator">:</span> <span class="token punctuation">[</span>cid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      isDeleted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      parent<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token comment">// Root item should insert at the beginning, and could not be deleted or updated</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Exclude root item</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> cid<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>root</code>：文档的根节点，虚拟节点；</li><li><code>length</code>：文档长度，不包括根节点；</li><li><code>vector</code>：客户端向量；</li><li><code>clientId</code>：客户端唯一标识符；</li><li><code>store</code>：存储<code>Item</code>的<code>Map</code>；</li></ul><p>新建<code>Doc</code>时，向<code>store</code>中插入根节点，同时设置<code>length</code>、<code>vector</code>。</p><p>由于整个文档是一颗树，每个字符是其中一个节点，获取文档内容时，我们需要遍历整个树，将所有字符拼接起来：</p><p><img src="`+y+`" alt="rga7"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> doc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> queue<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> doc<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>content <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> content<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于字符<code>3</code>被软删除掉了，因此最终文本内容是<code>[1, 2, 4]</code>。</p><p>接下来是插入操作，插入操作的核心是生成<code>Item</code>，然后将集成(intergrate，下文再详谈)到文档树中。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Item not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">{</span>
      content<span class="token punctuation">,</span>
      id<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      isDeleted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      parent<span class="token operator">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">integrate</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>insert</code>将字符插入到<code>pos</code>位置，因此需要找到<code>pos-1</code>位置的<code>Item</code>作为其插入意图 parent，然后生成新的<code>Item</code>，最后将其集成到文档树中。</p><p><code>findItemByIndex</code>使用 DFS 遍历文档树，排除掉删除字符，找到<code>pos</code>位置的<code>Item</code>：</p><p><img src="`+w+`" alt="rga8"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">private</span> <span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> queue<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token comment">// DFS</span>
    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了<code>findItemByIndex</code>有，删除就十分简单了：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Item not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    item<span class="token punctuation">.</span>isDeleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，解释一下最复杂的<code>integrate</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">integrate</span><span class="token punctuation">(</span>item<span class="token operator">:</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> lastClock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> clock <span class="token operator">=</span> item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastClock <span class="token operator">&gt;=</span> clock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This item has been integrated</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastClock <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!==</span> clock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Clock not match&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> clock<span class="token punctuation">;</span>
    <span class="token comment">// 1. Find the parent item</span>
    <span class="token comment">// 2. Insert the new item to parent.children, compare the id of new item and the next item</span>
    <span class="token comment">// 3. Update the version and length of doc</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span>
      item<span class="token punctuation">.</span>parent<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span>
        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Root item can not integrate</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Parent not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> destIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> destIndex <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> destIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> child <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span>destIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// Smaller id should at left</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>destIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>content <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>integrate</code> 有三个核心步骤：</p><ol><li><code>clock</code>去重逻辑，如果<code>item</code>已经被集成到文档树中，那么就不需要再次集成了；</li><li>找到<code>item</code>的<code>parent</code>，然后将<code>item</code>插入到<code>parent.children</code>中，这里需要注意的是，<code>item</code>的<code>id</code>需要和<code>parent.children</code>中的<code>id</code>进行比较，保证<code>id</code>小的在左边，大的在右边；</li><li>更新<code>doc</code>的<code>length</code>和<code>vector</code>；</li></ol><h2 id="tinyautomerge" tabindex="-1"><a class="header-anchor" href="#tinyautomerge" aria-hidden="true">#</a> TinyAutomerge</h2><p>Automerge 是为数不多将 RGA 用在生产环境上的 CRDT 库，RGA 是 Automerge 中的核心算法部分，设计方式和实现思路都很有借鉴性。</p><p>笔者实现了一个 toy 版本：<a href="xxxx">TinyAutomerge</a>。</p>`,72),X={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},N={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"TODO",-1),L=n("h2",{id:"结语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),s(" 结语")],-1),M=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),O={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/alangibson/awesome-crdt",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types",target:"_blank",rel:"noopener noreferrer"},F={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"};function Y(H,J){const o=p("RouterLink"),t=p("ExternalLinkIcon"),c=p("RGADemo");return i(),u("div",null,[_,n("p",null,[a(o,{to:"/posts/co/crdt1.html"},{default:r(()=>[s("上一篇文章")]),_:1}),s("我们介绍了 CRDT 的基本概念，探讨了一些基础 CRDT 的实现。从本篇文章开始，我们将深入两种 CRDT 算法：")]),n("ul",null,[n("li",null,[n("a",I,[s("RGA"),a(t)])]),n("li",null,[n("a",x,[s("YATA"),a(t)])])]),q,A,R,n("p",null,[s("RGA 全称 Replicate Growable Array 可复制增长数组，由 Hyun 于 2011 年在论文"),n("a",T,[s("Replicated abstract data types: Building blocks for collaborative applications"),a(t)]),s("中提出（2011 年真的是 CRDT 爆发的一年）。")]),G,n("ul",null,[n("li",null,[n("a",D,[s("Automerge"),a(t)]),s(" 中 RGA 是基于 B+树实现的；")]),n("li",null,[n("a",E,[s("Cola"),a(t)]),s("中 RGA 是基于 G-tree 实现的；")]),n("li",null,[n("a",j,[s("RGATreeSplit"),a(t)]),s("使用平衡树来优化 RGA；")])]),C,S,P,a(c),B,n("p",null,[s("TinyAutomerge 是 Automerge 的一个极简版本，它是按照笔者个人理解以及 "),n("a",X,[s("Automerge 文档"),a(t)]),s("来实现的，可以帮助我们更好的理解 Automerge 和 RGA。")]),n("blockquote",null,[n("p",null,[s("Automerge 中 RGA 的"),n("a",N,[s("实现文档"),a(t)]),s("其实已经被官方文档删除掉了，笔者在 github 上找到了以前的 commit，然后将其复制到了飞书文档，希望能帮助到对 Automerge 感兴趣的人")])]),V,L,M,n("ul",null,[n("li",null,[n("a",O,[s("Automerge RGA Runtime"),a(t)])]),n("li",null,[n("a",U,[s("awesome-crdt"),a(t)])]),n("li",null,[n("a",z,[s("Near Real-Time Peer-to-Peer Shared Editing on Extensible Data Types"),a(t)])]),n("li",null,[n("a",F,[s("Replicated abstract data types: Building blocks for collaborative applications"),a(t)])])])])}const W=l(f,[["render",Y],["__file","crdt2.html.vue"]]);export{W as default};
