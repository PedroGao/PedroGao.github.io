import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as o,a as e,b as i,e as s,f as t}from"./app-c1430808.js";const u="/assets/diskqueue1-f3b83ad8.png",d="/assets/diskqueue2-1e4d4f87.png",p="/assets/diskqueue3-d2422c11.png",c="/assets/diskqueue4-e00d0af6.png",_="/assets/diskqueue5-e737a278.png",m="/assets/diskqueue6-41335435.png",h="/assets/diskqueue7-44570cd1.png",k="/assets/diskqueue8-513e38dc.png",q="/assets/diskqueue9-beb8247f.png",g="/assets/diskqueue10-4b74337e.png",f="/assets/diskqueue11-f322adde.png",b={},x=t('<blockquote><p>一步一步推导演进持久化磁盘队列的设计与实现。<br> 在方向不明确，不够熟练的情况下，从 demo 做起，一步步学习先进的设计理念并付诸行动。</p></blockquote><hr><h2 id="第一版-单文件持久化队列" tabindex="-1"><a class="header-anchor" href="#第一版-单文件持久化队列" aria-hidden="true">#</a> 第一版，单文件持久化队列</h2><ul><li>元数据、堆数据存储在一个文件中；</li><li>元数据：记录读、写消费指针，队列大小；</li><li>堆数据：item 长度、数据；</li><li>元数据 + 堆数据单文件存储；</li></ul><p><img src="'+u+'" alt="diskqueue1"></p><p>UML 类图：</p><p><img src="'+d+'" alt="diskqueue2"></p><p>读：</p><p><img src="'+p+'" alt="diskqueue3"></p><p>写：</p><p><img src="'+c+'" alt="diskqueue4"></p>',11),v={href:"https://github.com/pedrogao/tinymq/tree/main/examples/dqv1",target:"_blank",rel:"noopener noreferrer"},y=e("hr",null,null,-1),F=e("h2",{id:"第二版-多文件持久化队列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第二版-多文件持久化队列","aria-hidden":"true"},"#"),i(" 第二版，多文件持久化队列")],-1),N=e("ul",null,[e("li",null,"元数据、堆数据存储在不同文件中；"),e("li",null,"元数据：记录读、写消费指针，队列大小；"),e("li",null,"堆数据：item 长度、数据；"),e("li",null,"元数据 + 堆数据单文件存储；")],-1),w=e("p",null,[e("img",{src:_,alt:"diskqueue5"})],-1),M=e("p",null,[e("img",{src:m,alt:"diskqueue6"})],-1),O={href:"https://github.com/pedrogao/tinymq/tree/main/examples/dqv2",target:"_blank",rel:"noopener noreferrer"},P=t('<p>diskqueue：</p><ul><li>fields： <ul><li>size：队列大小；</li><li>readPos：读偏移；</li><li>writePos：写偏移；</li><li>readFileNum：读文件序号；</li><li>writeFileNum：写文件序号；</li><li>nextReadPos：下一次读文件偏移；</li><li>nextReadFileNum：下一次读文件序号；</li><li>name：队列名称；</li><li>path：数据存储路径；</li><li>maxBytesPerFile：文件最大字节数；</li><li>maxBytesFileRead：文件最大可读字节数；</li><li>syncThreshold：刷盘次数阈值；</li><li>syncTimeout：刷盘间隔；</li></ul></li><li>methods： <ul><li>open：（重新）打开队列；</li><li>readMetadata：读元数据；</li><li>writeMetadata：写元数据；</li><li>writeOne：写一条消息；</li><li>readOne：读一条消息；</li><li>sync：刷盘，元数据文件、写文件；</li></ul></li></ul><p>diskqueue open：</p><p><img src="'+h+'" alt="diskqueue7"></p><p>diskqueue readMetadata：</p><p><img src="'+k+'" alt="diskqueue8"></p><p>diskqueue writeMetadata：</p><p><img src="'+q+'" alt="diskqueue9"></p><p>diskqueue readOne：</p><p><img src="'+g+'" alt="diskqueue10"></p><p>readOne 需要同时支持 peek 和 poll，peek 不会更新 readPos、readFileNum、size，因此 readOne 也不会更新，但 poll 会更新。</p><p>diskqueue writeOne：</p><p><img src="'+f+'" alt="diskqueue11"></p>',13),B={href:"https://github.com/pedrogao/tinymq/tree/main/examples/dqv3",target:"_blank",rel:"noopener noreferrer"},V=t('<p>优化点：</p><ol><li>刷盘策略：</li><li>刷盘线程，频率可配置</li><li>时间戳：</li><li>按时间清除数据</li><li>Page 读取：</li><li>HeapFile、MetaFile 按照页组织</li><li>Cache 策略：</li><li>增加读、写命中率</li></ol><hr><h2 id="第三版-多消费者-fanout-持久化队列" tabindex="-1"><a class="header-anchor" href="#第三版-多消费者-fanout-持久化队列" aria-hidden="true">#</a> 第三版，多消费者（Fanout）持久化队列</h2><ul><li>元数据、堆数据存储在不同文件中；</li><li>元数据：记录多个消费者读、写消费指针，队列大小；</li><li>堆数据：item 长度、数据；</li><li>元数据 + 堆数据单文件存储；</li></ul>',5),E={href:"https://github.com/pedrogao/tinymq/tree/main/diskqueue",target:"_blank",rel:"noopener noreferrer"};function L(R,T){const l=r("ExternalLinkIcon");return n(),o("div",null,[x,e("p",null,[i("实现参考"),e("a",v,[i("dqv1"),s(l)])]),y,F,N,w,M,e("p",null,[i("实现参考"),e("a",O,[i("dqv2"),s(l)])]),P,e("p",null,[i("实现参考"),e("a",B,[i("dqv3"),s(l)])]),V,e("p",null,[i("实现参考"),e("a",E,[i("diskqueue"),s(l)])])])}const I=a(b,[["render",L],["__file","diskqueue.html.vue"]]);export{I as default};
