import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-bdc81fbb.js";const p="/assets/rpc1-8a83f55f.png",e="/assets/rpc2-3e16c9a5.png",c="/assets/rpc3-b9348be2.png",o="/assets/rpc4-eb517373.png",l="/assets/rpc5-c7778ab4.png",i="/assets/rpc6-ee258fa4.png",u="/assets/rpc7-f191281f.png",k="/assets/rpc8-5b6396c4.png",r={},d=t('<blockquote><p>探索一个简单、易用RPC框架——tinyrpc的设计与实现</p></blockquote><h2 id="整体设计" tabindex="-1"><a class="header-anchor" href="#整体设计" aria-hidden="true">#</a> 整体设计</h2><p>RPC（Remote Procedure Call），全称为远程调用。一个完整的RPC架构分为了以下几个核心组件：</p><ul><li>Server：服务器；</li><li>Client：客户端；</li><li>Server Stub：服务端接收到Client发送的数据之后进行消息解包，调用本地方法；</li><li>Client Stub：将客户端请求的参数、服务名称、服务地址进行打包，统一发送给server方；</li></ul><p><img src="'+p+'" alt="img.png"></p><p>调用流程如下图所示：</p><p><img src="'+e+'" alt="img_1.png"></p><h2 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h2><p><img src="'+c+`" alt="img_2.png"></p><p>tinyrpc 框架的整体结构基本分层为：</p><ul><li>代理层：负责对底层调用细节的封装；</li><li>链路层：负责执行一些自定义的过滤链路，可以供后期二次扩展；</li><li>路由层：负责在集群目标服务中的调用筛选策略；</li><li>协议层：负责请求数据的转码封装等作用；</li><li>序列化层：负责将不同的序列化技术嵌套在框架中；</li><li>注册层：关注服务的上下线，以及一些权重，配置动态调整等功能；</li><li>容错层：当服务调用出现失败之后需要有容错层的兜底辅助；</li><li>接入层：考虑如何与常用框架Spring的接入。</li></ul><h3 id="代理层" tabindex="-1"><a class="header-anchor" href="#代理层" aria-hidden="true">#</a> 代理层</h3><p>代理层旨在帮助开发者包装RPC接口调用参数，屏蔽通信、序列化等调用细节。</p><p>开发者在服务端只需定义、实现接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DataService</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">sendData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DataService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在客户端通过代理拿到接口并直接调用，即可完成整个RPC调用链路，极大地拉低了框架使用门槛。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">DataService</span> dataService<span class="token operator">=</span><span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DataService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// proxy service bean</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> response<span class="token operator">=</span>dataService<span class="token punctuation">.</span><span class="token function">sendData</span><span class="token punctuation">(</span><span class="token string">&quot;Hello RPC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Client.main: response: {}&quot;</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中实现接口代理的方式有两种：</p><table><thead><tr><th style="text-align:center;">方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td style="text-align:center;">JDK代理</td><td>JDK原生，上手简单，门槛低；</td><td>不能对类进行代理，只能对接口进行代理，如果我们的类没有实现任何接口，那么就不能使用这种方式进行动态代理；调用性能较差；</td></tr><tr><td style="text-align:center;">Javassist</td><td>动态字节码生成，接口、类都能代理，还能生成业务代码；</td><td>字节码生成，调用性能高；字节码生成，开发门槛高；</td></tr></tbody></table><h3 id="路由层" tabindex="-1"><a class="header-anchor" href="#路由层" aria-hidden="true">#</a> 路由层</h3><p>如果一个服务有多个提供者，客户端需要从其中选择一个最合适的服务提供者并发起请求；服务选择是路由层的核心功能，为了更好的支持业务发展，也需要支持如下功能：</p><ul><li>服务负载均衡；</li><li>服务权重选择；</li><li>服务轮训选择；</li><li>服务灰度策略等；</li></ul><p>每个服务提供者都有一个唯一且确定的连接，路由层通过不同的策略来选择合适的连接，并发起请求：</p><p><img src="`+o+`" alt="img_3.png"></p><p>基于此，我们抽象一个 Router 接口，用于客户端发起请求时选择提供者连接：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Router</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConnectionWrapper</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionWrapper</span><span class="token punctuation">&gt;</span></span> connectionWrappers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ConnectionWrapper</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionWrapper</span><span class="token punctuation">&gt;</span></span> connectionWrappers<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以哈希路由为例，具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashRouter</span> <span class="token keyword">implements</span> <span class="token class-name">Router</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConnectionWrapper</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionWrapper</span><span class="token punctuation">&gt;</span></span> connectionWrappers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">select</span><span class="token punctuation">(</span>connectionWrappers<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConnectionWrapper</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionWrapper</span><span class="token punctuation">&gt;</span></span> connectionWrappers<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> hashCode <span class="token operator">=</span> serviceName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> hashCode <span class="token operator">%</span> connectionWrappers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> connectionWrappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然一个服务会存在多个提供者，但是只要提供的参数保持不变，哈希后选择的提供者也不会变。其它的路由实现就不赘述了。</p><h3 id="协议层" tabindex="-1"><a class="header-anchor" href="#协议层" aria-hidden="true">#</a> 协议层</h3><p>协议是RPC的灵魂，需要考虑如下因素：</p><ul><li>性能，协议传输效率，降低延迟；</li><li>兼容，协议版本升、降级，向前、后兼容；</li><li>存储，协议包尽可能小，提升带宽利用率；</li><li>可读，协议可读性好，方便调试、观测；</li></ul><p>良好的协议需要充分的调研和长时间的打磨，但我们显然没有这种条件，这里我们提出了一种名为 TinyProtocol 的简单协议：</p><p><img src="`+l+`" alt="img_4.png"></p><p>TinyProtocol 小巧可用，仅有5个字段，性能高：</p><ul><li>Magic：魔数，判断消息是否有效；</li><li>Version：协议版本；</li><li>Serialization：content 序列化方法；</li><li>Length：content 长度；</li><li>Content：请求内容；</li></ul><p>在Netty的加持下，协议编解码实现就非常简单了，首先是编码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TinyEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToByteEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TinyProtocol</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> channelHandlerContext<span class="token punctuation">,</span>
                          <span class="token class-name">TinyProtocol</span> tinyProtocol<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">.</span><span class="token function">getMagicNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">.</span><span class="token function">getSerialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编码部分十分简单，直接向ByteBuf中写入5个字段即可，性能十分可观；另外解码部分也十分简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TinyDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BASE_LENGTH</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// magicNumber + contentLength</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">BASE_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">short</span> magicNumber <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>magicNumber <span class="token operator">!=</span> <span class="token constant">MAGIC_NUMBER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            byteBuf<span class="token punctuation">.</span><span class="token function">resetReaderIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// magic number invalid, reset reader index</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">short</span> version <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// protocol version</span>
        <span class="token keyword">short</span> serialization <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// serialization type</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            byteBuf<span class="token punctuation">.</span><span class="token function">resetReaderIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// content length invalid, reset reader index</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TinyProtocol</span> tinyProtocol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TinyProtocol</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> serialization<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tinyProtocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于继承了 ByteToMessageDecoder，消息拆包、粘包已被默认处理。</p><h3 id="序列化层" tabindex="-1"><a class="header-anchor" href="#序列化层" aria-hidden="true">#</a> 序列化层</h3><p>序列化层核心功能是将业务数据序列化为二进制数据，然后交给网络层进行传输，在整个调研链路中，序列化十分频繁，是提升整体性能的一个关键点。</p><p>目前序列化成熟方案有很多，大致可分为两类：</p><ul><li>二进制协议，比如知名的 protobuf，thrift等；</li><li>文本协议，比如 json，xml 等；</li></ul><table><thead><tr><th style="text-align:center;">方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td style="text-align:center;">二进制协议</td><td>无冗余字段，传输高效，方便解析</td><td>观测性差，调试困难</td></tr><tr><td style="text-align:center;">文本协议</td><td>直观、描述性强，容易理解，便于调试</td><td>冗余数据较多，占用空间大</td></tr></tbody></table><p>tinyrpc 抽象了 Serializer 接口用于调用参数序列化抽象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通信时，按照 TinyProtocol 中的 serialization 字段来选择序列化框架，默认我们使用 json 序列化，框架选择 fastjson（实在是国内用的太普遍了）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonSerializer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONBytes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册层" tabindex="-1"><a class="header-anchor" href="#注册层" aria-hidden="true">#</a> 注册层</h3><p>服务消费者通过注册中心感知服务提供者的地址信息，从而发起RPC请求；如下：</p><p><img src="`+i+'" alt="img_5.png"></p><ul><li>服务提供者向注册中心注册服务；</li><li>服务消费者从注册中心订阅服务；</li><li>消费者拿到服务URL后，向提供者发起请求；</li><li>当注册数据发生变更时，向提供者、消费者发送变更通知；</li></ul><p>以Zookeeper为例，服务注册遵循目录规范，一个简单的服务注册结构图如下：</p><p><img src="'+u+'" alt="img_6.png"></p><p>服务提供者：向ZK注册（register）地址信息，启动RPC服务，等待请求； 服务消费者：向ZK订阅（subscribe）地址信息，发起RPC请求，等待响应；</p><p>考虑到服务提供者会发生下线、宕机、发布，因此注册的地址信息存在变更、失效等场景；因此消费者订阅后，需要通过其它手段来及时同步地址信息：</p><ol><li>重新订阅：RPC请求失败后，重新请求ZK获取地址信息；</li><li>ZK通知：订阅时，附带订阅地址信息变更通知（ZK通知只有一次，每次通知后需重新订阅通知）；</li><li>定时刷新：启动定时任务，固定时段去重新获取地址信息；</li></ol><h3 id="链路层" tabindex="-1"><a class="header-anchor" href="#链路层" aria-hidden="true">#</a> 链路层</h3><p>扩展性是一个RPC框架另一个重要的特性，RPC框架在设计时就应该考虑到将框架部分模块功能暴露出去；责任链模式非常适合帮助框架提高扩展性。</p><p><img src="'+k+`" alt="img_7.png"></p><p>代理层封装方法、参数后，将请求交给路由层之前必须经过整个链路层（责任链）后才能到达路由层，而在整个责任链路中，都支持插入用户自定义的中间件对请求处理，比如：</p><ul><li>打印RPC调用日志；</li><li>修改RPC调用参数；</li><li>等等；</li></ul><blockquote><p>链路层不仅仅可以在代理层、路由层之间，还可以在其它地方也引入责任链，这里就不赘述了。</p></blockquote><p>tinyrpc 支持客户端、服务端（未实现）双端过滤器责任链：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了过滤器后，打印调用日志就十分简单了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ClientFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;call {} {}&quot;</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getTargetServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getTargetMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容错层" tabindex="-1"><a class="header-anchor" href="#容错层" aria-hidden="true">#</a> 容错层</h3><p>容错层主要处理如下一些异常情况：</p><ul><li>网络层，RPC 请求时，网络通信失败处理；</li><li>路由层，获取提供者信息失败；</li><li>序列化层，数据序列化失败；</li><li>链路层，自定义业务处理失败；</li><li>服务过载保护机制，限流、降级、熔断；</li></ul><p>整个框架的每个模块都有调用错误、失败的可能，提升整个框架稳定性是容错层必须解决的问题。</p><p>提升容错，我们主要考虑下面两个核心思想：</p><ol><li>快速报错，将错误信息上升到业务逻辑；</li><li>延时重试，屏蔽底层通信、序列化可能带来的异常；</li><li>服务提供者新增限流、降级、熔断机制；</li></ol><p>以重试为例，如果服务提供者正在发布，或者突然宕机，那么客户端此时的请求很可能会失败，tinyrpc 需要 cover 这种情况， 因此会尝试不断重试，直到重试次数超过了阈值，才会将错误信息上报到调用方：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Retryer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> retryer<span class="token operator">=</span><span class="token class-name">RetryerBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retryIfResult</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retryIfRuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withWaitStrategy</span><span class="token punctuation">(</span><span class="token class-name">WaitStrategies</span><span class="token punctuation">.</span><span class="token function">fixedWait</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withStopStrategy</span><span class="token punctuation">(</span><span class="token class-name">StopStrategies</span><span class="token punctuation">.</span><span class="token function">stopAfterAttempt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token constant">SEND_QUEUE</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> result<span class="token operator">=</span><span class="token constant">RESP_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Invocation</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span><span class="token punctuation">)</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> retryer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryException</span><span class="token operator">|</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;JDKClientInvocationHandler.invoke error &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容错是一个系统稳定的根本，需要大量实践和打磨，也是工程师素养的重中之重。</p><h2 id="下一步计划" tabindex="-1"><a class="header-anchor" href="#下一步计划" aria-hidden="true">#</a> 下一步计划</h2><p>tinyrpc 是一个可用的RCP玩具，旨在学习和实践，距离生产可用还有很长的距离。</p><p>tinyrpc 可优化的 3 个方向：</p><ol><li>提升性能，优化序列化、代理、worker线程池（Netty处理器中不阻塞流程）、锁优化等；</li><li>新增SPI插件，提升扩展性；</li><li>新增注册、订阅事件、回调，提升业务开发效率；</li><li>接入spring，tinyrpc 实现后，我们可以通过接入spring来进一步拉低使用门槛，并融入spring的庞大生态；</li></ol><p>以SPI插件为例，我们可以参考 mysql-connector-driver 的实现，将驱动实现交给其它方；tinyrpc 也可以将序列化、路由负载均衡交给其它方，然后在框架启动时， 扫描 meta-info 目录获取实现类并加载应用即可。</p>`,83),v=[d];function m(b,g){return s(),a("div",null,v)}const f=n(r,[["render",m],["__file","rpc.html.vue"]]);export{f as default};
