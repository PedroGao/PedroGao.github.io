import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,a as s,b as n,e as t,f as p}from"./app-4852f70e.js";const i="/imgs/asm2asm.png",u={},r=p(`<h1 id="go-的两个黑魔法技巧" tabindex="-1"><a class="header-anchor" href="#go-的两个黑魔法技巧" aria-hidden="true">#</a> go 的两个黑魔法技巧</h1><p>最近，在写 Go 代码的时候，发现了其特别有意思的<strong>两个</strong>奇技淫巧，于是写下这篇<br> 文章和大家分享一下。</p><h2 id="魔法-1-调用-runtime-中的私有函数" tabindex="-1"><a class="header-anchor" href="#魔法-1-调用-runtime-中的私有函数" aria-hidden="true">#</a> 魔法 1：调用 runtime 中的私有函数</h2><p>按照 Go 的编译约定，代码包内以<strong>小写字母</strong>开头的函数、变量是私有的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> test

<span class="token comment">// 私有</span>
<span class="token keyword">func</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 公共</span>
<span class="token keyword">func</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>test</code> 包中 <code>abs</code> 函数只能在包内调用，而 <code>Abs</code> 函数却可以在其它包中<br> 导入后使用。</p><p>私有变量、方法的意义在于<strong>封装</strong>：控制内部数据、保证外部交互的一致性。</p><p>这样既能促进系统运行的可靠性，也能减少使用者的信息负载。</p><p>这样的规定对设计、封装良好的包是友好的，但并不是每个人都有这样的能力，另外<br> 对于一些特殊的函数，如：<code>runtime</code> 中的 <code>memmove</code> 函数，在有些场景下，确实是需要的。</p><p>因此 Go 在程序链接阶段给开发者打开了一扇窗，即可以通过 <code>go:linkname</code> 指令来<br> 链接包内的私有函数。</p><h3 id="memmove" tabindex="-1"><a class="header-anchor" href="#memmove" aria-hidden="true">#</a> memmove</h3>`,11),k={href:"https://github.com/golang/go/blob/1724077b789ad92972ab1ac03788389645306cbb/src/runtime/stubs.go#L111",target:"_blank",rel:"noopener noreferrer"},d=s("br",null,null,-1),v=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">memmove</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> n <span class="token builtin">uintptr</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>memmove 作为 runtime 中的私有函数，用于任意数据之间的内存拷贝，无视类型信息，直接操作<br> 内存，这样的操作在 Go 中虽然是不提倡的，但是用好了，却也是一把利刃。</p><p>新建一个 go 文件，如 runtime.go，并加上如下内容：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//go:noescape</span>
<span class="token comment">//go:linkname memmove runtime.memmove</span>
<span class="token comment">//goland:noinspection GoUnusedParameter</span>
<span class="token keyword">func</span> <span class="token function">memmove</span><span class="token punctuation">(</span>to unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> from unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> n <span class="token builtin">uintptr</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把视角放到 <code>go:linkname</code> 指令上，该指令接受两个参数：</p><ul><li>memmove：当前函数名称；</li><li>runtime.memmove：对应链接的函数的路径，报名+函数名。</li></ul><p>这样，编译器在做链接时就会将当前的 memmove 函数链接到 runtime 中的 memmove 函数， 我们就能使用该函数了。</p><p>在平常写代码的时候，我们经常性地需要拷贝字节切片、字符串之间的数据。比如将数据从切片 1<br> 拷贝到切片 2，使用 memmove 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// runtime.go</span>
<span class="token keyword">type</span> GoSlice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Ptr unsafe<span class="token punctuation">.</span>Pointer
    Len <span class="token builtin">int</span>
    Cap <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// runtime_test.go</span>
<span class="token keyword">func</span> <span class="token function">Test_memmove</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	src <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
	dest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>

	srcp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GoSlice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>
	destp <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GoSlice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token function">memmove</span><span class="token punctuation">(</span>destp<span class="token punctuation">.</span>Ptr<span class="token punctuation">,</span> srcp<span class="token punctuation">.</span>Ptr<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span>

	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字节切片([]byte)在内存中的形态如 <code>GoSlice</code> 结构体来所示，<code>Len</code>、<code>Cap</code> 分别表示切片长度、容量，字段 <code>Ptr</code> 指向真实的字节数据。</p><p>将两个切片的数据指针以及拷贝长度作为参数传入 memmove，数据就能从 src 拷贝到 dest。运行结果如下：</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>=== RUN   Test_memmove
# 拷贝之前
([]uint8) (len=6 cap=6) {
 00000000  01 02 03 04 05 06                                 |......|
}
([]uint8) (len=10 cap=10) {
 00000000  00 00 00 00 00 00 00 00  00 00                    |..........|
}
# 拷贝之后
([]uint8) (len=6 cap=6) {
 00000000  01 02 03 04 05 06                                 |......|
}
([]uint8) (len=10 cap=10) {
 00000000  01 02 03 04 05 06 00 00  00 00                    |..........|
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，对于切片之间的数据拷贝，标准库提供的 <code>copy</code> 函数要更加方便一些：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test_copy</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
src <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
dest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>

	<span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span>

	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样也能达到一样的效果，memmove 更加适合字符串(string)和数组切片之间的数据拷贝场景，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// runtime.go</span>
<span class="token keyword">type</span> GoString <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Ptr unsafe<span class="token punctuation">.</span>Pointer
    Len <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// runtime_test.go</span>
<span class="token keyword">func</span> <span class="token function">Test_memmove</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;pedro&quot;</span>
	<span class="token comment">// 注意：这里的len不能为0，否则数据没有分配，就无法复制</span>
	data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

	<span class="token function">memmove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>GoSlice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>GoString<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ptr<span class="token punctuation">,</span>
		unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，<code>GoString</code> 是字符串在内存中的表达形态，通过 memmove 函数就能快速的将字符数据从<br> 字符串拷贝到切片，反之亦然，运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 拷贝之前
(string) (len=5) &quot;pedro&quot;
([]uint8) (len=10 cap=10) {
 00000000  00 00 00 00 00 00 00 00  00 00                    |..........|
}
# 拷贝之后
(string) (len=5) &quot;pedro&quot;
([]uint8) (len=10 cap=10) {
 00000000  70 65 64 72 6f 00 00 00  00 00                    |pedro.....|
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="growslice" tabindex="-1"><a class="header-anchor" href="#growslice" aria-hidden="true">#</a> growslice</h3>`,19),m=s("code",null,"append",-1),b={href:"https://github.com/golang/go/blob/1724077b789ad92972ab1ac03788389645306cbb/src/runtime/slice.go#L166",target:"_blank",rel:"noopener noreferrer"},h=s("br",null,null,-1),g=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>growslice 函数接受 3 个参数：</p><ul><li>et：切片容器中的数据类型，如 int，<code>_type</code> 可以表示 Go 中的任意类型；</li><li>old：旧切片；</li><li>cap：扩容后的切片容量。</li></ul><p>扩容成功后，返回新的切片。</p><p>同样地，使用<code>go:linkname</code>来链接 runtime 中的 growslice 函数，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// runtime.go</span>
<span class="token keyword">type</span> GoType <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Size       <span class="token builtin">uintptr</span>
	PtrData    <span class="token builtin">uintptr</span>
	Hash       <span class="token builtin">uint32</span>
	Flags      <span class="token builtin">uint8</span>
	Align      <span class="token builtin">uint8</span>
	FieldAlign <span class="token builtin">uint8</span>
	KindFlags  <span class="token builtin">uint8</span>
	Traits     unsafe<span class="token punctuation">.</span>Pointer
	GCData     <span class="token operator">*</span><span class="token builtin">byte</span>
	Str        <span class="token builtin">int32</span>
	PtrToSelf  <span class="token builtin">int32</span>
<span class="token punctuation">}</span>

<span class="token comment">// GoEface 本质是 interface</span>
<span class="token keyword">type</span> GoEface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Type  <span class="token operator">*</span>GoType
	Value unsafe<span class="token punctuation">.</span>Pointer
<span class="token punctuation">}</span>

<span class="token comment">//go:linkname growslice runtime.growslice</span>
<span class="token comment">//goland:noinspection GoUnusedParameter</span>
<span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>GoType<span class="token punctuation">,</span> old GoSlice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> GoSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>growslice</code> 函数的第一个参数 <code>et</code> 实际是 Go 对所有类型的一个抽象数据结构——<code>GoType</code>。</p><p>这里引入了 Go 语言实现机制中的两个重要数据结构：</p><ul><li>GoEface：empty interface，即 interface{}，空接口；</li><li>GoType：Go 类型定义数据结构，可用于表示任意类型。</li></ul>`,9),f=s("br",null,null,-1),_={href:"https://zhuanlan.zhihu.com/p/427838620",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>这样，我们就能通过调用 <code>growslice</code> 函数来对切片进行手动扩容了，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// runtime.go</span>
<span class="token keyword">func</span> <span class="token function">UnpackType</span><span class="token punctuation">(</span>t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>GoType <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>GoType<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>GoEface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// runtime_test.go</span>
<span class="token keyword">func</span> <span class="token function">Test_growslice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	assert <span class="token operator">:=</span> assert<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

	<span class="token keyword">var</span> typeByte <span class="token operator">=</span> <span class="token function">UnpackType</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>typeByte<span class="token punctuation">)</span>

	dest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	ds <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>GoSlice<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">*</span>ds <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>typeByte<span class="token punctuation">,</span> <span class="token operator">*</span>ds<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

	assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>growslice</code> 的参数<code>et</code>类型在 runtime 中不可见，我们重新定义了 <code>GoType</code> 来表示，<br> 并且通过反射的机制来拿到字节切片中的 GoType，然后调用 growslice 完成扩容工作。</p><p>运行程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--- PASS: Test_growslice (0.00s)
PASS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),w=s("code",null,"100",-1),x=s("code",null,"112",-1),G=s("br",null,null,-1),q=s("code",null,"roundupsize",-1),T={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/",target:"_blank",rel:"noopener noreferrer"},S=p(`<h2 id="魔法-2-调用-c-汇编函数" tabindex="-1"><a class="header-anchor" href="#魔法-2-调用-c-汇编函数" aria-hidden="true">#</a> 魔法 2：调用 C/汇编函数</h2><p>下面，我们再来看 Go 的另外一个更加有趣的黑魔法。</p><h3 id="cgo" tabindex="-1"><a class="header-anchor" href="#cgo" aria-hidden="true">#</a> cgo</h3><p>通过 cgo，我们可以很方便地在 Go 中调用 C 代码，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">/*
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

static void* Sbrk(int size) {
	void *r = sbrk(size);
	if(r == (void *)-1){
  		return NULL;
 	}
	return r;
}
*/</span>
<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mem <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">Sbrk</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，会得到如下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0xba00000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cgo 是 Go 与 C 之间的桥梁，让 Go 可以享受 C 语言强大的系统编程能力，比如这里的 <code>sbrk</code> 会直接向<br> 进程申请一段内存，而这段内存是不受 Go GC 的影响的，因此我们必须手动地释放(free)掉它。</p><p>在一些特殊场景，比如全局缓存，为了避免数据被 GC 掉而导致缓存失效，那么可以尝试这样使用。</p><p>当然，这还不够 tricky，别忘了，C 语言是可以直接内联汇编的，同样地，我们也可以在 Go 中内联汇编<br> 试试，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">/*
#include &lt;stdio.h&gt;

static int Add(int i, int j)
{
  int res = 0;
  __asm__ (&quot;add %1, %2&quot;
    : &quot;=r&quot; (res)
    : &quot;r&quot; (i), &quot;0&quot; (j)
  );
  return res;
}
*/</span>
<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，可以得到如下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2040
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),P={href:"https://cloud.tencent.com/developer/article/1650525",target:"_blank",rel:"noopener noreferrer"},C={href:"https://chai2010.cn/advanced-go-programming-book/ch2-cgo/ch2-03-cgo-types.html",target:"_blank",rel:"noopener noreferrer"},D=p('<h3 id="汇编" tabindex="-1"><a class="header-anchor" href="#汇编" aria-hidden="true">#</a> 汇编</h3><h4 id="isspace" tabindex="-1"><a class="header-anchor" href="#isspace" aria-hidden="true">#</a> isspace</h4><p>那么有没有一种方式可以回避掉 cgo 的缺点，答案自然是可以的。</p><p>这个方式其实很容易想到：不使用 cgo，而是使用 plan9，也就是 Go 支持的汇编语言。</p><p>当然我们不是直接去写汇编，而是将 C 编译成汇编，然后再转化成 plan9 与 .go 代码一起编译。</p><p>编译的过程如下图所示：</p><p><img src="'+i+`" alt="asm2asm"></p><p>而且 C 本身就是汇编的高级抽象，作为目前最强劲性能的存在，这种方式不仅回避了 cgo 的性能问题，<br> 反而将程序性能提高了。过程如下：</p><p>首先，我们定义一个简单的 C 语言函数 <code>isspace</code>(判断字符为空)：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// ./inner/op.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">OP_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OP_H</span></span>

<span class="token keyword">char</span> <span class="token function">isspace</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ./inner/op.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;op.h&quot;</span></span>

<span class="token keyword">char</span> <span class="token function">isspace</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">|</span> ch <span class="token operator">==</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用 <code>clang</code> 将其编译为汇编(注意：是 clang)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ clang -mno-red-zone -fno-asynchronous-unwind-tables -fno-builtin -fno-exceptions <span class="token punctuation">\\</span>
-fno-rtti -fno-stack-protector <span class="token parameter variable">-nostdlib</span> <span class="token parameter variable">-O3</span> <span class="token parameter variable">-msse4</span> <span class="token parameter variable">-mavx</span> -mno-avx2 <span class="token parameter variable">-DUSE_AVX</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">-DUSE_AVX2</span><span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-S</span> ./inner/*.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成功后，会在 inner 文件夹下生成一个 <code>op.s</code> 汇编文件，大致如下：</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 11, 0
	.globl	_isspace                        ## -- Begin function isspace
	.p2align	4, 0x90
_isspace:                               ## @isspace
## %bb.0:
	pushq	%rbp
	movq	%rsp, %rbp
	movb	$1, %al
	cmpb	$13, %dil
	je	LBB0_3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>clang 默认生成的汇编是 AT&amp;T 格式的，这种汇编 Go 是无法编译的(gccgo 除外)，因此这里有一步转换工作。</p>`,15),A=s("br",null,null,-1),B={href:"https://github.com/chenzhuoyu/asm2asm",target:"_blank",rel:"noopener noreferrer"},R=p(`<p>将 <code>asm2asm</code> clone 到本地，然后运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/chenzhuoyu/asm2asm
$ ./tools/asm2asm.py ./op.s ./inner/op.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后，会报错。原因在于，Go 对于 plan9 汇编文件需要一个对应的 .go 声明文件来对应。</p><p>我们在 <code>./inner/op.h</code> 文件中定义了 <code>isspace</code> 函数，因此需要新建一个同名的 op.go 文件来声明这个函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//go:nosplit</span>
<span class="token comment">//go:noescape</span>
<span class="token comment">//goland:noinspection GoUnusedParameter</span>
<span class="token keyword">func</span> <span class="token function">__isspace</span><span class="token punctuation">(</span>ch <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">byte</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次运行 asm2asm 工具来生成汇编：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ./tools/asm2asm.py ./op.s ./inner/op.s

$ tree .

.
|__ inner
|   |__  op.c
|   |__ op.h
|   |__ op.s
|__ op.go
|__ op.s
|__ op_subr.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>asm2asm 会生成两个文件：<code>op.s</code> 和 <code>op_subr.go</code>：</p><ul><li>op.s：翻译而来的 plan9 汇编文件；</li><li>op_subr.go：函数调用辅助文件。</li></ul><p>生成后，op.go 中的 <code>__isspace</code> 函数就能顺利的链接上对应的汇编代码，并运行，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test___isspace</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		ch <span class="token builtin">byte</span>
	<span class="token punctuation">}</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name    <span class="token builtin">string</span>
		args    args
		wantRet <span class="token builtin">byte</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>
			name<span class="token punctuation">:</span>    <span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span>
			args<span class="token punctuation">:</span>    args<span class="token punctuation">{</span>ch<span class="token punctuation">:</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			wantRet<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			name<span class="token punctuation">:</span>    <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
			args<span class="token punctuation">:</span>    args<span class="token punctuation">{</span>ch<span class="token punctuation">:</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			wantRet<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> gotRet <span class="token operator">:=</span> <span class="token function">__isspace</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> gotRet <span class="token operator">!=</span> tt<span class="token punctuation">.</span>wantRet <span class="token punctuation">{</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;__isspace() = %v, want %v&quot;</span><span class="token punctuation">,</span> gotRet<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>wantRet<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// output</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   Test___isspace
<span class="token operator">==</span><span class="token operator">=</span> RUN   Test___isspace<span class="token operator">/</span><span class="token boolean">false</span>
<span class="token operator">==</span><span class="token operator">=</span> RUN   Test___isspace<span class="token operator">/</span><span class="token boolean">true</span>
<span class="token operator">--</span><span class="token operator">-</span> PASS<span class="token punctuation">:</span> Test___isspace <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00s<span class="token punctuation">)</span>
    <span class="token operator">--</span><span class="token operator">-</span> PASS<span class="token punctuation">:</span> Test___isspace<span class="token operator">/</span><span class="token boolean">false</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00s<span class="token punctuation">)</span>
    <span class="token operator">--</span><span class="token operator">-</span> PASS<span class="token punctuation">:</span> Test___isspace<span class="token operator">/</span><span class="token boolean">true</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00s<span class="token punctuation">)</span>
PASS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__isspace 顺利运行，并通过了单测。</p><h4 id="u32toa-small" tabindex="-1"><a class="header-anchor" href="#u32toa-small" aria-hidden="true">#</a> u32toa_small</h4><p>一个 isspace 函数有些简单，无法完全发挥出汇编的能力，下面我们来看一个稍微复杂一点的例子：将整数转化为字符串。</p><p>在 Go 中，整数转化为字符串的方式有多种，比如说：<code>strconv.Itoa</code> 函数。</p><p>这里，我选择用 C 来写一个简单的整数转字符串的函数：<code>u32toa_small</code>，然后将其编译为汇编代码供 Go 调用，并看看二者之间的性能差异。</p><p>u32toa_small 的实现也比较简单，使用查表法(strconv.Itoa 使用的也是这种方法)，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;op.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> Digits<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
    <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// &lt; 10000</span>
<span class="token keyword">int</span> <span class="token function">u32toa_small</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span>      n  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> d1 <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">/* 1000-th digit */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Digits<span class="token punctuation">[</span>d1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 100-th digit */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Digits<span class="token punctuation">[</span>d1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 10-th digit */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Digits<span class="token punctuation">[</span>d2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* last digit */</span>
    out<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Digits<span class="token punctuation">[</span>d2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 op.go 中加入对应的 <code>__u32toa_small</code> 函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// &lt; 10000</span>
<span class="token comment">//go:nosplit</span>
<span class="token comment">//go:noescape</span>
<span class="token comment">//goland:noinspection GoUnusedParameter</span>
<span class="token keyword">func</span> <span class="token function">__u32toa_small</span><span class="token punctuation">(</span>out <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> val <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 clang 重新编译 op.c 文件，并用 asm2asm 工具来生成对应的汇编代码(节选部分)：</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>_u32toa_small:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	MOVL SI, AX
	IMUL3Q $1374389535, AX, AX
	SHRQ $37, AX
	LEAQ 0(AX)(AX*1), DX
	WORD $0xc06b; BYTE $0x64  // imull        $100, %eax, %eax
	MOVL SI, CX
	SUBL AX, CX
	ADDQ CX, CX
	CMPL SI, $1000
	JB LBB1_2
	LONG $0x60058d48; WORD $0x0000; BYTE $0x00  // leaq         $96(%rip), %rax  /* _Digits(%rip) */
	MOVB 0(DX)(AX*1), AX
	MOVB AX, 0(DI)
	MOVL $1, AX
	JMP LBB1_3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Go 中调用该函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test___u32toa_small</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> buf <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	<span class="token keyword">type</span> args <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		out <span class="token operator">*</span><span class="token builtin">byte</span>
		val <span class="token builtin">uint32</span>
	<span class="token punctuation">}</span>
	tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name    <span class="token builtin">string</span>
		args    args
		wantRet <span class="token builtin">int</span>
	<span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token punctuation">{</span>
			name<span class="token punctuation">:</span> <span class="token string">&quot;9999&quot;</span><span class="token punctuation">,</span>
			args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>
				out<span class="token punctuation">:</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				val<span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			wantRet<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			name<span class="token punctuation">:</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">,</span>
			args<span class="token punctuation">:</span> args<span class="token punctuation">{</span>
				out<span class="token punctuation">:</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				val<span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			wantRet<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			got <span class="token operator">:=</span> <span class="token function">__u32toa_small</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>out<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
			assert<span class="token punctuation">.</span><span class="token function">Equalf</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>wantRet<span class="token punctuation">,</span> got<span class="token punctuation">,</span> <span class="token string">&quot;__u32toa_small(%v, %v)&quot;</span><span class="token punctuation">,</span> tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>out<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>args<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
			assert<span class="token punctuation">.</span><span class="token function">Equalf</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>tt<span class="token punctuation">.</span>wantRet<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ret string must equal name&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试成功，__u32toa_small 函数不仅成功运行，而且通过了测试。</p><p>最后，我们来做一个性能跑分看看 __u32toa_small 和 strconv.Itoa 之间的性能差异：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BenchmarkGoConv</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	val <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Int31</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFastConv</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> buf <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	val <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Int31</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">__u32toa_small</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>go test -bench</code> 运行这两个性能测试函数，结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BenchmarkGoConv
BenchmarkGoConv-12    	60740782	        19.52 ns/op

BenchmarkFastConv
BenchmarkFastConv-12    122945924	         9.455 ns/op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果中，可以明显看出 __u32toa_small 优于 Itoa，大概有一倍的提升。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>至此，Go 的两个黑魔法技巧已经介绍完毕了，感兴趣的同学可以自己实践看看。</p><p>Go 的黑魔法一定程度上都使用了 unsafe 的能力，这也是 Go 不提倡的，当然使用 unsafe 其实就和普通的 C 代码编写一样，因此也无需有太强的心理负担。</p>`,33),E={href:"https://github.com/bytedance/sonic",target:"_blank",rel:"noopener noreferrer"},$=p('<p>因此，当 Go 现有的标准库无法满足你的需求时，不要受到语言本身的限制，而是用虽然少见但有效的方式去解决<br> 它。</p><p>希望上面的两个黑魔法能带你对 Go 不一样的认识。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>https://github.com/bytedance/sonic</li><li>https://juejin.cn/post/6974581261192921095</li><li>https://www.keil.com/support/man/docs/armclang_intro/armclang_intro_ddx1471430827125.htm</li><li>https://karthikkaranth.me/blog/calling-c-code-from-go/</li><li>https://chai2010.cn/advanced-go-programming-book/ch2-cgo/ch2-03-cgo-types.html</li><li>https://blog.csdn.net/lastsweetop/article/details/78830772</li></ul>',4);function L(X,I){const a=c("ExternalLinkIcon");return o(),l("div",null,[r,s("p",null,[n("以 "),s("a",k,[n("memmove"),t(a)]),n(" 为例，"),d,n(" 如下：")]),v,s("p",null,[n("切片是 Go 中最常用的数据结构之一，对于切片扩容，Go 只提供了 "),m,n(" 函数来隐式的扩容，但内部是通过调用 runtime 中的 "),s("a",b,[n("growslice"),t(a)]),h,n(" 函数来实现的：")]),g,s("p",null,[n("关于 GoEface、GoIface、GoType、GoItab 都是 Go 语言实现的核心数据结构，这里的内容很多，"),f,n(" 感兴趣的可以参考"),s("a",_,[n("这里"),t(a)]),n(" 。")]),y,s("p",null,[n("注意一个点，growslice 传入的 cap 参数是 "),w,n("，但是最后的扩容结果却是 "),x,n("，"),G,n(" 这个是因为 growslice 会做一个 "),q,n(" 处理，感兴趣的同学可以参考"),s("a",T,[n("这里"),t(a)]),n(" 。")]),S,s("p",null,[n("cgo 虽然给了我们一座桥梁，但付出的代价也不小，具体的缺点可以参考"),s("a",P,[n("这里"),t(a)]),n("。")]),s("blockquote",null,[s("p",null,[n("对 cgo 感兴趣的同学可以参考"),s("a",C,[n("这里"),t(a)]),n(" 。")])]),D,s("p",null,[n("负责将 AT&T 汇编转化成 plan9 汇编，而二者之间的语法差异其实是比较大的，因此这里借助一个转换"),A,s("a",B,[n("asm2asm 工具"),t(a)]),n(" 来完成。")]),R,s("p",null,[n("实际上，上述的两种方法都被 "),s("a",E,[n("sonic"),t(a)]),n(" 用在了生产环境上，而且带来的很大的性能提升，节约大量资源。")]),$])}const O=e(u,[["render",L],["__file","magic.html.vue"]]);export{O as default};
