const t=JSON.parse('{"key":"v-0f1b156a","path":"/posts/go/pool.html","title":"go pool 池化学习、实践总结","lang":"zh-CN","frontmatter":{"icon":"edit","title":"go pool 池化学习、实践总结","date":"2022-02-28T00:00:00.000Z","tag":["go","pool"],"category":["go"],"description":"go pool 池化学习、实践总结 概述 最近在业务性能优化过程中，大量使用到了 pool 池化、缓存等技术。在用 pool 的时候一知半解 地怼了上去，待上线过后就得抽时间系统学习、总结一下，于是就有了这篇文章。 首先，我们从一个场景出发，在一个简单的 http 接口服务中，如下： func handleV1(writer http.ResponseWriter, req *http.Request) { \\tvar ( \\t\\terr error \\t\\tdata []byte \\t) // .... \\tdata, err = ioutil.ReadAll(req.Body) \\tif err != nil { \\t\\treturn \\t} \\t// ...... json.Unmarshal 之类的 }","head":[["meta",{"property":"og:url","content":"https://pedrogao.github.io/posts/go/pool.html"}],["meta",{"property":"og:site_name","content":"廊中别苑"}],["meta",{"property":"og:title","content":"go pool 池化学习、实践总结"}],["meta",{"property":"og:description","content":"go pool 池化学习、实践总结 概述 最近在业务性能优化过程中，大量使用到了 pool 池化、缓存等技术。在用 pool 的时候一知半解 地怼了上去，待上线过后就得抽时间系统学习、总结一下，于是就有了这篇文章。 首先，我们从一个场景出发，在一个简单的 http 接口服务中，如下： func handleV1(writer http.ResponseWriter, req *http.Request) { \\tvar ( \\t\\terr error \\t\\tdata []byte \\t) // .... \\tdata, err = ioutil.ReadAll(req.Body) \\tif err != nil { \\t\\treturn \\t} \\t// ...... json.Unmarshal 之类的 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-29T07:49:07.000Z"}],["meta",{"property":"article:author","content":"pedrogao"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"pool"}],["meta",{"property":"article:published_time","content":"2022-02-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-29T07:49:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go pool 池化学习、实践总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-05-29T07:49:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pedrogao\\",\\"url\\":\\"https://github.com/pedrogao/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Go pool","slug":"go-pool","link":"#go-pool","children":[]},{"level":2,"title":"缓存池 bufferPool","slug":"缓存池-bufferpool","link":"#缓存池-bufferpool","children":[]},{"level":2,"title":"连接池 connPool","slug":"连接池-connpool","link":"#连接池-connpool","children":[]},{"level":2,"title":"协程池 goroutinePool","slug":"协程池-goroutinepool","link":"#协程池-goroutinepool","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[{"level":3,"title":"Pool 内存泄漏样例","slug":"pool-内存泄漏样例","link":"#pool-内存泄漏样例","children":[]}]}],"git":{"createdTime":1653810547000,"updatedTime":1653810547000,"contributors":[{"name":"pedrogao","email":"1312342604@qq.com","commits":1}]},"readingTime":{"minutes":9.54,"words":2863},"filePathRelative":"posts/go/pool.md","localizedDate":"2022年2月28日","excerpt":"<h1> go pool 池化学习、实践总结</h1>\\n<h2> 概述</h2>\\n<p>最近在业务性能优化过程中，大量使用到了 pool 池化、缓存等技术。在用 pool 的时候一知半解<br>\\n地怼了上去，待上线过后就得抽时间系统学习、总结一下，于是就有了这篇文章。</p>\\n<p>首先，我们从一个场景出发，在一个简单的 http 接口服务中，如下：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">handleV1</span><span class=\\"token punctuation\\">(</span>writer http<span class=\\"token punctuation\\">.</span>ResponseWriter<span class=\\"token punctuation\\">,</span> req <span class=\\"token operator\\">*</span>http<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">var</span> <span class=\\"token punctuation\\">(</span>\\n\\t\\terr  <span class=\\"token builtin\\">error</span>\\n\\t\\tdata <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span>\\n\\t<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// ....</span>\\n\\tdata<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">=</span> ioutil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadAll</span><span class=\\"token punctuation\\">(</span>req<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">// ...... json.Unmarshal 之类的</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
