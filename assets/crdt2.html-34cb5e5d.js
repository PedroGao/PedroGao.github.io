import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,a as n,e as a,w as r,b as s,f as e}from"./app-00bf9ad3.js";const d="/assets/RGA-local-operations-c30e2715.png",k="/assets/rga1-0eb7cccf.png",v="/assets/rga2-341ad91b.png",m="/assets/rga3-b5a4d6b4.png",b="/assets/rga4-7c7123bc.png",h="/assets/rga5-e666d39b.png",g="/assets/rga6-3b329293.png",y="/assets/rga7-d18727ad.png",f="/assets/rga8-9d478908.png",w="/assets/rga9-fcd67e9b.png",_="/assets/rga11-55d78f48.png",x={},I=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),O={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"这两种算法分别是知名 CRDT 库 Automerge 和 Yjs 所采用的算法，被广泛应用于生产环境，是深入 CRDT 应用的基础。",-1),A=n("p",null,"本篇文章我们将介绍 RGA 算法，下一篇文章我们将介绍 YATA 算法。",-1),R=n("h2",{id:"rga",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rga","aria-hidden":"true"},"#"),s(" RGA")],-1),G={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"},D=e('<blockquote><p>千万别被名字吓到了，其实 RGA 就是列表的 CRDT 实现。论文原话是：<br> growable array is the Vector class of JAVA or STL.</p></blockquote><p>论文中提到 RGA 在有序复制集合上拥有良好的插入、删除性能，优于已有的 OT 算法，适合用于协同文本编辑场景。</p><p>当然 RGA 不仅适用于有序文本，同时也能推广到有序列表，哈希表等场景，因此 RGA 也是 Automerge 库的基础。</p><p>论文中，给出了 RGA 基于双向链表实现的部分伪代码，如下：</p><p><img src="'+d+'" alt="RGA-local-operations"></p><p>伪代码实现十分简单，无论是插入还是删除，都是在链表中排除已删除项，找到<code>i</code>对应的位置，然后插入或删除即可。</p><p>不过，双向链表显然无法满足大文本编辑、查找等场景的性能要求，因此有不少优化版的 RGA 实现，比如：</p>',7),j={href:"https://automerge.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://nomad.foo/blog/cola",target:"_blank",rel:"noopener noreferrer"},S={href:"https://pages.lip6.fr/Marc.Shapiro/papers/rgasplit-group2016-11.pdf",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例","aria-hidden":"true"},"#"),s(" 案例")],-1),L={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/views/RGADemo.vue",target:"_blank",rel:"noopener noreferrer"},M=n("hr",null,null,-1),P=e('<hr><blockquote><p>只支持简单的英文、数字文本增、删，不支持中文、复制粘贴等操作。<br> 没办法，input 中文事件笔者不会啊。</p></blockquote><p>在左侧输入框中编辑文本内容，都会同步到对方，最终保证两个输入框的内容一致。</p><h2 id="推演" tabindex="-1"><a class="header-anchor" href="#推演" aria-hidden="true">#</a> 推演</h2><p>文本内容本质上是<strong>插入操作的集合</strong>，因此我们可以通过插入操作来推演 RGA 的工作原理。</p><p>下面，以<strong>纯文本</strong>协同编辑为例，看看 RGA 是保证多方编辑内容最终一致的。</p><p>首先，我们看一个最简单的例子：<strong>有且只有一个客户端进行编辑</strong></p><p><img src="'+k+'" alt="rga1"></p><p>客户端 1 在位置<code>0</code>插入字符<code>1</code>，并将插入操作(op)同步到客户端 2，客户端 2 收到 op 并应用后，将<code>1</code>插入到位置<code>0</code>，此时客户端 1 和客户端 2 的文本内容是一致的。</p><p>因为只有客户端 1 有编辑操作，其它客户端处于只读状态，那么就不能产生<strong>编辑冲突</strong>，因此最后的文本内容肯定是一致的。</p><p>可一旦有多个客户端同时进行编辑，就会产生<strong>编辑冲突</strong>，导致最终文本内容不一致，比如：</p><p><img src="'+v+`" alt="rga2"></p><p>客户端 1、2 分别在位置<code>1</code>插入字符<code>2</code>、<code>3</code>，并将插入操作(op)同步到对方应用后，此时客户端 1 和客户端 2 的文本内容不一致。</p><p>而产生不一致的原因是，操作同步的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然携带了插入位置<code>1</code>和插入数据<code>2</code>，但没有其它约束条件，导致最终文本内容不一致。</p><p>我们可以通过<strong>插入意图</strong>来解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">client1</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">client2</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>&quot;1&quot;</code>就是插入意图，表示在<code>1</code>之后插入<code>2</code>，<code>3</code>，但这样就能保证最终文本内容一致吗？</p><p>显然是不能的，因为<code>1</code>虽然是插入意图，但是文本中可能存在多个<code>1</code>，比如：</p><p><img src="`+m+`" alt="rga3"></p><p>我们为每个插入字符都添加一个唯一的标识符 Id，比如字符<code>1</code>的 Id：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// [siteId, counter]</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Id</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Id</code> 包括两部分，第一部分是客户端的唯一标识符，第二部分是客户端操作的序号，这样就能保证每个字符都有唯一的 Id。</p><p>有了 Id 后，操作同步数据就变成了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// params:</span>
<span class="token comment">// 1. 插入位置</span>
<span class="token comment">// 2. 插入数据</span>
<span class="token comment">// 3. 插入意图，即当前插入位置字符的 Id</span>
<span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样能够保证最终文本内容一致了吗？如下：</p><p><img src="`+b+`" alt="rga4"></p><p>客户端 1、2 分别在位置<code>1</code>插入字符<code>2</code>、<code>3</code>，因为两个插入操作的意图是一致的，都插入在字符<code>1</code>右侧，但字符<code>2</code>，<code>3</code>之间位置暂时不知如何排列，从而导致最终文本内容不一致。</p><p>我们可以通过字符<code>2</code>，<code>3</code>的 Id 来解决二者之间的插入排序问题，即：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">client1</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">client2</span><span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;site2&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;site1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约定</strong>，如果插入意图一致，那么就按照字符 Id 来排序：</p><ul><li>如果<code>counter</code>不同，那么按照<code>counter</code>排序，大者在右边；</li><li>如果<code>counter</code>相同，那么按照<code>siteId</code>排序，大者在右边；</li></ul><p>有了排序后，最终文本内容就一致了：</p><p><img src="`+h+`" alt="rga5"></p><p>最后，来看看删除操作，我们将<strong>一次插入</strong>抽象为一个<code>Item</code>，即：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入内容</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span> <span class="token comment">// Id</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入意图</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于删除，最容易想到的是将<code>Item</code>直接删除掉，但这显然不行，因此不同客户端可能在同一个插入意图上工作，如果将字符删除掉了，那么意图也就丢失了，文本最终内容也就不一致了。</p><p>因此，我们不能直接删除<code>Item</code>，而是引入<strong>墓碑机制</strong>，即：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入内容</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span> <span class="token comment">// Id</span>
  isDeleted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 插入意图</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除<code>Item</code>时，将<code>isDeleted</code>设置为 true，这样就能保留插入意图，从而保证最终文本内容一致。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2>`,42),B={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/lib/crdt/rga.ts",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>首先是数据建模，每个插入字符操作被抽象为一个<code>Item</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// root item has no content</span>
  id<span class="token operator">:</span> Id<span class="token punctuation">;</span>
  isDeleted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  children<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// children of this item</span>
  parent<span class="token operator">:</span> Id <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// parent of this item</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parent</code>：插入意图；</li><li><code>children</code>：子节点，每个字符都可能成为多个字符的意图，因此子节点可能有多个；</li></ul><p>很明显，这样的数据结构导致文本内容是一个树：</p><p><img src="`+g+`" alt="rga6"></p><blockquote><p>ROOT 节点是虚拟节点，标识文档的开始，没有实际意义。</p></blockquote><p>因此我们可以使用<code>Map</code>来存储<code>Item</code>，其中<code>key</code>是<code>Item.id</code>，<code>value</code>是<code>Item</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Doc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  root<span class="token operator">:</span> Id<span class="token punctuation">;</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  vector<span class="token operator">:</span> Vector<span class="token punctuation">;</span>
  clientId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  store<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>clientId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cid <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>
      content<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      id<span class="token operator">:</span> <span class="token punctuation">[</span>cid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      isDeleted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      parent<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token comment">// Root item should insert at the beginning, and could not be deleted or updated</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Exclude root item</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> cid<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>root</code>：文档的根节点，虚拟节点；</li><li><code>length</code>：文档长度，不包括根节点；</li><li><code>vector</code>：客户端向量；</li><li><code>clientId</code>：客户端唯一标识符；</li><li><code>store</code>：存储<code>Item</code>的<code>Map</code>；</li></ul><p>新建<code>Doc</code>时，向<code>store</code>中插入根节点，同时设置<code>length</code>、<code>vector</code>。</p><p>由于整个文档是一颗树，每个字符是其中一个节点，获取文档内容时，我们需要遍历整个树，将所有字符拼接起来：</p><p><img src="`+y+`" alt="rga7"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> doc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> queue<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> doc<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>content <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> content<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于字符<code>3</code>被软删除掉了，因此最终文本内容是<code>[1, 2, 4]</code>。</p><p>接下来是插入操作，插入操作的核心是生成<code>Item</code>，然后将集成(intergrate，下文再详谈)到文档树中。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Item not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">{</span>
      content<span class="token punctuation">,</span>
      id<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      isDeleted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      parent<span class="token operator">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">integrate</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>insert</code>将字符插入到<code>pos</code>位置，因此需要找到<code>pos-1</code>位置的<code>Item</code>作为其插入意图 parent，然后生成新的<code>Item</code>，最后将其集成到文档树中。</p><p><code>findItemByIndex</code>使用 DFS 遍历文档树，排除掉删除字符，找到<code>pos</code>位置的<code>Item</code>：</p><p><img src="`+f+`" alt="rga8"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">private</span> <span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> queue<span class="token operator">:</span> Id<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token comment">// DFS</span>
    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了<code>findItemByIndex</code>有，删除就十分简单了：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">public</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findItemByIndex</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Item not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    item<span class="token punctuation">.</span>isDeleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，解释一下最复杂的<code>integrate</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">integrate</span><span class="token punctuation">(</span>item<span class="token operator">:</span> Item<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> lastClock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> clock <span class="token operator">=</span> item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastClock <span class="token operator">&gt;=</span> clock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This item has been integrated</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastClock <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!==</span> clock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Clock not match&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> clock<span class="token punctuation">;</span>
    <span class="token comment">// 1. Find the parent item</span>
    <span class="token comment">// 2. Insert the new item to parent.children, compare the id of new item and the next item</span>
    <span class="token comment">// 3. Update the version and length of doc</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span>
      item<span class="token punctuation">.</span>parent<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span>
        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span>
        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Root item can not integrate</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Parent not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> destIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> destIndex <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> destIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> child <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span>destIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// Smaller id should at left</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>destIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Id<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isDeleted <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>content <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>integrate</code> 有三个核心步骤：</p><ol><li><code>clock</code>去重逻辑，如果<code>item</code>已经被集成到文档树中，那么就不需要再次集成了；</li><li>找到<code>item</code>的<code>parent</code>，然后将<code>item</code>插入到<code>parent.children</code>中，这里需要注意的是，<code>item</code>的<code>id</code>需要和<code>parent.children</code>中的<code>id</code>进行比较，保证<code>id</code>小的在左边，大的在右边；</li><li>更新<code>doc</code>的<code>length</code>和<code>vector</code>；</li></ol><h2 id="tinyautomerge" tabindex="-1"><a class="header-anchor" href="#tinyautomerge" aria-hidden="true">#</a> TinyAutomerge</h2><p>Automerge 是为数不多将 RGA 用在生产环境上的 CRDT 库，RGA 是 Automerge 中的核心算法部分，设计方式和实现思路都很有借鉴性。</p>`,28),V={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/lib/crdt/automerge.ts",target:"_blank",rel:"noopener noreferrer"},U={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},z={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>TinyAutomerge 支持两种 CRDT 数据类型以及其基本操作：</p><ul><li>List(Text): <ul><li><code>insert(pos, content)</code></li><li><code>delete(pos)</code></li><li><code>put(pos, content)</code></li><li><code>get(pos)</code></li><li><code>range(start, end)</code></li></ul></li><li>Map: <ul><li><code>put(key, value)</code></li><li><code>get(key)</code></li><li><code>delete(key)</code></li><li><code>range(start, end)</code></li></ul></li></ul><blockquote><p>Text 纯文本本质上和 List 是一样的，因此这里没有额外实现。</p></blockquote><p>下面就 Automerge 核心数据结构建模以及基本操作伪代码做一个简单的介绍。</p><h3 id="数据结构建模" tabindex="-1"><a class="header-anchor" href="#数据结构建模" aria-hidden="true">#</a> 数据结构建模</h3><p><code>TinyAutomerge</code>仍然以<code>Operation(操作)</code>作为核心建模方式，任何一个基本操作，包括<code>insert</code>、<code>delete</code>、<code>put</code>、<code>get</code>都可以被抽象为一个<code>Operation</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Operation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> OpId<span class="token punctuation">;</span>
  prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// map property name or array insert|update origin intention</span>
  insert<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token string">&quot;make(map)&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;make(list)&quot;</span><span class="token punctuation">;</span> <span class="token comment">// null means delete</span>
  pred<span class="token operator">:</span> OpId<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  succ<span class="token operator">:</span> OpId<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>OpId</code>其实也是 Lamport 时钟，也即是<code>[actorId, clock]</code>，<code>actorId</code>是一个字符串，<code>clock</code>是一个数字。</p><p>在<code>Automerge</code>中 actorId 其实就是<code>siteId</code>。</p><p>每个<code>Operation</code>都有唯一的<code>id</code>，<code>insert</code>字段表示是否为插入操作；</p><p><code>prop</code>字段略微有点特殊，对于<code>Map</code>来说，<code>prop</code>就是<code>map</code>中的某个<code>key</code>，对于<code>List</code>来说，<code>prop</code> 操作意图，即插入位置前一项。</p><p>另外 <code>pred</code> 和 <code>succ</code> 字段分别标识操作的前驱、后继操作，以<code>Map</code>为例，如果多个<code>put</code>操作的<code>key</code>相同，那么这些<code>put</code>操作的<code>pred</code>和<code>succ</code>就会形成一个双链表，最后的操作在链表最后端。</p><p>如果<code>Operation</code>的 succ 不为空，证明这个<code>Operation</code>已经<code>过期</code>了，因为有新的<code>Operation</code>插入到了这个<code>Operation</code>之后。</p><p>而<code>delete</code>略有不同，因为 delete 没有实际的删除数据，只是将上一个<code>Operation</code>的<code>succ</code>指向自己，这样就可以将<code>Operation</code>从链表中软移除了。</p><p>同样地，文档是操作的集合：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OpTree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  parent<span class="token operator">:</span> ObjId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// null means root</span>
  objType<span class="token operator">:</span> ObjType<span class="token punctuation">;</span> <span class="token comment">// map or list</span>
  store<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Operation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// sorted by OpId or Prop</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">OpSet<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Op trees</span>
  trees<span class="token operator">:</span> Map<span class="token operator">&lt;</span>ObjId<span class="token punctuation">,</span> OpTree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// The length of op array</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Doc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  ops<span class="token operator">:</span> OpSet<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// The current actor.</span>
  id<span class="token operator">:</span> Actor<span class="token punctuation">;</span>
  <span class="token comment">// The maximum operation counter this document has seen.</span>
  maxOpCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Doc</code>核心数据实际就是<code>op</code>的集合，即<code>OpSet</code>。OpSet 下可以有多个 OpTree，每个 <code>OpTree</code> 对应一个<code>Map</code>或者<code>List</code>，<code>OpTree</code> 中的<code>store</code>是一个操作有序数组，<code>parent</code>指向父节点，<code>objType</code>标识是<code>Map</code>还是<code>List</code>。</p><p>从这里就可以得出，对于<code>Map</code>和<code>List</code>的操作一般需要两步：</p><ol><li>在<code>OpSet</code>中找到对应的<code>OpTree</code>，如果没有就创建一个；</li><li>在<code>OpTree</code>中查找、变更、对应的<code>Operation</code>；</li></ol><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p>了解了基本数据结构后，我们就可以来看看<code>Map</code>的基本操作实现了。</p><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> <span class="token keyword">_</span> <span class="token operator">:=</span> search<span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    last <span class="token operator">:=</span> operations<span class="token punctuation">[</span>opertaions<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> last<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    start_idx <span class="token operator">:=</span> index of the first row that matches prop
    end_idx <span class="token operator">:=</span> store<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_idx<span class="token punctuation">,</span> end_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prop <span class="token operator">!=</span> prop<span class="token punctuation">:</span>
            <span class="token keyword">return</span> result<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">,</span> end_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get(prop)</code>：</p><ol><li>查找<code>store</code>，找到与<code>prop</code>相关的所有<code>Operation</code>；</li><li>返回最后一个<code>Operation</code>的<code>value</code>；</li></ol><h4 id="put" tabindex="-1"><a class="header-anchor" href="#put" aria-hidden="true">#</a> put</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> last_idx <span class="token operator">:=</span> search<span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
    last <span class="token operator">:=</span> operations<span class="token punctuation">[</span>opertaions<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pred <span class="token operator">:=</span> <span class="token punctuation">[</span>last<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span>

    local_op <span class="token operator">:=</span> <span class="token punctuation">{</span>
        op<span class="token punctuation">:</span> lamport_clock_inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        obj<span class="token punctuation">:</span> table<span class="token punctuation">.</span>objId<span class="token punctuation">,</span>
        prop<span class="token punctuation">,</span>
        value<span class="token punctuation">:</span> <span class="token string">&quot;{value}&quot;</span><span class="token punctuation">,</span>
        pred<span class="token punctuation">,</span>
        succ<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    last<span class="token punctuation">.</span>succ<span class="token punctuation">.</span>append<span class="token punctuation">(</span>local_op<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    insert_op<span class="token punctuation">(</span>store<span class="token punctuation">,</span> local_op<span class="token punctuation">,</span> last_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>put(prop, value)</code>：</p><ol><li>查找<code>store</code>，找到与<code>prop</code>相关的所有<code>Operation</code>；</li><li>生成一个新的<code>Operation</code>，<code>pred</code>指向最后一个<code>Operation</code>；</li><li>将最后一个<code>Operation</code>的<code>succ</code>指向新的<code>Operation</code>；</li><li>将新的<code>Operation</code>插入到<code>store</code>中；</li></ol><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> <span class="token keyword">_</span> <span class="token operator">:=</span> search<span class="token punctuation">(</span>store<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
    last <span class="token operator">:=</span> operations<span class="token punctuation">[</span>opertaions<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pred <span class="token operator">:=</span> <span class="token punctuation">[</span>last<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span>

    new_clock <span class="token operator">:=</span> lamport_clock_inc<span class="token punctuation">(</span><span class="token punctuation">)</span>
    last<span class="token punctuation">.</span>succ<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_clock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>delete(prop)</code>：</p><ol><li>查找<code>store</code>，找到与<code>prop</code>之相关的所有<code>Operation</code>；</li><li>生成新的 <code>lamport_clock</code>，加入到最后一个<code>Operation</code>的<code>succ</code>中；</li></ol><p>delete 不会生成新的<code>Operation</code>，而是将最后一个<code>Operation</code>的<code>succ</code>指向新的<code>lamport_clock</code>，这样就可以将<code>Operation</code>从链表中软移除了。如下：</p><p><img src="`+w+`" alt="rga9"></p><p><code>empty</code>表示空的<code>Operation</code>，只有一个<code>lamport lock</code>并指向<code>age</code>最后一个<code>Operation 100</code>，从而达到删除<code>age</code>的效果。</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><p><code>List</code>的实现稍微复杂一点，因为<code>List</code>没有明确的<code>key</code>，而<code>index</code>也是动态变化的，所以找到会更加麻烦一点。</p><h4 id="get-1" tabindex="-1"><a class="header-anchor" href="#get-1" aria-hidden="true">#</a> get</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> <span class="token keyword">_</span> <span class="token operator">:=</span> nth<span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    last <span class="token operator">:=</span> operations<span class="token punctuation">[</span>operations<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> last<span class="token punctuation">.</span>action<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

<span class="token keyword">def</span> <span class="token function">nth</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    seen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">//</span> current position
    pos <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">//</span> result operations
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> operation <span class="token keyword">in</span> store<span class="token punctuation">:</span>
        <span class="token keyword">if</span> operation <span class="token keyword">is</span> insert<span class="token punctuation">:</span>
            <span class="token keyword">if</span> seen <span class="token operator">&gt;</span> index<span class="token punctuation">:</span>
                <span class="token keyword">return</span> res<span class="token punctuation">,</span> pos<span class="token punctuation">;</span>

        <span class="token keyword">if</span> operation<span class="token punctuation">.</span>insert <span class="token operator">&amp;</span><span class="token operator">&amp;</span> operation<span class="token punctuation">.</span>succ<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                seen <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> seen <span class="token operator">==</span> index <span class="token operator">&amp;</span><span class="token operator">&amp;</span> operation<span class="token punctuation">.</span>succ<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>

        pos<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> res<span class="token punctuation">,</span> pos<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get(index)</code>：</p><blockquote><p>核心点在<code>nth</code>即找到第<code>index</code>个<code>Item</code>上，注意不是<code>Operation</code>。 一个列表<code>Item</code>会包括一个或者多个<code>Operation</code>。</p></blockquote><ol><li>遍历<code>store</code>，找到第<code>index</code>个<code>Item</code>；</li><li>返回最后一个<code>Operation</code>的<code>value</code>；</li></ol><p><img src="`+_+`" alt="rga11"></p><p>如上图所示，第<code>0</code>项 Item 只有 1 个<code>Operation</code>，第<code>1</code>项 Item 有 3 个<code>Operation</code>。</p><h4 id="delete-1" tabindex="-1"><a class="header-anchor" href="#delete-1" aria-hidden="true">#</a> delete</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> <span class="token keyword">_</span> <span class="token operator">:=</span> nth<span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    first <span class="token operator">:=</span> operations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    new_clock <span class="token operator">:=</span> lamport_clock_inc<span class="token punctuation">(</span><span class="token punctuation">)</span>
    first<span class="token punctuation">.</span>succ<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_clock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>delete(index)</code>：</p><ol><li>遍历<code>store</code>，找到第<code>index</code>个<code>Item</code>，即<code>operations</code>；</li><li>生成新的 <code>lamport_clock</code>，加入到<strong>第一个</strong><code>Operation</code>的<code>succ</code>中；</li></ol><blockquote><p>这里与 Map 不同，Map 的<code>delete</code>是在最后一个<code>Operation</code>上加入新的<code>lamport_clock</code>，而 List 是在第一个<code>Operation</code>上加入新的<code>lamport_clock</code>。</p></blockquote><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> idx <span class="token operator">:=</span> nth<span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    firstOp <span class="token operator">=</span> operations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> firstOp ? <span class="token punctuation">(</span>firstOp<span class="token punctuation">.</span>insert ? firstOp<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token punctuation">:</span> firstOp<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">;</span>
    pred <span class="token operator">=</span> firstOp ? <span class="token punctuation">[</span>firstOp<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    local_op <span class="token operator">:=</span> <span class="token punctuation">{</span>
            op<span class="token punctuation">:</span> lamport_clock_inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            obj<span class="token punctuation">:</span> store<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
            prop<span class="token punctuation">,</span>
            action<span class="token punctuation">:</span> <span class="token string">&quot;{value}&quot;</span><span class="token punctuation">,</span>
            succ<span class="token punctuation">:</span> null<span class="token punctuation">,</span>
            pred<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> firstOp<span class="token punctuation">:</span>
        firstOp<span class="token punctuation">.</span>pred<span class="token punctuation">.</span>append<span class="token punctuation">(</span>local_op<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    insert_op<span class="token punctuation">(</span>store<span class="token punctuation">,</span> local_op<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>insert(index, value)</code>：</p><ol><li>遍历<code>store</code>，找到第<code>index</code>个<code>Item</code>；</li><li>生成一个新的<code>Operation</code>，<code>pred</code>指向<code>firstOp</code>，firstOp 可能为空，即插入一个新的<code>Item</code>；</li><li>将<code>firstOp</code>的<code>pred</code>指向新的<code>Operation</code>；</li><li>将新的<code>Operation</code>插入到<code>store</code>中；</li></ol><h4 id="put-1" tabindex="-1"><a class="header-anchor" href="#put-1" aria-hidden="true">#</a> put</h4><p>伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    operations<span class="token punctuation">,</span> idx <span class="token operator">:=</span> nth<span class="token punctuation">(</span>store<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> operations<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment"># not found</span>
    firstOp <span class="token operator">=</span> operations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> firstOp<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">;</span>
    pred <span class="token operator">=</span> firstOp ? <span class="token punctuation">[</span>firstOp<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    local_op <span class="token operator">:=</span> <span class="token punctuation">{</span>
            op<span class="token punctuation">:</span> lamport_clock_inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            obj<span class="token punctuation">:</span> store<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
            prop<span class="token punctuation">,</span>
            action<span class="token punctuation">:</span> <span class="token string">&quot;{value}&quot;</span><span class="token punctuation">,</span>
            succ<span class="token punctuation">:</span> null<span class="token punctuation">,</span>
            pred<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    firstOp<span class="token punctuation">.</span>pred<span class="token punctuation">.</span>append<span class="token punctuation">(</span>local_op<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    insert_op<span class="token punctuation">(</span>store<span class="token punctuation">,</span> local_op<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>put(index, value)</code>基本与<code>insert</code>类似，但 put 不能插入新的<code>Item</code>，只能修改已有的<code>Item</code>。</p><p>因此未找到<code>Item</code>时，直接返回；而<code>prop</code>实际就是<code>firstOp.id</code>，第一个插入<code>Operation</code>的 id。</p><p>对于<code>Text</code>，其实本质与<code>List</code>大差不差，只是<code>value</code>是一个字符而已，当然如果需要支持富文本，那就没那么简单了。</p>`,66),X={href:"https://www.inkandswitch.com/peritext/",target:"_blank",rel:"noopener noreferrer"},Y=n("h2",{id:"结语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),s(" 结语")],-1),H=n("p",null,"本文以 RGA 为切入点，介绍了其基本原理和实现，并参考 RGA 在 Automerge 中的设计，给出了 TinyAutomerge 的实现。",-1),J=n("p",null,"希望能够帮助读者对 CRDT 与 RGA 有一个更加深入的理解。",-1),K=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),Q={href:"https://cdnm67bsp6.feishu.cn/docx/UvbRdESXzor1PyxkTPvcA3xAn4b",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/alangibson/awesome-crdt",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types",target:"_blank",rel:"noopener noreferrer"},$={href:"http://csl.skku.edu/papers/jpdc11.pdf",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://www.inkandswitch.com/peritext/",target:"_blank",rel:"noopener noreferrer"};function sn(an,tn){const o=p("RouterLink"),t=p("ExternalLinkIcon"),c=p("RGADemo");return i(),u("div",null,[I,n("p",null,[a(o,{to:"/posts/co/crdt1.html"},{default:r(()=>[s("上一篇文章")]),_:1}),s("我们介绍了 CRDT 的基本概念，探讨了一些基础 CRDT 的实现。从本篇文章开始，我们将深入两种 CRDT 算法：")]),n("ul",null,[n("li",null,[n("a",O,[s("RGA"),a(t)])]),n("li",null,[n("a",T,[s("YATA"),a(t)])])]),q,A,R,n("p",null,[s("RGA 全称 Replicate Growable Array 可复制增长数组，由 Hyun 于 2011 年在论文"),n("a",G,[s("Replicated abstract data types: Building blocks for collaborative applications"),a(t)]),s("中提出（2011 年真的是 CRDT 爆发的一年）。")]),D,n("ul",null,[n("li",null,[n("a",j,[s("Automerge"),a(t)]),s(" 中 RGA 是基于 B+树实现的；")]),n("li",null,[n("a",C,[s("Cola"),a(t)]),s("中 RGA 是基于 G-tree 实现的；")]),n("li",null,[n("a",S,[s("RGATreeSplit"),a(t)]),s("使用平衡树来优化 RGA；")])]),E,n("p",null,[s("下面，以"),n("a",L,[s("纯文本协同编辑"),a(t)]),s("为例，看看 RGA 是如何工作的。")]),M,a(c),P,n("p",null,[s("充分推演后，我们就能给出一个"),n("a",B,[s("简单 RGA 的实现"),a(t)]),s("了。")]),N,n("p",null,[s("笔者实现了一个 toy 版本："),n("a",V,[s("TinyAutomerge"),a(t)]),s("。")]),n("p",null,[s("TinyAutomerge 是 Automerge 的一个极简版本，它是按照笔者个人理解以及 "),n("a",U,[s("Automerge 文档"),a(t)]),s("来实现的，可以帮助我们更好的理解 Automerge 和 RGA。")]),n("blockquote",null,[n("p",null,[s("Automerge 中 RGA 的"),n("a",z,[s("实现文档"),a(t)]),s("其实已经被官方文档删除掉了，笔者在 github 上找到了以前的 commit，然后将其复制到了飞书文档，希望能帮助到对 Automerge 感兴趣的人")])]),F,n("p",null,[s("RGA 富文本实现可参考"),n("a",X,[s("peritext"),a(t)]),s("。")]),Y,H,J,K,n("ul",null,[n("li",null,[n("a",Q,[s("Automerge RGA Runtime"),a(t)])]),n("li",null,[n("a",W,[s("awesome-crdt"),a(t)])]),n("li",null,[n("a",Z,[s("Near Real-Time Peer-to-Peer Shared Editing on Extensible Data Types"),a(t)])]),n("li",null,[n("a",$,[s("Replicated abstract data types: Building blocks for collaborative applications"),a(t)])]),n("li",null,[n("a",nn,[s("peritext"),a(t)])])])])}const on=l(x,[["render",sn],["__file","crdt2.html.vue"]]);export{on as default};
