import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,o as i,c as l,a as n,d as a,w as u,b as s,e as p}from"./app.836be234.js";var r="/imgs/go\u521D\u59CB\u5316\u6D41\u7A0B\u56FE.png",k="/imgs/python_add\u6808\u64CD\u4F5C.png",d="/imgs/LLVM\u66FF\u6362.png";const v={},m=n("h1",{id:"go-\u53E6\u5916\u51E0\u4E2A\u9ED1\u9B54\u6CD5\u6280\u5DE7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-\u53E6\u5916\u51E0\u4E2A\u9ED1\u9B54\u6CD5\u6280\u5DE7","aria-hidden":"true"},"#"),s(" go \u53E6\u5916\u51E0\u4E2A\u9ED1\u9B54\u6CD5\u6280\u5DE7")],-1),b=s("\u5728\u4E0A\u4E00\u7BC7"),g=s("\u6587\u7AE0"),f=s("\u4E2D\uFF0C\u7B14\u8005\u5206\u4EAB\u4E86 go \u4E2D\u4E24\u4E2A\u6709\u610F\u601D\u7684\u6280\u5DE7\u3002"),h=p(`<p>\u800C\u6700\u8FD1\u4E00\u6BB5\u65F6\u95F4\uFF0C\u7B14\u8005\u91CD\u65B0\u68B3\u7406\u4E86\u4E00\u4E0B go \u77E5\u8BC6\u70B9\uFF0C\u5E76\u6DF1\u5165\u5730\u770B\u770B\u4E86\u5B83\u7684\u6E90\u7801\uFF0C\u5728\u5B9E\u8DF5\u4E2D\u53C8\u6709\u4E86\u65B0\u7684\u6C89\u6DC0\uFF0C\u4E8E\u662F\u5199\u4E0B\u8FD9\u7BC7\u6587\u7AE0\u548C\u5927\u5BB6\u5206\u4EAB\u4E00\u4E0B\u3002</p><h2 id="\u9B54\u6CD5-1-\u6700\u5C0F\u5316\u8FD0\u884C\u65F6-minimal-runtime" tabindex="-1"><a class="header-anchor" href="#\u9B54\u6CD5-1-\u6700\u5C0F\u5316\u8FD0\u884C\u65F6-minimal-runtime" aria-hidden="true">#</a> \u9B54\u6CD5 1\uFF1A\u6700\u5C0F\u5316\u8FD0\u884C\u65F6(minimal runtime)</h2><p>\u6211\u4EEC\u77E5\u9053\uFF0Cgo \u6709\u4E00\u5C42\u5F88\u91CD\u7684\u8FD0\u884C\u65F6(runtime)\uFF0C\u5305\u62EC\u5185\u5B58\u7BA1\u7406\u3001goroutine \u8C03\u5EA6\u7B49\u91CD\u8981\u7EC4\u4EF6\uFF1B\u8FD9\u4E9B\u7EC4\u4EF6\u6781\u5927\u5730\u65B9\u4FBF\u4E86\u5E94\u7528\u7A0B\u5E8F\u7684\u5F00\u53D1\u548C\u8FED\u4EE3\uFF0C\u4F46\u4E5F\u5E26\u6765\u4E86\u4E00\u4E9B\u95EE\u9898\uFF0C\u6BD4\u5982\uFF1A</p><ul><li>Go \u7A0B\u5E8F\u81EA\u52A8\u63A5\u7BA1\u4E86\u5185\u5B58\uFF0C\u5E76\u81EA\u5E26 GC\uFF0C\u4F7F\u6211\u4EEC\u65E0\u6CD5\u76F4\u63A5\u64CD\u7EB5\u5185\u5B58\uFF1B</li><li>Go \u7A0B\u5E8F\u81EA\u52A8\u5316\u4E86\u5185\u5B58\u3001\u8C03\u5EA6\u7B49\u91CD\u8981\u6A21\u5757\uFF0C\u4F46\u8FD9\u4E9B\u7EC4\u4EF6\u672C\u8EAB\u5C31\u5360\u7528\u4E86\u4E00\u5B9A\u8D44\u6E90\uFF1B</li><li>.....</li></ul><p>\u5BF9\u4E8E\u5E94\u7528\u7A0B\u5E8F\u800C\u8A00\uFF0Cruntime \u662F\u826F\u836F\uFF0C\u80FD\u591F\u5F88\u5927\u7A0B\u5EA6\u4E0A\u7B80\u5316\u673A\u68B0\u5DE5\u4F5C\uFF0C\u8BA9\u5F00\u53D1\u8005\u96C6\u4E2D\u4E8E\u6838\u5FC3\u4E1A\u52A1\u5F00\u53D1\u548C\u8FED\u4EE3\u4E0A\uFF0C\u4F46\u5BF9\u4E8E\u4E00\u4E9B\u5176\u5B83\u573A\u666F\uFF0C\u6BD4\u5982\u64CD\u4F5C\u7CFB\u7EDF\uFF0C\u90A3\u4E48 runtime \u4F1A\u4E25\u91CD\u7834\u574F\u5176\u6838\u5FC3\u8D44\u6E90\u7BA1\u7406\u80FD\u529B\uFF0C\u90A3\u4E48\u6709\u6CA1\u6709\u65B9\u6848\u80FD\u8BA9 go \u6446\u8131\u6389 runtime \u7684\u675F\u7F1A\uFF0C\u4F7F\u5176\u6210\u4E3A\u4E00\u4E2A\u771F\u6B63\u7684\u7CFB\u7EDF\u7EA7\u7F16\u7A0B\u8BED\u8A00\u5462\uFF1F</p><p>\u80AF\u5B9A\u662F\u6709\u7684\uFF0C\u4EFB\u4F55\u4E00\u4E2A\u53EF\u6267\u884C\u6587\u4EF6\u800C\u8A00\uFF0C\u672C\u8D28\u4E0A\u90FD\u662F\u76EE\u6807\u6587\u4EF6\u88AB\u94FE\u63A5\u540E\u751F\u6210\u7684\uFF08\u4EE5\u4E0B\u5747\u4EE5 Linux \u4F5C\u4E3A\u5B9E\u8DF5\u5E73\u53F0\uFF09\u3002</p><p>go \u7F16\u8BD1\u5668\u9ED8\u8BA4\u7F16\u8BD1\u751F\u6210\u7684\u6587\u4EF6\uFF0C\u5176\u7A0B\u5E8F\u7684\u5165\u53E3\u662F runtime \u5305\u4E2D\u7684 <code>_rt0_amd64_linux</code> \u51FD\u6570\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8
	JMP	_rt0_amd64(SB)

TEXT _rt0_amd64(SB),NOSPLIT,$-8
	MOVQ	0(SP), DI	// argc
	LEAQ	8(SP), SI	// argv
	JMP	runtime\xB7rt0_go(SB)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7ECF _rt0_amd64_linux \u5165\u53E3\u8DF3\u8F6C\u5230 _rt0_amd64\u3001 rt0_go\uFF1B\u5728 rt0_go \u4E2D\uFF0Cgo \u7A0B\u5E8F\u4F1A\u521D\u59CB\u5316\u4E00\u7CFB\u5217\u7684\u5185\u5B58\u3001\u8C03\u5EA6\u3001GC \u7B49\u8D44\u6E90\uFF0C\u5982\u4E0B\u56FE\u6240\u793A\uFF1A</p><p><img src="`+r+`" alt="go\u521D\u59CB\u5316\u6D41\u7A0B\u56FE.png" loading="lazy"></p><p>\u6BCF\u4E2A go \u7A0B\u5E8F\u90FD\u4F1A\u8D70\u8FD9\u4E48\u4E00\u906D\uFF0C\u8FD9\u4E5F\u662F\u5176 runtime \u5F88\u91CD\u7684\u539F\u56E0\uFF1B\u60F3\u8981\u89C4\u907F\u6389 runtime\uFF0C\u90A3\u4E48\u6700\u597D\u7684\u65B9\u6CD5\u80AF\u5B9A\u662F\u4ECE\u6839\u6E90\u5165\u624B\uFF0C\u5C06\u7A0B\u5E8F\u5165\u53E3 _rt0_amd64_linux \u6362\u6389\uFF0C\u4E0D\u518D\u8FDB\u5165 rt0_go \u51FD\u6570\uFF0C\u4E5F\u5C31\u4E0D\u4F1A\u521D\u59CB\u5316 runtime\uFF0C\u90A3\u4E48\u81EA\u7136\u5C31\u80FD\u6446\u8131\u6389 runtime\u3002</p><p>\u65E2\u7136\u6709\u4E86\u6B63\u786E\u7684\u601D\u8DEF\uFF0C\u90A3\u4E48\u5B9E\u73B0\u8D77\u6765\u4E5F\u5C31\u4E0D\u4F1A\u96BE\u4E86\u3002</p><p>\u9996\u5148\uFF0C\u6211\u4EEC\u4ECE\u4E00\u4E2A\u7B80\u5355\u7684 <code>Hello Runtime!</code> \u5165\u624B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// ....</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Runtime!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7EDD\u5927\u591A\u6570\u60C5\u51B5\u4E0B\uFF0C\u6211\u4EEC\u4F1A\u9009\u62E9 go run \u6765\u8FD0\u884C\u8FD9\u4E2A\u7B80\u5355\u7684\u7A0B\u5E8F\uFF0C\u6216\u8005\u4F7F\u7528 go build \u6765\u76F4\u63A5\u5C06\u5176\u7F16\u8BD1\u4E3A\u53EF\u6267\u884C\u6587\u4EF6\u3002</p><p>\u4F46\u8FD9\u79CD\u505A\u6CD5\u65E0\u7591\u5C4F\u853D\u4E86\u592A\u591A\u7684\u7EC6\u8282\uFF0C\u56E0\u6B64\u6211\u4EEC\u9009\u62E9\u5148\u7F16\u8BD1\u3001\u540E\u94FE\u63A5\u7684\u201C\u7B28\u201D\u65B9\u6CD5\u6765\u505A\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ go tool compile -p main -o main.o main.go
$ go tool pack c main.a main.o
<span class="token comment"># internal \u8868\u793A\u4F7F\u7528go\u5185\u7F6E\u7684\u94FE\u63A5\u5668</span>
$ go tool <span class="token function">link</span> -linkmode<span class="token operator">=</span>internal main.a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>\u4F7F\u7528\u5DE5\u5177 compile \u5C06 main.go \u7F16\u8BD1\u4E3A\u76EE\u6807\u6587\u4EF6 main.o\uFF1B</li><li>\u4F7F\u7528\u5DE5\u5177 pack \u5C06\u76EE\u6807\u6587\u4EF6 main.o \u6253\u5305\u4E3A main.a\uFF1B</li><li>\u4F7F\u7528\u5DE5\u5177 link \u5C06\u6253\u5305\u6587\u4EF6\u94FE\u63A5\uFF0C\u751F\u6210\u53EF\u6267\u884C\u6587\u4EF6 a.out\u3002</li></ol><p>\u8FD9 3 \u4E2A\u547D\u4EE4\u5206\u522B\u751F\u6210\u4E86\u76EE\u6807\u6587\u4EF6 main.o\uFF0C\u5F52\u6863\u6587\u4EF6 main.a\uFF0C\u4EE5\u53CA\u53EF\u6267\u884C\u6587\u4EF6 a.out\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ tree -L <span class="token number">1</span> <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token operator">|</span>__a.out
<span class="token operator">|</span>__main.a
<span class="token operator">|</span>__main.go
<span class="token operator">|</span>__main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD0\u884C a.out\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ ./a.out
Hello Runtime<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u6837\u5C31\u5C55\u793A\u4E86\u4E00\u4E2A\u7A0B\u5E8F\u7F16\u8BD1\u3001\u751F\u6210\u5230\u8FD0\u884C\u7684\u5168\u8FC7\u7A0B\u3002</p><p>\u4E3A\u4E86\u6539\u53D8\u7A0B\u5E8F\u7684\u5165\u53E3\uFF0C\u4F7F\u5176\u6446\u8131 runtime\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\u505A\uFF1A</p><ol><li>\u5B9A\u4E49\u4E00\u4E2A\u65B0\u7684\u51FD\u6570\uFF0C\u6BD4\u5982\uFF1Aentry\uFF1B</li><li>\u6307\u5B9A\u94FE\u63A5\u751F\u6210\u53EF\u6267\u884C\u6587\u4EF6\u65F6\uFF0C\u5C06 entry \u4F5C\u4E3A\u7A0B\u5E8F\u5165\u53E3\u3002</li></ol><p>\u6539\u9020 main.go \u6587\u4EF6\uFF0C\u65B0\u589E\u4E00\u4E2A entry \u51FD\u6570\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//go:nosplit</span>
<span class="token comment">//go:noescape</span>
<span class="token keyword">func</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Runtime!&quot;</span><span class="token punctuation">)</span>
	<span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\uFF0C\u6211\u4EEC\u6CA1\u6709\u5220\u6389\u539F\u6765\u7684\u4EE3\u7801\uFF0C\u800C\u662F\u76F4\u63A5\u65B0\u589E\u4E86\u4E00\u4E2A entry \u51FD\u6570\uFF0C\u5E76\u5728 main \u51FD\u6570\u4E2D\u8C03\u7528\uFF0C\u662F\u4E3A\u4E86\u66F4\u597D\u7684\u5C55\u793A\u5165\u53E3\u51FD\u6570\u7684\u4F5C\u7528\u3002</p><p>entry \u51FD\u6570\u4F53\u5B9A\u4E49\u5728\u4E00\u4E2A\u5355\u72EC\u7684\u6C47\u7F16\u6587\u4EF6\u4E2D\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code># linux \u4E0B
# main_linux_amd64.s
TEXT \xB7entry(SB), $0-0
    MOVL    $33,  DI
    MOVL    $60,  AX
    SYSCALL
    RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>entry \u7684\u529F\u80FD\u4E5F\u5F88\u7B80\u5355\uFF0C\u7CFB\u7EDF\u8C03\u7528 exit \u9000\u51FA\u7A0B\u5E8F\uFF0C\u5E76\u8FD4\u56DE\u9000\u51FA\u7801 33\u3002</p><p>\u7531\u4E8E\u5F88\u591A\u4F7F\u7528 MAC \u7684\u540C\u5B66\uFF0C\u5176\u5BF9\u5E94\u7684 entry \u51FD\u6570\u7565\u6709\u4E0D\u540C\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code># mac \u4E0B
# main_darwin_amd64.s
TEXT \xB7entry(SB), $0-0
    MOVL    $33, DI
    MOVL    $(0x2000000+1), AX
    SYSCALL
    RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E\uFF0C\u6211\u4EEC\u9700\u8981\u5728\u94FE\u63A5\u65F6\u6307\u5B9A\u7A0B\u5E8F\u5165\u53E3\u4E3A entry\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ go tool asm -gensymabis -o symabis main_linux_amd64.s
$ go tool compile -symabis symabis -p main -o x1.o main.go
$ go tool asm -o x2.o main_linux_amd64.s
$ go tool pack c x.a x1.o x2.o
$ go tool <span class="token function">link</span> -linkmode<span class="token operator">=</span>internal -E <span class="token string">&#39;main.entry&#39;</span> x.a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>\u4F7F\u7528 asm \u5DE5\u5177\u4E3A main_linux_amd64.s \u751F\u6210\u7B26\u53F7\u6587\u4EF6\uFF1B</li><li>\u4F7F\u7528 compile \u5DE5\u5177\u7F16\u8BD1 main.go \u6587\u4EF6\uFF0C\u751F\u6210 x1.o \u76EE\u6807\u6587\u4EF6\uFF1B</li><li>\u4F7F\u7528 asm \u5DE5\u5177\u4E3A main_linux_amd64 \u751F\u6210\u76EE\u6807\u6587\u4EF6 x2.o\uFF1B</li><li>\u4F7F\u7528 pack \u5DE5\u5177\u6253\u5305 x1.o\uFF0Cx2.o \u5E76\u751F\u6210 x.a \u5F52\u6863\u6587\u4EF6\uFF1B</li><li>\u4F7F\u7528 link \u5DE5\u5177\u94FE\u63A5\u751F\u6210 a.out \u53EF\u6267\u884C\u6587\u4EF6\u3002</li></ol><p>go \u94FE\u63A5\u5668\u63D0\u4F9B E \u53C2\u6570\u6765\u8BBE\u7F6E\u6267\u884C\u6587\u4EF6\u5165\u53E3\uFF0C\u8FD9\u91CC\u6211\u4EEC\u6307\u5B9A main.entry \u4E3A\u7A0B\u5E8F\u5165\u53E3\uFF0C\u8FD9\u6837\u94FE\u63A5\u751F\u6210\u7684\u6587\u4EF6\u5C31\u4E0D\u4F1A\u518D\u8D70\u539F\u6765\u7684\u6267\u884C\u6D41\uFF0C\u6267\u884C\u7ED3\u679C\u5982\u4E0B\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ ./a.out
$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECE\u8FD0\u884C\u7ED3\u679C\u6765\u770B\uFF0C\u7A0B\u5E8F\u5E76\u6CA1\u6709\u8C03\u7528 Println \u51FD\u6570\uFF0C\u800C\u662F\u76F4\u63A5\u4ECE entry \u8FDB\u5165\uFF0C\u8C03\u7528 exit \u540E\u9000\u51FA\u7A0B\u5E8F\uFF0C\u9000\u51FA\u7801\u4E3A 33\u3002</p><p>\u8FD9\u6837\uFF0C\u7A0B\u5E8F\u4E5F\u4E0D\u4F1A\u8FDB\u5165 rt0_go \u4E2D\uFF0C\u4E0D\u4F1A\u521D\u59CB\u5316 runtime \u8D44\u6E90\uFF0C\u4ECE\u800C\u8FBE\u5230\u89C4\u907F runtime \u7684\u4F5C\u7528\u3002</p><p>\u8FD9\u79CD\u65B9\u5F0F\u867D\u7136\u4E0D\u4F1A\u521D\u59CB\u5316 runtime\uFF0C\u4F46\u7531\u4E8E go \u7F16\u8BD1\u5668\u7684\u9ED8\u8BA4\u884C\u4E3A\uFF0Cruntime \u4EE3\u7801\u4E5F\u4F1A\u88AB\u6253\u5305\u8FDB\u6267\u884C\u6587\u4EF6\uFF0C\u56E0\u6B64\u7B14\u8005\u624D\u6CA1\u6709\u8BF4\u4E22\u6389 runtime\uFF0C\u800C\u662F\u6700\u5C0F\u5316 runtime\u3002</p><h2 id="\u9B54\u6CD5-2-\u5373\u65F6\u7F16\u8BD1-jit-just-in-time" tabindex="-1"><a class="header-anchor" href="#\u9B54\u6CD5-2-\u5373\u65F6\u7F16\u8BD1-jit-just-in-time" aria-hidden="true">#</a> \u9B54\u6CD5 2\uFF1A\u5373\u65F6\u7F16\u8BD1 JIT(just-in-time)</h2><p>\u76EE\u524D\u5F88\u591A\u811A\u672C\u8BED\u8A00\u90FD\u52A0\u5165\u4E86<strong>\u5373\u65F6\u7F16\u8BD1</strong>\u7684\u65B0\u7279\u6027\u3002\u5373\u65F6\u7F16\u8BD1\u7684\u539F\u7406\u5F88\u7B80\u5355\uFF0C\u90A3\u5C31\u662F\u5728\u8FD0\u884C\u65F6\u751F\u6210\u673A\u5668\u7801\uFF0C\u7136\u540E\u6267\u884C\uFF0C\u8FBE\u5230\u63D0\u5347\u7A0B\u5E8F\u6027\u80FD\u7684\u6548\u679C\u3002</p><p>Python \u811A\u672C\u662F\u901A\u8FC7\u865A\u62DF\u673A(VM)\u4EE5\u5B57\u8282\u7801\u7684\u65B9\u5F0F\u89E3\u91CA\u6267\u884C\u7684\u3002\u4E00\u4E2A\u7B80\u5355\u7684\u5B57\u8282\u7801\u6837\u4F8B\u5927\u81F4\u5982\u4E0B\uFF1A</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> dis
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>add<span class="token punctuation">)</span>
  <span class="token number">2</span>           <span class="token number">0</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_FAST                <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_ADD
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\uFF0C\u6211\u4EEC\u5B9A\u4E49\u4E86\u4E00\u4E2A\u7B80\u5355\u7684 add \u51FD\u6570\uFF0C\u5E76\u901A\u8FC7 dis \u6A21\u5757\u6765\u67E5\u770B add \u51FD\u6570\u5BF9\u5E94\u7684\u5B57\u8282\u7801\u3002Python \u865A\u62DF\u673A\u662F\u4E00\u4E2A\u5178\u578B\u7684\u6808\u673A\uFF0C\u5176\u5B57\u8282\u7801\u6267\u884C\u90FD\u662F\u57FA\u4E8E\u6808\u6765\u6267\u884C\u7684\uFF0C\u4EE5 add \u4E3A\u4F8B\uFF1A</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token number">0</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token number">2</span> LOAD_FAST                <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token number">4</span> BINARY_ADD
<span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LOAD_FAST</strong>\u6307\u4EE4\u4F1A\u4ECE\u5C40\u90E8\u53D8\u91CF\u4E2D\u62FF\u5230\u53D8\u91CF\u503C\u5E76\u5165\u6808\uFF0C\u8FD9\u91CC\u4F1A\u5C06 x\uFF0Cy \u5165\u6808\uFF0C\u7136\u540E\u8C03\u7528 <strong>BINARY_ADD</strong> \u6307\u4EE4\u5C06\u6808\u9876\u7684\u4E24\u4E2A\u503C\u51FA\u6808\u3001\u76F8\u52A0\u540E\u5C06\u7ED3\u679C\u518D\u5165\u6808\uFF0C\u6700\u540E\u8C03\u7528 <strong>RETURN_VALUE</strong>\u6307\u4EE4\u5C06\u6808\u9876\u503C\u8FD4\u56DE\u3002</p><p>\u5982\u4E0B\u56FE\u6240\u793A\uFF1A</p><p><img src="`+k+`" alt="\u6808\u64CD\u4F5C" loading="lazy"></p><p>\u4E0E\u76F4\u63A5\u8FD0\u884C\u673A\u5668\u7801\u76F8\u6BD4\uFF0C\u5B57\u8282\u7801\u6267\u884C\u5177\u6709\u826F\u597D\u7684\u8DE8\u5E73\u53F0\u6027\uFF0C\u4E00\u6B21\u7F16\u8BD1\uFF0C\u5904\u5904\u8FD0\u884C\uFF08\u88C5\u6709 Python \u865A\u62DF\u673A\u7684\u524D\u63D0\u4E0B\uFF09\uFF0C\u4F46\u4E5F\u635F\u8017\u4E86\u4E00\u5B9A\u7684\u6027\u80FD\u3002</p><p>\u800C<strong>\u5373\u65F6\u7F16\u8BD1</strong>\u4F1A\u5728\u7A0B\u5E8F\u8FD0\u884C\u65F6\uFF0C\u5C06\u5B57\u8282\u7801\u7F16\u8BD1\u4E3A\u673A\u5668\u7801\u8FD0\u884C\uFF0C\u4E00\u5B9A\u7A0B\u5EA6\u4E0A\u8865\u507F\u4E86\u8FD9\u79CD\u635F\u8017\u3002</p><p>\u4E0B\u9762\uFF0C\u6211\u4EEC\u5C31\u7528 go \u6765\u5B9E\u73B0\u4E00\u4E2A\u7B80\u5355\u7684 Python JIT \u7F16\u8BD1\u5668\u6765\u9886\u7565\u5373\u65F6\u7F16\u8BD1\u7684\u9B45\u529B\u3002</p><p><strong>\u5373\u65F6\u7F16\u8BD1</strong>\u539F\u7406\u867D\u7136\u7B80\u5355\u660E\u4E86\uFF0C\u4F46\u5B9E\u73B0\u5374\u5F88\u590D\u6742\uFF0C\u6211\u4EEC\u53EA\u4F1A\u5B9E\u73B0\u4E00\u4E2A\u7B80\u5355\u7684 JIT \u7F16\u8BD1\u5668\uFF0C\u5B83\u4F1A\u5C06\u7C7B\u4F3C\u4E0B\u9762\u7684 Python \u51FD\u6570\u5373\u65F6\u7F16\u8BD1\u4E3A\u673A\u5668\u7801\uFF0C\u7136\u540E\u5199\u5165\u5185\u5B58\u5E76\u6267\u884C\uFF1A</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">-</span> y <span class="token operator">*</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u51FD\u6570\u4F1A\u8FDB\u884C\u7B80\u5355\u7684\u56DB\u5219\u8FD0\u7B97\uFF0C\u5E76\u5C06\u7ED3\u679C\u8FD4\u56DE\u3002\u5176\u5BF9\u5E94\u7684\u5B57\u8282\u7801\u5982\u4E0B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0 LOAD_FAST                0 (x)
2 LOAD_FAST                0 (x)
4 BINARY_MULTIPLY
6 LOAD_FAST                1 (y)
8 LOAD_FAST                1 (y)
10 BINARY_MULTIPLY
12 BINARY_SUBTRACT
14 RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u7B14\u8005\u6CA1\u6709\u5199\u4EE3\u7801\u53BB\u5B9E\u73B0\u5982\u4F55\u5C06 Python \u4EE3\u7801\u7FFB\u8BD1\u4E3A\u5B57\u8282\u7801\uFF0C\u8FD9\u4E9B\u7F16\u8BD1\u5668\u524D\u7AEF\u77E5\u8BC6\u611F\u5174\u8DA3\u7684\u540C\u5B66\u53EF\u4EE5\u81EA\u884C\u53BB\u67E5\u9605\u8BCD\u6CD5\u5206\u6790\u3001\u8BED\u6CD5\u5206\u6790\u7B49\u8D44\u6599\uFF0C\u6216\u8005\u76F4\u63A5\u53BB\u9605\u8BFB CPython \u6E90\u7801\u3002</p></blockquote>`,58),q=s("\u60F3\u8981\u5C06\u5B57\u8282\u7801\u76F4\u63A5\u7FFB\u8BD1\u4E3A\u673A\u5668\u7801\u53EF\u4E0D\u7B80\u5355\uFF0C\u6211\u4EEC\u9700\u5F15\u5165"),_={href:"https://en.wikipedia.org/wiki/Intermediate_representation",target:"_blank",rel:"noopener noreferrer"},y=s("\u4E2D\u95F4\u4EE3\u7801"),x=s("\uFF08IR\uFF0CIntermediate Representation\uFF09\uFF0C\u5373\u5148\u5C06\u5B57\u8282\u7801\u7FFB\u8BD1\u4E3A IR\uFF0C\u7136\u540E\u518D\u5C06 IR \u7FFB\u8BD1\u4E3A\u673A\u5668\u7801\u3002"),w=n("p",null,"\u5F88\u591A\u540C\u5B66\u4F1A\u4E0D\u4F1A\u7591\u60D1\u591A\u6B64\u4E00\u4E3E\uFF1F\u5176\u5B9E IR \u7684\u5B58\u5728\u662F\u975E\u5E38\u6709\u5FC5\u8981\u7684\uFF0C\u51E0\u4E4E\u6240\u6709\u7684\u7F16\u8BD1\u5668\u90FD\u6709 IR\uFF0C\u751A\u81F3\u53EF\u80FD\u4E0D\u6B62\u4E00\u79CD IR\uFF0C\u81F3\u4E8E IR \u7684\u4F5C\u7528\uFF0C\u5728\u540E\u6587\u4E2D\u7B14\u8005\u5E26\u9886\u5927\u5BB6\u6765\u4F53\u4F1A\u3002",-1),A=n("p",null,"\u6211\u4EEC\u4EE5 foo \u51FD\u6570\u4E3A\u4F8B\uFF0C\u770B\u770B\u5982\u4F55\u5C06\u5176\u5B57\u8282\u7801\u7FFB\u8BD1\u4E3A IR\u3002foo \u7684\u7B2C\u4E00\u6761\u5B57\u8282\u7801\u6307\u4EE4\uFF1A",-1),S=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`LOAD_FAST                0 (x)
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),I=n("p",null,[n("code",null,"LOAD_FAST"),s("\u4F1A\u4ECE\u5C40\u90E8\u53D8\u91CF\u4E2D\u62FF\u5230\u6570\u636E\uFF0C\u7136\u540E\u63A8\u5165\u6808\uFF0CLOAD_FAST \u6307\u4EE4\u9644\u5E26\u4E00\u4E2A\u53C2\u6570\uFF0C\u5373\u540E\u9762\u7684 0\uFF0C\u8868\u793A\u7B2C 0 \u4E2A\u5C40\u90E8\u53D8\u91CF\uFF0C\u4E5F\u5C31\u662F x \u53C2\u6570\u3002")],-1),R=s("\u4F7F\u7528"),N={href:"https://en.wikipedia.org/wiki/Register_allocation",target:"_blank",rel:"noopener noreferrer"},T=s("\u5BC4\u5B58\u5668"),L=s("\u6765\u6682\u5B58\u5C40\u90E8\u53D8\u91CF\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8BBE\u8BA1\u51FA\u7C7B\u4F3C\u4E0B\u9762\u7684 IR\uFF1A"),P=p(`<div class="language-S ext-S line-numbers-mode"><pre class="language-S"><code>push rax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4E0E\u7EDD\u5927\u591A\u6570\u6C47\u7F16\u4E00\u6837\uFF0C\u8FD9\u91CC\u5C06\u4E00\u6BB5\u5185\u5B58\u770B\u4F5C\u4E00\u4E2A\u6808\u6765\u64CD\u4F5C\uFF0Cpush \u8868\u793A\u5165\u6808\uFF0C\u5373\u5C06 rax \u5165\u6808\u3002\u53CD\u8FC7\u6765\uFF0Cpop \u8868\u793A\u51FA\u6808\uFF1A</p><div class="language-S ext-S line-numbers-mode"><pre class="language-S"><code>pop rdi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u5C06\u6808\u9876\u7684\u503C\u63A8\u51FA\u540E\uFF0C\u590D\u5236\u5230 rdi\u3002\u5F53\u7136\u5BF9\u4E8E\u4E00\u4E9B\u8BA1\u7B97\u64CD\u4F5C\uFF0C\u6BD4\u5982\u52A0\u6CD5\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>add rdi rsi # rdi = rdi + rsi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),D=s("\u4F1A\u5C06\u4E24\u4E2A\u5BC4\u5B58\u5668\u7684\u503C\u76F8\u52A0\u540E\u518D\u7F6E\u5165\u7B2C\u4E00\u4E2A\u5BC4\u5B58\u5668\u4E2D\u3002\u6BCF\u4E00\u4E2A\u6307\u4EE4\u53EA\u505A\u4E00\u4EF6\u5C0F\u4E8B\u60C5\uFF0C\u6BD4\u5982\u8D4B\u503C\u3001\u56DB\u5219\u8FD0\u7B97\u7B49\u7B49\uFF0C\u7C7B\u4F3C\u8FD9\u6837\u7684 IR \u6307\u4EE4\u79F0\u4E3A"),M={href:"https://en.wikipedia.org/wiki/Static_single_assignment_form",target:"_blank",rel:"noopener noreferrer"},E=s("SSA"),F=s("\u3002"),O=p(`<p>\u53E6\u5916\uFF0C\u6211\u4EEC\u7684 IR \u6307\u4EE4\u4E00\u822C\u90FD\u662F\u4E00\u4E2A\u64CD\u4F5C\u547D\u4EE4\uFF0C\u4E00\u4E2A\u64CD\u4F5C\u6570\u6216\u8005\u4E24\u4E2A\u64CD\u4F5C\u6570\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>mov rax 100
push rax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E3A\u4E86\u4FDD\u8BC1\u7EDF\u4E00\uFF0C\u6211\u4EEC\u5C06\u6240\u6709 IR \u6307\u4EE4\u4E25\u683C\u9650\u5236\u5728\u4E24\u4E2A\u64CD\u4F5C\u6570\u4E2D\uFF0C\u5982\u679C\u4E0D\u8DB3\u4E24\u4E2A\uFF0C\u5219\u6DFB\u52A0\u4E00\u4E2A <code>none</code>\uFF0C\u5982\u4E0B\uFF1B</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>mov rax 100
push rax none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),C=s("\u8FD9\u6837\u7684\u6307\u4EE4\u5F62\u5F0F\u88AB\u79F0\u4E3A "),V={href:"https://en.wikipedia.org/wiki/Three-address_code",target:"_blank",rel:"noopener noreferrer"},B=s("Three-address code(TAC)"),$=s("\u3002"),U=p(`<blockquote><p>SSA \u548C TAC \u90FD\u6709\u4E25\u683C\u7684\u5B9A\u4E49\uFF0C\u8FD9\u91CC\u53EA\u505A\u4E86\u7B80\u5355\u8BF4\u660E\uFF0C\u6709\u5174\u8DA3\u7684\u540C\u5B66\u53EF\u4EE5\u70B9\u5F00\u94FE\u63A5\u67E5\u770B\u3002</p></blockquote><p>\u4F60\u80AF\u5B9A\u4F1A\u773C\u719F\uFF0C\u8FD9\u4E0D\u5C31\u662F\u6C47\u7F16\u5417\uFF1F\u662F\u7684\uFF0C\u6211\u4EEC\u7684\u7EC8\u6781\u76EE\u6807\u662F\u7FFB\u8BD1\u6210\u673A\u5668\u7801\uFF0C\u800C\u6C47\u7F16\u662F\u76EE\u524D\u5BF9\u673A\u5668\u7801\u6700\u597D\u7684\u89E3\u91CA\u7801\uFF0C\u56E0\u6B64\u6211\u4EEC\u7684 IR \u5DEE\u4E0D\u591A\u5C31\u662F\u4E00\u79CD\u6C47\u7F16\u65B9\u8A00(Dialect)\u3002</p><p>\u7531\u4E8E\u76EE\u524D\u6211\u4EEC\u652F\u6301\u7684\u5B57\u8282\u7801\u6BD4\u8F83\u5C11\uFF0C\u6211\u4EEC\u7684\u7FFB\u8BD1\u4EE3\u7801\u4E5F\u5F88\u7B80\u6D01\u660E\u4E86\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Compiler<span class="token punctuation">)</span> <span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ir <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	pushSSA <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ssa <span class="token operator">:=</span> <span class="token operator">&amp;</span>SSA<span class="token punctuation">{</span>
			Action<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
			Arg1<span class="token punctuation">:</span>   b<span class="token punctuation">,</span>
			Arg2<span class="token punctuation">:</span>   c<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		ir <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ir<span class="token punctuation">,</span> ssa<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> c<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Opcodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		op <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">switch</span> op<span class="token punctuation">.</span>Code <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;LOAD_FAST&quot;</span><span class="token punctuation">:</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">variable</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>Arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;STORE_FAST&quot;</span><span class="token punctuation">:</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;move&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">variable</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>Arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;LOAD_CONST&quot;</span><span class="token punctuation">:</span> <span class="token comment">// \u52A0\u8F7D\u7ACB\u5373\u6570</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;immediate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Constants<span class="token punctuation">[</span>op<span class="token punctuation">.</span>Arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;BINARY_MULTIPLY&quot;</span><span class="token punctuation">:</span> <span class="token comment">// \u4E58\u6CD5</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;imul&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;BINARY_ADD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;INPLACE_ADD&quot;</span><span class="token punctuation">:</span> <span class="token comment">// \u52A0\u6CD5</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;BINARY_SUBTRACT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;INPLACE_SUBTRACT&quot;</span><span class="token punctuation">:</span> <span class="token comment">// \u51CF\u6CD5</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rsi&quot;</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;UNARY_NEGATIVE&quot;</span><span class="token punctuation">:</span>  <span class="token comment">// -x</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;neg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rdi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;RETURN_VALUE&quot;</span><span class="token punctuation">:</span>  <span class="token comment">// \u8FD4\u56DE</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rax&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;ret&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s not support&quot;</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ir<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Compile</code> \u51FD\u6570\u8D1F\u8D23\u5C06\u5B57\u8282\u7801\u7FFB\u8BD1\u4E3A IR(SSA)\uFF0C\u501F\u52A9\u5BC4\u5B58\u5668\u548C\u6808\uFF0C\u80FD\u591F\u5F88\u8FC5\u901F\u7684\u5C06\u5B57\u8282\u7801\u7FFB\u8BD1\u4E3A\u5BF9\u5E94\u7684 IR\u3002</p><p>\u8FD0\u884C\u7A0B\u5E8F\uFF0C\u7FFB\u8BD1 foo \u51FD\u6570\u7684\u5B57\u8282\u7801\uFF0C\u53EF\u4EE5\u5F97\u5230\u5982\u4E0B\u7684\u8F93\u51FA\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>push rax none
push rax none
pop rdi none
pop rsi none
imul rdi rsi
push rdi none
push rbx none
push rbx none
pop rdi none
pop rsi none
imul rdi rsi
push rdi none
pop rsi none
pop rdi none
sub rdi rsi
push rdi none
pop rax none
ret none none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230\uFF0Cfoo \u51FD\u6570\u4EC5\u6709 8 \u6761\u5B57\u8282\u7801\u6307\u4EE4\uFF0C\u4F46\u7FFB\u8BD1\u4E3A IR \u540E\uFF0C\u6570\u91CF\u5C31\u7FFB\u500D\u4E86\uFF0C\u800C\u6307\u4EE4\u6570\u91CF\u76F4\u63A5\u5F71\u54CD\u5230\u4E86\u7A0B\u5E8F\u6267\u884C\u6548\u7387\u3002</p><p>\u56E0\u6B64\uFF0C\u6211\u4EEC\u52A0\u5165\u4E00\u4E2A\u7B80\u5355\u7684\u4F18\u5316\u5668\uFF0C\u6765\u4F18\u5316 IR\u3002\u8FD9\u91CC\u4E0D\u4F1A\u6D89\u53CA\u5230\u592A\u590D\u6742\u7684\u4F18\u5316\u7B97\u6CD5\uFF0C\u6211\u4EEC\u53EA\u7F57\u5217\u51E0\u4E2A\u7B80\u5355\u7684\u4F18\u5316\u5B9E\u73B0\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>push rax none
push rax none
pop rdi none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC push rax \u660E\u663E\u91CD\u590D\u4E86\u4E24\u6B21\uFF0C\u4E5F\u5BF9\u5E94\u4E86\u4E24\u6B21 LOAD_FAST\uFF0C\u4F46\u5BF9\u4E8E\u5BC4\u5B58\u5668\u5206\u914D\u800C\u8A00\uFF0C\u8FD9\u660E\u663E\u91CD\u590D\u4E86\u3002</p><p>\u53E6\u5916\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>push rax none
pop rdi none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u73B0\u5C06 rax \u7684\u6808\u5165\u6808\uFF0C\u7136\u540E\u518D\u5C06\u6808\u9876\u7684\u503C\u63A8\u51FA\uFF0C\u5E76\u8D4B\u503C\u7ED9 rdi\uFF0C\u8FD9\u4E24\u4E2A\u64CD\u4F5C\u660E\u663E\u53EF\u4EE5\u76F4\u63A5\u4F18\u5316\u6210\u4E00\u4E2A\u64CD\u4F5C\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>mov rdi rax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u76F4\u63A5\u5C06 rax \u7684\u503C\u62F7\u8D1D\u5230 rdi \u5C31\u884C\u4E86\u3002\u5BF9\u5E94\u7684\u4F18\u5316\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;push&quot;</span> <span class="token operator">&amp;&amp;</span> op2 <span class="token operator">==</span> <span class="token string">&quot;pop&quot;</span> <span class="token punctuation">{</span>
    index <span class="token operator">+=</span> <span class="token number">2</span>
    <span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;mov&quot;</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a1<span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u51FA\u73B0\u7C7B\u4F3C <code>mov rdi rdi</code> \u8FD9\u6837\u65E0\u6548\u7684\u590D\u5236\u6307\u4EE4\uFF0C\u4E5F\u662F\u53EF\u4EE5\u76F4\u63A5\u4F18\u5316\u7684\uFF0C\u5BF9\u5E94\u7684\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;mov&quot;</span> <span class="token operator">&amp;&amp;</span> a1 <span class="token operator">==</span> b1 <span class="token punctuation">{</span>
    index <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">continue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u7136\u4E5F\u6709\u4E00\u4E9B\u5176\u5B83\u7684\u4F18\u5316\uFF0C\u5B83\u4EEC\u90FD\u662F\u5BF9\u591A\u4F59\u6307\u4EE4\u3001\u91CD\u590D\u6307\u4EE4\u7684\u7CBE\u7B80\uFF0C\u6574\u4F53\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Optimize</span><span class="token punctuation">(</span>ir <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA <span class="token punctuation">{</span>
	ret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	fetch <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span>
		<span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> ir<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>Action<span class="token punctuation">,</span>
				ir<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>Arg1<span class="token punctuation">,</span> ir<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>Arg2
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	pushSSA <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ssa <span class="token operator">:=</span> <span class="token operator">&amp;</span>SSA<span class="token punctuation">{</span>
			Action<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
			Arg1<span class="token punctuation">:</span>   b<span class="token punctuation">,</span>
			Arg2<span class="token punctuation">:</span>   c<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		ret <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> ssa<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	index <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> index <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		op1<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b1 <span class="token operator">:=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
		op2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2 <span class="token operator">:=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
		op3<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;mov&quot;</span> <span class="token operator">&amp;&amp;</span> a1 <span class="token operator">==</span> b1 <span class="token punctuation">{</span>
			index <span class="token operator">+=</span> <span class="token number">1</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;mov&quot;</span> <span class="token operator">&amp;&amp;</span> op2 <span class="token operator">==</span> <span class="token string">&quot;mov&quot;</span> <span class="token operator">&amp;&amp;</span> a1 <span class="token operator">==</span> b2 <span class="token punctuation">{</span>
			index <span class="token operator">+=</span> <span class="token number">2</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;mov&quot;</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;push&quot;</span> <span class="token operator">&amp;&amp;</span> op2 <span class="token operator">==</span> <span class="token string">&quot;pop&quot;</span> <span class="token punctuation">{</span>
			index <span class="token operator">+=</span> <span class="token number">2</span>
			<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;mov&quot;</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a1<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> op1 <span class="token operator">==</span> <span class="token string">&quot;push&quot;</span> <span class="token operator">&amp;&amp;</span> op3 <span class="token operator">==</span> <span class="token string">&quot;pop&quot;</span> <span class="token operator">&amp;&amp;</span>
			op2 <span class="token operator">!=</span> <span class="token string">&quot;push&quot;</span> <span class="token operator">&amp;&amp;</span> op2 <span class="token operator">!=</span> <span class="token string">&quot;pop&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> a2 <span class="token operator">!=</span> a3 <span class="token punctuation">{</span>
				index <span class="token operator">+=</span> <span class="token number">3</span>
				<span class="token function">pushSSA</span><span class="token punctuation">(</span><span class="token string">&quot;mov&quot;</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a1<span class="token punctuation">)</span>
				<span class="token function">pushSSA</span><span class="token punctuation">(</span>op2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		index<span class="token operator">++</span>
		<span class="token function">pushSSA</span><span class="token punctuation">(</span>op1<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6211\u4EEC\u5B9E\u73B0\u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u4F18\u5316\u5668\uFF0C\u867D\u7136\u7B80\u5355\uFF0C\u4F46\u6548\u679C\u5374\u5F88\u597D\uFF0C\u5C06\u5B57\u8282\u7801\u751F\u6210\u7684 IR \u4F18\u5316\u540E\uFF0C\u65B0\u7684 IR \u5982\u4E0B\uFF1A</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>mov rsi rax
mov rdi rax
imul rdi rsi
push rdi none
mov rsi rbx
mov rdi rbx
imul rdi rsi
mov rsi rdi
pop rdi none
sub rdi rsi
mov rax rdi
ret none none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IR \u88AB\u7CBE\u7B80\u4E86\u4E00\u534A\uFF0C\u5927\u5E45\u63D0\u9AD8\u4E86\u7A0B\u5E8F\u8FD0\u884C\u6548\u7387\u3002\u5176\u5B9E\u5728\u8FD9\u91CC\u5DF2\u7ECF\u4F53\u73B0\u51FA IR \u7684\u5F3A\u5927\u4F5C\u7528\uFF0CIR \u5177\u6709\u5F88\u5F3A\u7684\u8868\u73B0\u529B\uFF0C\u5E76\u4E14\u9002\u5408\u7A0B\u5E8F\u8FDB\u884C\u5206\u6790\u548C\u4F18\u5316\uFF0C\u6BD4\u8D77\u76F4\u63A5\u7FFB\u8BD1\u4E3A\u673A\u5668\u7801\uFF0C\u6DFB\u52A0 IR \u4E2D\u95F4\u5C42\u662F\u5F88\u6709\u5FC5\u8981\u7684\u3002</p><p>\u5F97\u5230 IR \u540E\uFF0C\u6211\u4EEC\u9700\u8981\u5C06 IR \u7FFB\u8BD1\u4E3A\u5177\u4F53\u7684\u673A\u5668\u7801\uFF0C\u8FD9\u4E2A\u5730\u65B9\u7684\u7FFB\u8BD1\u662F\u6BD4\u8F83\u67AF\u71E5\u7684\uFF0C\u5B9E\u9645\u4E0A\u5C31\u662F\u4EBA\u8089\u7FFB\u8BD1\uFF0C\u4EE5 mov \u6307\u4EE4\u4E3A\u4F8B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>as <span class="token operator">*</span>Assembler<span class="token punctuation">)</span> <span class="token function">mov</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	as<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token operator">|</span>as<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>as <span class="token operator">*</span>Assembler<span class="token punctuation">)</span> <span class="token function">register</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">{</span>
	order <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>
		<span class="token string">&quot;rax&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rcx&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rdx&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rbx&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rsp&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rbp&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rsi&quot;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
		<span class="token string">&quot;rdi&quot;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	enc <span class="token operator">:=</span> order<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
	<span class="token keyword">if</span> b <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		enc <span class="token operator">=</span> enc<span class="token operator">&lt;&lt;</span><span class="token number">3</span> <span class="token operator">|</span> order<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> enc
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mov \u6307\u4EE4\u5BF9\u5E94\u7684\u673A\u5668\u7801\u5B9E\u9645\u4E0A\u5C31\u662F\u552F\u4E00\u7684\uFF0C\u533A\u522B\u5728\u4E8E\u4E0D\u540C\u7684\u5BC4\u5B58\u5668\uFF0C\u6307\u4EE4\u7684\u64CD\u4F5C\u6570\u4F1A\u4E0D\u4E00\u6837\uFF0C\u6BD4\u5982 rax \u5BF9\u5E94\u5E8F\u53F7 0\uFF0C\u5176\u5B83\u64CD\u4F5C\u5BC4\u5B58\u5668\u7684\u6307\u4EE4\u4E5F\u7C7B\u4F3C\u4E8E\u6B64\uFF0C\u56E0\u6B64\u8FD9\u91CC\u4E0D\u505A\u8FC7\u591A\u4ECB\u7ECD\uFF0C\u611F\u5174\u8DA3\u7684\u540C\u5B66\u53EF\u4EE5\u81EA\u5DF1\u5C06\u7A0B\u5E8F\u7F16\u8BD1\u4E3A\u6267\u884C\u6587\u4EF6\u540E\uFF0C\u4F7F\u7528 objdump \u5DE5\u5177\u6765\u67E5\u770B\uFF0C\u6574\u4F53\u7684\u7FFB\u8BD1\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>as <span class="token operator">*</span>Assembler<span class="token punctuation">)</span> <span class="token function">Assembly</span><span class="token punctuation">(</span>ir <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SSA<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ssa <span class="token operator">:=</span> <span class="token keyword">range</span> ir <span class="token punctuation">{</span>
		name<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">:=</span> ssa<span class="token punctuation">.</span>Action<span class="token punctuation">,</span> ssa<span class="token punctuation">.</span>Arg1<span class="token punctuation">,</span> ssa<span class="token punctuation">.</span>Arg2
		<span class="token keyword">switch</span> name <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;ret&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">ret</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;push&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;pop&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;imul&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">imul</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;sub&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;neg&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">neg</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;mov&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">mov</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;immediate&quot;</span><span class="token punctuation">:</span>
			as<span class="token punctuation">.</span><span class="token function">immediate</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> as<span class="token punctuation">.</span>code<span class="token punctuation">[</span><span class="token punctuation">:</span>as<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F97\u5230\u673A\u5668\u7801\u540E\uFF0CJIT \u7684\u5DE5\u4F5C\u5DEE\u4E0D\u591A\u5C31\u5B8C\u6210\u4E86\uFF0C\u5269\u4E0B\u7684\u5C31\u662F\u5C06\u673A\u5668\u7801\u5199\u5165\u5185\u5B58\uFF0C\u7136\u540E\u6267\u884C\u4E86\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	opcodes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>py<span class="token punctuation">.</span>Opcode<span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
	c <span class="token operator">:=</span> py<span class="token punctuation">.</span><span class="token function">NewCompiler</span><span class="token punctuation">(</span>opcodes<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	ir<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// ... \u53EF\u6839\u636E\u5B9E\u9645\u7684\u60C5\u51B5\uFF0C\u6765\u9009\u62E9\u4F18\u5316\u51E0\u6B21</span>
	ir <span class="token operator">=</span> py<span class="token punctuation">.</span><span class="token function">Optimize</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span>
	ir <span class="token operator">=</span> py<span class="token punctuation">.</span><span class="token function">Optimize</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span>
	<span class="token comment">// ....</span>
	assembler <span class="token operator">:=</span> py<span class="token punctuation">.</span><span class="token function">NewAssembler</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
	code <span class="token operator">:=</span> assembler<span class="token punctuation">.</span><span class="token function">Assembly</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
	area<span class="token punctuation">,</span> err <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">Mmap</span><span class="token punctuation">(</span>
		<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token number">4096</span><span class="token punctuation">,</span>
		syscall<span class="token punctuation">.</span>PROT_READ<span class="token operator">|</span>syscall<span class="token punctuation">.</span>PROT_WRITE<span class="token operator">|</span>syscall<span class="token punctuation">.</span>PROT_EXEC<span class="token punctuation">,</span>
		syscall<span class="token punctuation">.</span>MAP_PRIVATE<span class="token operator">|</span>syscall<span class="token punctuation">.</span>MAP_ANON<span class="token punctuation">)</span> <span class="token comment">// linux for MAP_ANONYMOUS</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;mmap err: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> by <span class="token operator">:=</span> <span class="token keyword">range</span> code <span class="token punctuation">{</span> <span class="token comment">// \u9009\u62E9 copy \u65E0\u7591\u66F4\u4F73</span>
		area<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> by
	<span class="token punctuation">}</span>
	<span class="token keyword">type</span> fooFunc <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">int64</span>
	unsafePrintFunc <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span>
	foo <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>fooFunc<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unsafePrintFunc<span class="token punctuation">)</span><span class="token punctuation">)</span>
	ret <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u4F7F\u7528 mmap \u6620\u5C04\u51FA\u4E00\u6BB5\u5185\u5B58\u540E\uFF0C\u5C06\u751F\u6210\u7684\u673A\u5668\u7801\u5199\u5165\u5185\u5B58\uFF0C\u7136\u540E\u5C06\u5176\u901A\u8FC7\u6307\u9488\u5F3A\u8F6C\u4E3A\u51FD\u6570\u6307\u9488\uFF0C\u6700\u540E\u901A\u8FC7\u51FD\u6570\u6307\u9488\u8C03\u7528 foo(3,2)\uFF0C\u5F97\u5230\u5982\u4E0B\u7ED3\u679C\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>\u63D0\u793A\u4E00\u4E0B\uFF0C\u7531\u4E8E\u4E0D\u540C\u8BED\u8A00\u7684\u8C03\u7528\u7EA6\u5B9A\u662F\u4E0D\u4E00\u6837\u7684\uFF0Cgo \u81EA 1.17 \u4F7F\u7528\u5BC4\u5B58\u5668\u6765\u4F20\u53C2\u540E\uFF0C\u5176\u53C2\u6570\u662F\u6309\u7167 rax, rcx, rdx \u6765\u6392\u5217\u7684\uFF0C\u56E0\u6B64\u5982\u679C\u662F\u5728\u5176\u5B83\u8BED\u8A00\u4E0B\uFF0C\u751F\u6210\u7684\u673A\u5668\u7801\u662F\u4E0D\u540C\u7684\u3002</p></blockquote><p>\u4ECE\u7ED3\u679C\u53EF\u4EE5\u53D1\u73B0\uFF0CJIT \u662F\u6210\u529F\u7684\uFF0C\u4E00\u4E2A\u7B80\u5355\u7684 Python JIT \u7F16\u8BD1\u5668\u5C31\u8FD9\u6837\u88AB\u5B9E\u73B0\u4E86\u3002</p><h2 id="\u9B54\u6CD5-3-\u81EA\u4E3E-bootstrap" tabindex="-1"><a class="header-anchor" href="#\u9B54\u6CD5-3-\u81EA\u4E3E-bootstrap" aria-hidden="true">#</a> \u9B54\u6CD5 3\uFF1A\u81EA\u4E3E(bootstrap)</h2><p>go \u662F\u81EA\u4E3E\u5B9E\u73B0\u7684\uFF0C\u800C\u4E14\u662F\u4E00\u4E2A\u5B8C\u5168\u81EA\u4E3E\u7684\u7F16\u8BD1\u5668\u5B9E\u73B0\uFF0C\u5373\u7F16\u8BD1\u5668\u3001\u94FE\u63A5\u5668\u7B49\u7B49\u90FD\u662F\u7528 go \u5B9E\u73B0\u7684\uFF1B\u4E0D\u4EC5\u5982\u6B64\uFF0Cgo \u628A\u7F16\u8BD1\u5668\u7684\u524D\u7AEF\u90E8\u5206\u76F4\u63A5\u5F00\u653E\u5728\u4E86\u6807\u51C6\u5E93\u4E2D\uFF0C\u8FD9\u610F\u5473\u7740\u6211\u4EEC\u4E0D\u4EC5\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u524D\u7AEF\u90E8\u5206\uFF0C\u8FD8\u53EF\u4EE5\u66FF\u6362\u53E6\u5916\u7684\u4E2D\u3001\u540E\u7AEF\u5E73\u53F0\u6765\u7F16\u8BD1 go\u3002\u5982\u4E0B\uFF1A</p><p><img src="`+d+`" alt="LLVM\u66FF\u6362" loading="lazy"></p><p>\u6211\u4EEC\u501F\u52A9 go \u6807\u51C6\u5E93\u548C LLVM \u5C31\u80FD\u5B9E\u73B0\u4E00\u4E2A\u975E\u5E38\u7B80\u5355\u7684\u7F16\u8BD1\u5668\uFF0C\u4E0D\u518D\u4F7F\u7528 go \u9ED8\u8BA4\u7F16\u8BD1\u5668\u72EC\u6709\u7684 IR \u548C\u673A\u5668\u7801\u751F\u6210\u5668\u3002</p><p>\u76EE\u6807\u5F88\u660E\u786E\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u73B0\u4E00\u4E2A\u6781\u7B80\u7F16\u8BD1\u5668\uFF0C\u5C06\u8FD9\u6BB5 go \u4EE3\u7801\u7F16\u8BD1\u4E3A\u53EF\u6267\u884C\u6587\u4EF6\u5373\u53EF\u3002</p><p>\u9996\u5148\uFF0C\u4F7F\u7528 go/parser \u7B49\u6807\u51C6\u5E93\u6765\u7B49 go \u6E90\u4EE3\u7801\u8FDB\u884C\u89E3\u6790\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fset <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">NewFileSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u76F8\u5BF9\u4E8Efset\u7684position</span>
	src <span class="token operator">:=</span> <span class="token string">\`package main

import &quot;fmt&quot;

func add(x int, y int) int {
	return x + y
}

func main() {
	fmt.Println(add(10, 2))
}\`</span>

	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> parser<span class="token punctuation">.</span><span class="token function">ParseFile</span><span class="token punctuation">(</span>fset<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> parser<span class="token punctuation">.</span>AllErrors<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	ast<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>fset<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7531\u4E8E go \u826F\u597D\u7684\u81EA\u4E3E\u8BBE\u8BA1\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8F7B\u677E\u5F97\u5230\u8FD9\u6BB5\u4EE3\u7801\u7684 AST \u6811\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0  *ast.File {
1  .  Package: 1:1
2  .  Name: *ast.Ident {
3  .  .  NamePos: 1:9
4  .  .  Name: &quot;main&quot;
5  .  }
6  .  Decls: []ast.Decl (len = 3) {
7  .  .  0: *ast.GenDecl {
8  .  .  .  TokPos: 3:1
9  .  .  .  Tok: import
.... \u7701\u7565
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LLVM \u4E3A\u4E86\u5C4F\u853D\u4E0D\u540C\u5E73\u53F0\u67B6\u6784\u4E4B\u95F4\u7684\u6307\u4EE4\u5DEE\u5F02\u6027\uFF0C\u8BBE\u8BA1\u4E86\u4E00\u79CD IR\uFF0C\u4E3E\u4F8B\uFF1A</p><div class="language-ll ext-ll line-numbers-mode"><pre class="language-ll"><code>define i32 @add(i32 %a, i32 %b) {
  %1 = add i32 %a, %b
  ret i32 %1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LLVM \u7684 IR \u4E0D\u540C\u4E8E\u4E0A\u9762\u63D0\u5230\u7684\u6C47\u7F16\u65B9\u8A00\uFF0C\u800C\u662F\u4E00\u79CD\u66F4\u52A0\u9AD8\u7EA7\u7684\u62BD\u8C61\uFF0C\u6709\u57FA\u672C\u7684\u51FD\u6570\u5B9A\u4E49\u3001\u5206\u652F\u7B49\uFF0C\u66F4\u50CF\u662F\u4E00\u79CD low level C\u3002</p><p>LLVM \u7684\u7F16\u8BD1\u5668 clang \u662F\u652F\u6301\u76F4\u63A5\u5C06 IR \u7F16\u8BD1\u4E3A\u53EF\u6267\u884C\u6587\u4EF6\u7684\uFF0C\u5728\u7F16\u8BD1\u7684\u8FC7\u7A0B\u4E2D\u4F1A\u81EA\u52A8\u5BF9 IR\u3001\u673A\u5668\u7801\u8FDB\u884C\u4F18\u5316\uFF0C\u8FD9\u4E5F\u662F LLVM \u8FD1\u4E9B\u5E74\u706B\u7206\u7684\u539F\u56E0\uFF0C\u5F88\u591A\u8BED\u8A00\u642D\u4E0A\u4E86 LLVM \u7684\u5FEB\u8F66\uFF0C\u6BD4\u5982 Rust \u7B49\u3002</p>`,49),Y=s("\u6240\u4EE5\uFF0C\u4EFB\u52A1\u66F4\u52A0\u7B80\u5355\u4E86\uFF0C\u53EA\u9700\u8981\u5728 AST \u6811\u7FFB\u8BD1\u4E3A LLVM IR \u5373\u53EF\u3002\u5B9E\u9645\u4E0A\uFF0C\u6709\u4E00\u4E9B\u9879\u76EE\u5C31\u662F\u91C7\u7528\u8FD9\u79CD\u505A\u6CD5\uFF0C\u6BD4\u5982 "),z={href:"https://go.googlesource.com/gollvm/",target:"_blank",rel:"noopener noreferrer"},G=s("gollvm"),J=s("\u548C "),X={href:"https://tinygo.org/",target:"_blank",rel:"noopener noreferrer"},j=s("tinygo"),H=s(" \u7B49\u3002"),Q=p(`<p>\u5F53\u7136\uFF0C\u4E00\u95E8\u8BED\u8A00\u7684\u8BED\u6CD5\u7FFB\u8BD1\u4E5F\u4E0D\u662F\u4E00\u4EF6\u6613\u4E8B\uFF0C\u611F\u5174\u8DA3\u7684\u540C\u5B66\u53EF\u4EE5\u70B9\u5F00 gollvm \u548C tinygo \u7684\u94FE\u63A5\u770B\u770B\u5B83\u4EEC\u662F\u5982\u4F55\u505A\u7684\uFF0C\u8FD9\u91CC\u7B14\u8005\u4EC5\u7B80\u5355\u7684\u7FFB\u8BD1\u4E0A\u9762\u7684\u4F8B\u5B50\u3002</p><p>\u5F97\u5230 AST \u6811\u540E\uFF0C\u6211\u4EEC\u9700\u8981\u62FF\u5230 add\u3001main \u51FD\u6570\u7684\u5B9A\u4E49\uFF0C\u5E76\u5C06\u5176\u7FFB\u8BD1\u4E3A IR\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> decl <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>Decls <span class="token punctuation">{</span>
	<span class="token keyword">if</span> fn<span class="token punctuation">,</span> ok <span class="token operator">:=</span> decl<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>FuncDecl<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">if</span> fn<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span> <span class="token punctuation">{</span>
			<span class="token function">translateAdd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> funcMap<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> fn<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;main&quot;</span> <span class="token punctuation">{</span>
			<span class="token function">translateMain</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> funcMap<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E add \u51FD\u6570\uFF0C\u6CA1\u6709\u590D\u6742\u7684\u51FD\u6570\u4F53\uFF0C\u6211\u4EEC\u63D0\u53D6\u51FA\u53C2\u6570\u3001\u8FD4\u56DE\u503C\u7136\u540E\u751F\u6210\u5BF9\u5E94\u7684 IR \u5373\u53EF\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">translateAdd</span><span class="token punctuation">(</span>m <span class="token operator">*</span>ir<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> decl <span class="token operator">*</span>ast<span class="token punctuation">.</span>FuncDecl<span class="token punctuation">,</span> funcMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Func<span class="token punctuation">)</span> <span class="token operator">*</span>ir<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
	params <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> decl<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Params<span class="token punctuation">.</span>List <span class="token punctuation">{</span>
		paramName <span class="token operator">:=</span> field<span class="token punctuation">.</span>Names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name
		paramType <span class="token operator">:=</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>Ident<span class="token punctuation">)</span><span class="token punctuation">.</span>Name
		<span class="token keyword">if</span> paramType <span class="token operator">!=</span> <span class="token string">&quot;int&quot;</span> <span class="token punctuation">{</span> <span class="token comment">// \u6682\u4E0D\u652F\u6301</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> ir<span class="token punctuation">.</span><span class="token function">NewParam</span><span class="token punctuation">(</span>paramName<span class="token punctuation">,</span> types<span class="token punctuation">.</span>I32<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	returnType <span class="token operator">:=</span> decl<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Results<span class="token punctuation">.</span>List<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>Ident<span class="token punctuation">)</span><span class="token punctuation">.</span>Name
	<span class="token keyword">if</span> returnType <span class="token operator">!=</span> <span class="token string">&quot;int&quot;</span> <span class="token punctuation">{</span> <span class="token comment">// \u6682\u4E0D\u652F\u6301</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>returnType <span class="token operator">+</span> <span class="token string">&quot; return type is not support&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	funcDefine <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">NewFunc</span><span class="token punctuation">(</span>decl<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> types<span class="token punctuation">.</span>I32<span class="token punctuation">,</span> params<span class="token operator">...</span><span class="token punctuation">)</span>
	ab <span class="token operator">:=</span> funcDefine<span class="token punctuation">.</span><span class="token function">NewBlock</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
	ab<span class="token punctuation">.</span><span class="token function">NewRet</span><span class="token punctuation">(</span>ab<span class="token punctuation">.</span><span class="token function">NewAdd</span><span class="token punctuation">(</span>funcDefine<span class="token punctuation">.</span>Params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> funcDefine<span class="token punctuation">.</span>Params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	funcMap<span class="token punctuation">[</span>decl<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> funcDefine
	<span class="token keyword">return</span> funcDefine
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u800C\u5728 main \u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4E0D\u4EC5\u9700\u8981\u8C03\u7528 add \u51FD\u6570\uFF0C\u8FD8\u9700\u8981\u8C03\u7528 println \u51FD\u6570\u6765\u6253\u5370\u7ED3\u679C\uFF0C\u6240\u4EE5\uFF0C\u6211\u4EEC\u63D0\u524D\u5B9A\u4E49\u4E00\u4E2A printf \u5185\u7F6E\u51FD\u6570\uFF0C\u5E76\u5C06\u5176\u52A0\u5165\u5230\u54C8\u5E0C\u8868\u4E2D\u65B9\u4FBF\u540E\u7EED\u67E5\u627E\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// builtin</span>
printf <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">NewFunc</span><span class="token punctuation">(</span>
	<span class="token string">&quot;printf&quot;</span><span class="token punctuation">,</span>
	types<span class="token punctuation">.</span>I32<span class="token punctuation">,</span>
	ir<span class="token punctuation">.</span><span class="token function">NewParam</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">NewPointer</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>I8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
printf<span class="token punctuation">.</span>Sig<span class="token punctuation">.</span>Variadic <span class="token operator">=</span> <span class="token boolean">true</span>

funcMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Func<span class="token punctuation">{</span>
		<span class="token string">&quot;printf&quot;</span><span class="token punctuation">:</span> printf<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main \u51FD\u6570\u4E2D\uFF0C\u9700\u8981\u5BF9 add \u51FD\u6570\u7684\u53C2\u6570\u8FDB\u884C\u5904\u7406\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">translateMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>ir<span class="token punctuation">.</span>Module<span class="token punctuation">,</span> decl <span class="token operator">*</span>ast<span class="token punctuation">.</span>FuncDecl<span class="token punctuation">,</span> funcMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Func<span class="token punctuation">)</span> <span class="token operator">*</span>ir<span class="token punctuation">.</span>Func <span class="token punctuation">{</span>
	zero <span class="token operator">:=</span> constant<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>I32<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	stmt <span class="token operator">:=</span> decl<span class="token punctuation">.</span>Body<span class="token punctuation">.</span>List<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>ExprStmt<span class="token punctuation">)</span><span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span><span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span>
	args <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>value<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> stmt<span class="token punctuation">.</span>Args <span class="token punctuation">{</span>
		val <span class="token operator">:=</span> item<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>BasicLit<span class="token punctuation">)</span><span class="token punctuation">.</span>Value
		i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		args <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>I32<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	funcMain <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">NewFunc</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>I32<span class="token punctuation">)</span>
	mb <span class="token operator">:=</span> funcMain<span class="token punctuation">.</span><span class="token function">NewBlock</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
	result <span class="token operator">:=</span> mb<span class="token punctuation">.</span><span class="token function">NewCall</span><span class="token punctuation">(</span>funcMap<span class="token punctuation">[</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>
	formatStr <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">NewGlobalDef</span><span class="token punctuation">(</span><span class="token string">&quot;formatStr&quot;</span><span class="token punctuation">,</span> constant<span class="token punctuation">.</span><span class="token function">NewCharArrayFromString</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	format <span class="token operator">:=</span> constant<span class="token punctuation">.</span><span class="token function">NewGetElementPtr</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>I8<span class="token punctuation">)</span><span class="token punctuation">,</span> formatStr<span class="token punctuation">,</span> zero<span class="token punctuation">,</span> zero<span class="token punctuation">)</span>
	mb<span class="token punctuation">.</span><span class="token function">NewCall</span><span class="token punctuation">(</span>funcMap<span class="token punctuation">[</span><span class="token string">&quot;printf&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	mb<span class="token punctuation">.</span><span class="token function">NewRet</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span>
	<span class="token keyword">return</span> funcMain
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E\uFF0C\u6211\u4EEC\u5C06\u5F97\u5230\u7684 IR \u6253\u5370\u5E76\u5199\u5165\u6587\u4EF6\uFF0C\u5E76\u8C03\u7528 clang \u7F16\u8BD1\u4E3A\u6267\u884C\u6587\u4EF6\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fset <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">NewFileSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u76F8\u5BF9\u4E8Efset\u7684position</span>
	src <span class="token operator">:=</span> <span class="token string">\`package main

import &quot;fmt&quot;

func add(x int, y int) int {
	return x + y
}

func main() {
	fmt.Println(add(10, 2))
}\`</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> parser<span class="token punctuation">.</span><span class="token function">ParseFile</span><span class="token punctuation">(</span>fset<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> parser<span class="token punctuation">.</span>AllErrors<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	m <span class="token operator">:=</span> ir<span class="token punctuation">.</span><span class="token function">NewModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// builtin</span>
	printf <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">NewFunc</span><span class="token punctuation">(</span>
		<span class="token string">&quot;printf&quot;</span><span class="token punctuation">,</span>
		types<span class="token punctuation">.</span>I32<span class="token punctuation">,</span>
		ir<span class="token punctuation">.</span><span class="token function">NewParam</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">NewPointer</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>I8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	printf<span class="token punctuation">.</span>Sig<span class="token punctuation">.</span>Variadic <span class="token operator">=</span> <span class="token boolean">true</span>
	funcMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>Func<span class="token punctuation">{</span>
		<span class="token string">&quot;printf&quot;</span><span class="token punctuation">:</span> printf<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> decl <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>Decls <span class="token punctuation">{</span>
		<span class="token keyword">if</span> fn<span class="token punctuation">,</span> ok <span class="token operator">:=</span> decl<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>FuncDecl<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">if</span> fn<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span> <span class="token punctuation">{</span>
				<span class="token function">translateAdd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> funcMap<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> fn<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;main&quot;</span> <span class="token punctuation">{</span>
				<span class="token function">translateMain</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> funcMap<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">&quot;./add.ll&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;clang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./add.ll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD0\u884C\u7A0B\u5E8F\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5728\u547D\u4EE4\u884C\u4E2D\u770B\u5230\u751F\u6210\u7684 IR\uFF1A</p><div class="language-ll ext-ll line-numbers-mode"><pre class="language-ll"><code>@formatStr = global [3 x i8] c&quot;%d\\0A&quot;

declare i32 @printf(i8* %0, ...)

define i32 @add(i32 %x, i32 %y) {
0:
        %1 = add i32 %x, %y
        ret i32 %1
}

define i32 @main() {
0:
        %1 = call i32 @add(i32 10, i32 2)
        %2 = call i32 (i8*, ...) @printf(i8* getelementptr ([3 x i8], [3 x i8]* @formatStr, i32 0, i32 0), i32 %1)
        ret i32 0
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E14\u5728\u5F53\u524D\u6587\u4EF6\u5939\u4E0B\u6709 a.out \u53EF\u6267\u884C\u6587\u4EF6\uFF0C\u6211\u4EEC\u5C1D\u8BD5\u8FD0\u884C\u5B83\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ ./a.out
<span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u81F3\u6B64\uFF0C\u4E00\u4E2A\u6781\u7B80\u7684 go \u81EA\u4E3E\u7F16\u8BD1\u5668\u5C31\u5B9E\u73B0\u4E86\uFF0C\u6211\u4EEC\u4E5F\u987A\u5229\u5F97\u5230\u4E86\u6B63\u786E\u7684\u7ED3\u679C\u3002</p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u5F88\u660E\u663E\uFF0C\u672C\u6587\u5185\u5BB9\u4E0E\u7F16\u8BD1\u5668\u5F3A\u76F8\u5173\uFF0C\u7F16\u8BD1\u5668\u662F\u4E00\u4E2A\u6781\u5176\u6709\u610F\u601D\u7684\u4E3B\u9898\uFF0C\u5E0C\u671B\u672C\u6587\u80FD\u5E26\u7ED9\u4F60\u4E00\u4E2A\u65B0\u7684\u7F16\u8BD1\u5668\u89C6\u89D2\uFF0C\u7136\u540E\u53BB\u5B66\u4E60\u3001\u5B9E\u8DF5\u5B83\u3002</p><p>\u4F53\u9A8C\u4E0D\u4E00\u6837\u7684\u4E50\u8DA3\u3002</p><h2 id="\u53C2\u8003\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u8D44\u6599" aria-hidden="true">#</a> \u53C2\u8003\u8D44\u6599</h2>`,20),W={href:"https://github.com/golang/go",target:"_blank",rel:"noopener noreferrer"},K=s("go"),Z={href:"https://github.com/gopher-os/gopher-os",target:"_blank",rel:"noopener noreferrer"},nn=s("gopher-os"),sn={href:"https://github.com/icexin/eggos",target:"_blank",rel:"noopener noreferrer"},an=s("eggos"),tn={href:"https://xargin.com/go1-17-new-calling-convention/",target:"_blank",rel:"noopener noreferrer"},pn=s("Go 1.17 \u7684\u65B0\u8C03\u7528\u89C4\u7EA6"),en={href:"https://csl.name/post/python-compiler/",target:"_blank",rel:"noopener noreferrer"},on=s("JIT compiling a subset of Python to x86-64"),cn={href:"https://en.wikipedia.org/wiki/Exit_(system_call)",target:"_blank",rel:"noopener noreferrer"},ln=s("Exit_(system_call)"),un={href:"https://tinygo.org/",target:"_blank",rel:"noopener noreferrer"},rn=s("tinygo"),kn={href:"https://github.com/llir/llvm",target:"_blank",rel:"noopener noreferrer"},dn=s("llir");function vn(mn,bn){const o=e("RouterLink"),t=e("ExternalLinkIcon");return i(),l("div",null,[m,n("p",null,[b,a(o,{to:"/posts/go/magic.html"},{default:u(()=>[g]),_:1}),f]),h,n("p",null,[q,n("a",_,[y,a(t)]),x]),w,A,S,I,n("p",null,[R,n("a",N,[T,a(t)]),L]),P,n("p",null,[D,n("a",M,[E,a(t)]),F]),O,n("p",null,[C,n("a",V,[B,a(t)]),$]),U,n("p",null,[Y,n("a",z,[G,a(t)]),J,n("a",X,[j,a(t)]),H]),Q,n("ul",null,[n("li",null,[n("a",W,[K,a(t)])]),n("li",null,[n("a",Z,[nn,a(t)])]),n("li",null,[n("a",sn,[an,a(t)])]),n("li",null,[n("a",tn,[pn,a(t)])]),n("li",null,[n("a",en,[on,a(t)])]),n("li",null,[n("a",cn,[ln,a(t)])]),n("li",null,[n("a",un,[rn,a(t)])]),n("li",null,[n("a",kn,[dn,a(t)])])])])}var hn=c(v,[["render",vn],["__file","magic2.html.vue"]]);export{hn as default};
