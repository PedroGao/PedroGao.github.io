import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as u,c as r,a as n,b as s,e as a,f as t}from"./app-4852f70e.js";const k="/assets/op-based-Counter-c5d1f00e.png",d="/assets/State-based-PN-Counter-ac875124.png",v="/assets/Operation-based-LWW-Register-8a04546d.png",m="/assets/State-based-LWW-Register-e4e22164.png",b={},y=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>CRDT 全称 <em>convergent or commutative replicated data type (CRDT)</em>，是近年来分布式领域的新宠。</p><p>与其它分布式系统不同，CRDT 在设计上放弃了<strong>共识</strong>；这意味着一个 CRDT 副本执行操作时，完全无需与其它副本进行协商，大大提升了副本执行效率。</p><p>没有协商并不代表副本数据之间会有差异，CRDT 通过良好的数据结构设计来使所有副本<strong>最终达到一致</strong>，但前提是任何副本执行的操作都必须通过网络传输并应用到其它副本，即使这些操作到达时是<strong>乱序</strong>的，但最后的数据仍然保证一致。</p><p>目前分布式系统普遍是 3 副本、5 副本，CRDT 可以直接将副本数量提升几个量级，如果允许网络延迟，这个数量还能成倍增加。</p>',5),g={href:"https://dl.acm.org/doi/10.1145/1180875.1180916",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[s("基于此，Gérald 提出了一种名为 "),n("em",null,"Without Operation Transformation (WOOT)"),s(" 的协同算法，WOOT 算法是 CRDT 文本协同算法的鼻祖。")],-1),w={href:"https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"由于 CRDT 出现较晚，本身又比较复杂，为了帮助更多人学习了解 CRDT，Marc 在 2011 同年发布了另外一篇 CRDT 论文:",-1),_={href:"https://inria.hal.science/inria-00555588/document",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"这篇论文详细的阐述了 CRDT 的原理，以及众多案例，并给出了诸多基础 CRDT 类型的伪代码实现，是不可多得的 CRDT 学习资源。",-1),R=n("p",null,"既然珠玉在前，本文对 CRDT 的介绍也会着重参考这几篇论文，当然原理推导、名词介绍不是本身重点，下文会简明其扼要，本文会将重点放在 CRDT 实践上，重点阐述如何实现 CRDT，以及如何运行它。",-1),T=n("h2",{id:"简单案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简单案例","aria-hidden":"true"},"#"),s(" 简单案例")],-1),D=n("p",null,[s("CRDT（无冲突可复制数据类型）核心功能点，在于"),n("strong",null,"无冲突可复制"),s("，多个不同的数据副本分布在不同的客户端上，任意客户端都能即时编辑本地副本，无需与其它副本协调，并且保证最后的结果不会存在冲突。")],-1),j=n("p",null,[s("这种特性天然适合多人协作场景，如文档共同编辑、阅读，多人聊天，多人画图等等。说起来挺玄乎的，下面就用一个简单的"),n("strong",null,"Counter"),s("样例来看看 CRDT 是如何工作且多方协同的：")],-1),I=n("hr",null,null,-1),O=t('<hr><p>如上，点击任意一方，增减数值，另外一端在及时收到操作后都能迅速达到双方一致的状态。点击 Network 按钮关闭掉网络，此时增减数值只会在本地生效，另外一段数值不会发生变化。</p><p>再次开启网络，则双向又会迅速达成一致。</p><p>而双方之所以能够丝滑的达成一致，核心是其核心数据<strong>Counter</strong>是通过 CRDT 来实现的，不仅如此，还可以发现：</p><ul><li>编辑双方需要通过网络传输编辑操作，以便二者数据达到一致；</li><li>CRDT 天然支持离线编辑，即时网络断开，本地仍可编辑，而无需与其它节点协商；</li><li>CRDT 无需中心化服务器，P2P 即可实现多端协同；</li></ul><p>即使编辑从双端扩展到多端，仍能保证多端的最终一致性，这就是 CRDT 的魅力。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>CRDT 的核心思想是<strong>最终一致性</strong>，即任意副本最终都能达到一致，但不保证实时一致，这意味着 CRDT 副本之间可以存在<strong>不一致</strong>，但最终都能达到一致。</p><p>CRDT 通过<strong>数据结构</strong>来保证最终一致性，而不是通过<strong>协商</strong>来保证最终一致性，这是 CRDT 与 OT 的最大区别。</p><p>CRDT 分为两大类：</p><ul><li>Operation-based CRDT: Commutative Replicated Data Type (CmRDT)</li><li>State-based CRDT：Convergent Replicated Data Type (CvRDT)</li></ul><p>二者目标一致，都是为了解决分布式环境下数据冲突的问题，从而达到最终一致性，不过达成一致的方式不同。</p><p>Operation-based CRDT 强调的是<strong>操作</strong>，即用户对数据的操作，而 State-based CRDT 强调的是<strong>状态</strong>，即数据的状态。</p><p>这也直接导致二者在设计上十分不同，具体有如下两点：</p><ul><li>二者的数据结构不同，Operation-based CRDT 的数据结构核心是<strong>操作</strong>，而 State-based CRDT 的数据结构核心是<strong>状态</strong>；</li><li>通信数据不同，分布式环境下，多副本达成一致，彼此之间需要进行<strong>通信</strong>，二者在数据通信上也大不一样，简单说，Operation-based CRDT 交换操作，而 State-based CRDT 交换状态；</li></ul>',15),x={href:"https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf",target:"_blank",rel:"noopener noreferrer"},W=n("br",null,null,-1),S=t('<p>既然 CRDT 有两种类型，那么在<strong>Counter</strong>这个简单案例中，它们是如何实现的呢？会有哪些不同，下面就来看看 Op-based Counter 和 State-based Counter 的伪代码：</p><p>首先是 Op-based Counter：</p><p><img src="'+k+'" alt="Op-based Counter"></p><p>Op-based Counter 在实现上颇为简单，增减只需改变本地状态<code>i</code>即可，而同步时，只需将本地操作<code>op</code>发送给其它节点即可，其它节点收到<code>op</code>后，执行<code>op</code>即可。</p><p>所以 Op-based Counter 的核心是<strong>操作同步</strong>，即图中公式的<code>downstream()</code>函数，具体关于如何实现在下面实践部分会详细介绍。</p><p>然后是 State-based Counter：</p><p><img src="'+d+'" alt="State-based PN-Counter"></p><p>State-based Counter 在实现上稍微复杂一些，本地状态不再是一个简单的整数<code>i</code>，而是一个整数向量<code>N</code>，每个客户端都是向量 N 中的一项，增减时，客户端只能操作属于自己的项，即<code>N[g]</code>。</p><p>而同步时，本地向量<code>N</code>发送给其它节点，其它节点收到<code>N</code>后，需要将本地向量<code>N</code>与收到的向量 <code>N&#39;</code> 进行合并，然后再更新本地向量 <code>N</code>。</p>',9),L={href:"https://inria.hal.science/inria-00555588/document",target:"_blank",rel:"noopener noreferrer"},M=t('<h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><p>纸上得来终觉浅，绝知此事要躬行，下面就来实践一下一些基础 CRDT 类型，包括：</p><ul><li>Counter：计数器；</li><li>LWW-Register：单值寄存器；</li><li>Multi-LWW-Register：多值存储，即 KV 哈希表存储；</li></ul><p>这些基础 CRDT 类型，既能帮助我们理解 CRDT，也是以后工业级 CRDT 库（如 Yjs，Automerge 等）的基础。</p><h3 id="counter" tabindex="-1"><a class="header-anchor" href="#counter" aria-hidden="true">#</a> Counter</h3><p>前面已经介绍了 Op-based Counter 和 State-based Counter 的算法伪代码，下面分别来实现一下。</p><h4 id="op-based-counter" tabindex="-1"><a class="header-anchor" href="#op-based-counter" aria-hidden="true">#</a> Op-based Counter</h4>',7),B={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/config.ts",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OBCounter</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">clock</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">ops</span><span class="token operator">:</span> Op<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token literal-property property">vector</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">init</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> clientId<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> init<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>value</code>：本地状态，即计数器的值；</li><li><code>clientId</code>：客户端 ID，用于标识客户端；</li><li><code>clock</code>：本地时钟，用于生成操作 ID；</li><li><code>ops</code>：操作数组，用于存储操作；</li><li><code>vector</code>：向量时钟，用于存储其它客户端的时钟；</li></ul><blockquote><p><code>value</code> 每次变更都会增加<code>clock</code>的值，<code>vector</code> 时钟的 key 是客户端 ID，value 是客户端的时钟 clock；</p></blockquote><p>OBCounter 的核心是<code>ops</code>数组，每个元素都是一个操作，即<code>Op</code>类型，<code>Op</code>类型定义如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> OpType <span class="token punctuation">{</span>
  <span class="token comment">// Counter op types</span>
  Increment <span class="token operator">=</span> <span class="token string">&quot;increment&quot;</span><span class="token punctuation">,</span>
  Decrement <span class="token operator">=</span> <span class="token string">&quot;decrement&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> type Op<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> OpType<span class="token punctuation">;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> Id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>type</code>：操作类型，即增加或减少；</li><li><code>value</code>：操作值，即增加或减少的值；</li><li><code>id</code>：操作 ID，用于标识操作；</li></ul><p><code>id</code> 是一个元组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type Id <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由客户端 ID 和本地时钟组成，即<code>clientId:clock</code>，如<code>client1:1</code>，<code>client1:2</code>，<code>client2:1</code>，<code>client2:2</code>等等，这样既能保证操作 ID 的唯一性，也能保证不同客户端的操作 ID 之间是可比较的，即<code>client1:1</code> &lt; <code>client1:2</code> &lt; <code>client2:1</code> &lt; <code>client2:2</code>。</p>`,9),q={href:"https://en.wikipedia.org/wiki/Lamport_timestamp",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Lamport_timestamp",target:"_blank",rel:"noopener noreferrer"},E=t(`<p><code>Id</code>可以标识每个<code>Op</code>的唯一性，<code>vector</code>用来记录不同客户端的 op 应用状态，避免重复应用 op 导致副本之间状态不一致。</p><p>OBCounter 本地状态变更有两个核心方法：</p><ul><li><code>increment</code>：增加计数器；</li><li><code>decrement</code>：减少计数器；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> OpType<span class="token punctuation">.</span>Increment<span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Op<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> OpType<span class="token punctuation">.</span>Decrement<span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Op<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次变更都会增加<code>clock</code>的值，同时将变更的操作添加到<code>ops</code>数组中。</p><p>需要读取计数器值时，调用<code>get</code>方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要将本地状态同步到其它节点时，调用<code>flush</code>方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将本地的<code>ops</code>数组返回，其它节点收到<code>ops</code>数组后，调用<code>apply</code>方法依次应用<code>op</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">apply</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> op<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">const</span> clock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// Ignore old ops</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clock <span class="token operator">&gt;=</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// New op must match clock sequence</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clock <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!==</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Op id not in order: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clock<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>type <span class="token operator">===</span> OpType<span class="token punctuation">.</span>Increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> op<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>type <span class="token operator">===</span> OpType<span class="token punctuation">.</span>Decrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-=</span> op<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unsupport op type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>op</code>应用完成后，需立即更新<code>vector</code>时钟，否则会导致重复应用<code>op</code>；在 <code>apply</code> 方法中就针对 <code>vector</code> 做了 op 去重操作，避免 op 污染。</p><p>调用<code>flush()</code>得到 ops 后，当前节点需要感知其它节点应用 op 成功的事件，否则下次调用仍会返回相同的 ops，这里可以通过<code>ack</code>来确认 op 应用成功，避免下次重复发送：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">ack</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>Id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> op<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),P=n("code",null,"Counter",-1),V={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/config.ts",target:"_blank",rel:"noopener noreferrer"},$=n("h4",{id:"state-based-counter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#state-based-counter","aria-hidden":"true"},"#"),s(" State-based Counter")],-1),z={href:"https://github.com/pedrogao/pedrogao.github.io/blob/main/docs/.vuepress/config.ts",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"Map",-1),K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SBCounter</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">s1</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token literal-property property">s2</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">clientId<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>clientId</code>：客户端 ID，用于标识客户端；</li><li><code>s1</code>：保存当前<code>增值</code>状态；</li><li><code>s2</code>：保存当前<code>减值</code>状态；</li></ul><p>SBCounter 本地状态变更有两个核心方法：</p><ul><li><code>increment</code>：增加计数器；</li><li><code>decrement</code>：减少计数器；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次变更都会将当前客户端的状态保存到<code>Map</code>中。读取计数时，调用<code>get</code>方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span>
      Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于传输而来的远端状态，调用<code>merge</code>方法合并到本地：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type CounterState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">s1</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token literal-property property">s2</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">merge</span><span class="token punctuation">(</span>other<span class="token operator">:</span> CounterState<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> other<span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> other<span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">toState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CounterState <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">s1</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">,</span>
      <span class="token literal-property property">s2</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就 SBCounter、OBCounter 两种实现进行一下简单对比：</p><table><thead><tr><th></th><th>OBCounter</th><th>SBCounter</th></tr></thead><tbody><tr><td>本地状态</td><td>1 个整数</td><td>2 个 Map</td></tr><tr><td>通信内容</td><td>1 个整数，一个操作</td><td>2 个 Map</td></tr><tr><td>通信方式</td><td>op</td><td>state</td></tr><tr><td>实现成本</td><td>读写简单，核心在 op，需要防重</td><td>读写相对麻烦一点，需要状态合并，无需防重，核心在 state</td></tr></tbody></table><h3 id="lww-register" tabindex="-1"><a class="header-anchor" href="#lww-register" aria-hidden="true">#</a> LWW-Register</h3><p>LWW-Register 全称 <em>Last Write Won Register</em> 单值寄存器是 CRDT 另外一个重要的基础类型，它的特点是：</p><ul><li>任何时刻只有一个值；</li><li>最后写入的值胜出；</li></ul><blockquote><p>寄存器是比较官方的名称，其实一个变量，就像 js 中的：<br> let a = &quot;a&quot;;<br> 是一样的。</p></blockquote><p>与 Counter 类似，LWW-Register 也有两种实现方式：基于 op 的实现和基于 state 的实现。</p><h4 id="operation-based-lww-register" tabindex="-1"><a class="header-anchor" href="#operation-based-lww-register" aria-hidden="true">#</a> Operation-based LWW-Register</h4><p>Operation-based LWW-Register 伪代码如下：</p><p><img src="`+v+`" alt="Operation-based LWW-Register"></p><p>变量<code>x</code>在初始化时，需要携带一个<code>timestamp</code>标识 x 的声明周期，当 x 被修改时，需要更新<code>timestamp</code>，这样才能保证最后写入的值胜出。</p><p>具体的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OBLWWRegister</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">clock</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">ops</span><span class="token operator">:</span> Op<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> clientId<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> init <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>value</code>：当前值；</li><li><code>clientId</code>：客户端 ID，用于标识客户端；</li><li><code>clock</code>：时间戳，用于标识当前值的声明周期；</li><li><code>ops</code>：保存所有变更操作；</li></ul><p>仍然沿用上文谈到的 Lamport 时钟，每次变更时，都会递增<code>clock</code>作为<code>timestamp</code>，并将变更操作保存到<code>ops</code>中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> OpType<span class="token punctuation">.</span>Set<span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Op<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取值十分简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然是基于 op 实现，那么 <code>apply</code>，<code>ack</code> 也基本一致：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">apply</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> op<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token comment">// Ignore old ops</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">&gt;</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">===</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">&gt;</span> id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>type <span class="token operator">===</span> OpType<span class="token punctuation">.</span>Set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> op<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unsupport op type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">ack</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>Id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> op<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clock</code>和<code>vector</code>来实现 op 去重。</p><p>OBLWWRegister 可通过下面的 demo 来体验：</p><hr>`,32),U=t('<hr><p>在左侧输入框输入任何内容，都能被同步到右侧展示区，反之亦然。</p><h4 id="state-based-lww-register" tabindex="-1"><a class="header-anchor" href="#state-based-lww-register" aria-hidden="true">#</a> State-based LWW-Register</h4><p>State-based LWW-Register 伪代码如下：</p><p><img src="'+m+`" alt="State-based LWW-Register"></p><p>与 SBCounter 相比，SBLWWRegister 实现更加简单，由于<code>value</code>是时间戳大的一方获胜，因此 merge 时，只需判断双方<code>clock</code>大小即可，如果相等，则判断双方 clientId 大小：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SBLWWRegister</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token literal-property property">clock</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> clientId<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> init <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">merge</span><span class="token punctuation">(</span>state<span class="token operator">:</span> RegisterState<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">&gt;</span> state<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">===</span> state<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">&gt;</span> state<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> state<span class="token punctuation">.</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也别忘记在<code>set</code>变更值时，递增<code>clock</code>。</p><h3 id="multi-lww-register-map" tabindex="-1"><a class="header-anchor" href="#multi-lww-register-map" aria-hidden="true">#</a> Multi-LWW-Register(Map)</h3><p><code>LWWRegister</code> 用于表示一个变量，在其基础上，我们可以扩展出多个变量，即<code>MultiLWWRegister</code>，实际上这就是 <code>Map</code> 的 CRDT 实现。</p><p>MultiLWWRegister 实现上也必须能支持多个值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MultiLWWRegister</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">map</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">clock</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">ops</span><span class="token operator">:</span> Op<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">clientId<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId <span class="token operator">??</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>map</code>：用于保存多个变量，key 是变量名，value 是变量值；</li><li><code>clientId</code>：客户端 ID，用于标识客户端；</li><li><code>clock</code>：时间戳；</li><li><code>ops</code>：保存所有变更操作；</li></ul><p>读取值，调用 <code>get</code> 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>set</code> 方法设置值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> OpType<span class="token punctuation">.</span><span class="token constant">KV</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">as</span> Op<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并将变更操作保存到<code>ops</code>中。</p><p>与其它基于 op 的 CRDT 一样，MultiLWWRegister 也需要 <code>apply</code>，<code>flush</code> 应用、传输 op：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">public</span> <span class="token function">apply</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> op<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token comment">// Ignore old ops</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">&gt;</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">===</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">&gt;</span> id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span>type <span class="token operator">===</span> OpType<span class="token punctuation">.</span><span class="token constant">KV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unsupport op type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">ack</span><span class="token punctuation">(</span>op<span class="token operator">:</span> Op<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>Id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> op<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ops<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心在<code>apply</code>上，当发现 op 的时间戳小于当前时间戳，或者时间戳相等但 clientId 大于当前 clientId 时，忽略该 op，就样就能保证此时的值是最新的。</p><p>MultiLWWRegister 可通过下面的 demo 来体验：</p><hr>`,23),J=n("hr",null,null,-1),Y=n("h2",{id:"结语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),s(" 结语")],-1),F=n("p",null,"本文旨在介绍一些基础 CRDT 类型，为以后深入理解文本 CRDT 算法做铺垫。",-1),H=n("p",null,"回顾一下，本篇文章简单介绍了 CRDT 的基本概念，以及常见的几种 CRDT 实现，包括：",-1),Q=n("ul",null,[n("li",null,"Counter;"),n("li",null,"Register;"),n("li",null,"Multi-Register(Map);")],-1),X={href:"https://inria.hal.science/inria-00555588/document",target:"_blank",rel:"noopener noreferrer"},Z=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),nn={href:"https://dl.acm.org/doi/10.1145/1180875.1180916",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf",target:"_blank",rel:"noopener noreferrer"},an={href:"https://inria.hal.science/inria-00555588/document",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.zxch3n.com/crdt-intro/crdt-intro/",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://www.zxch3n.com/crdt-intro/design-crdt/",target:"_blank",rel:"noopener noreferrer"},en={href:"https://jakelazaroff.com/words/an-interactive-intro-to-crdts/#user-content-fn-ackshually",target:"_blank",rel:"noopener noreferrer"},on={href:"https://en.wikipedia.org/wiki/Lamport_timestamp",target:"_blank",rel:"noopener noreferrer"};function cn(ln,un){const p=e("ExternalLinkIcon"),o=e("CounterDemo1"),c=e("RegisterDemo"),l=e("MulRegisterDemo");return u(),r("div",null,[y,n("p",null,[s("CRDT 最早可追溯到 2006 年的一篇"),n("a",g,[s("论文"),a(p)]),s("，论文作者 Gérald 给出了主流协同算法 OT 存在不可解的 dirty case，并且 OT 实现十分复杂，不利于在分布式环境下扩展。")]),h,n("p",null,[s("而在 2011 年，Marc 在其论文"),n("a",w,[s("Conflict-free Replicated Data Types"),a(p)]),s("中正式对 CRDT 给出了明确定义，详细探讨了分布式环境下，为了解决数据冲突从而达到最终一致性是十分困难的，而 CRDT 是一种优秀的可行解，论文还对 CRDT 最终一致性进行了严格证明。")]),f,n("p",null,[n("a",_,[s("A comprehensive study of Convergent and Commutative Replicated Data Types"),a(p)])]),C,R,T,D,j,I,a(o),O,n("blockquote",null,[n("p",null,[s("CRDT 详细介绍请参考论文 "),n("a",x,[s("Conflict-free Replicated Data Types"),a(p)]),s("，本文的重点在于实践，"),W,s(" 对核心原理不做过多阐述，比如 CRDT 如何同时满足 CAP，如何保证强最终一致性等等，这些都是 CRDT 的基础，有兴趣的读者可以参考论文。")])]),S,n("blockquote",null,[n("p",null,[s("摘自 "),n("a",L,[s("A comprehensive study of Convergent and Commutative Replicated Data Types"),a(p)])])]),M,n("p",null,[s("首先是 "),n("a",B,[s("Op-based Counter"),a(p)]),s(" 的实现 OBCounter：")]),N,n("p",null,[s("这种设计思想其实是"),n("a",q,[s("Lamport timestamp"),a(p)]),s("的具体实现，关于 Lamport timestamp 可以参考"),n("a",A,[s("这里"),a(p)]),s("。")]),E,n("p",null,[s("至此，一个简单的 OBCounter 就实现了，可以通过上面"),P,n("a",V,[s("demo"),a(p)]),s(" 来体验一下。")]),$,n("p",null,[n("a",z,[s("State-based Counter"),a(p)]),s(" 的实现思路和 OBCounter 大不一样，由于 SBCounter 核心在于状态，为了保存所有客户端的数值状态，我们需要一个"),G,s("来保存；在通信上，由于传输的数据内容是状态，因此也无需 op，直接传输状态即可。")]),K,a(c),U,a(l),J,Y,F,H,Q,n("p",null,[s("而 CRDT 的类型还有 Set，Graph 等，感兴趣的可以参考"),n("a",X,[s("A comprehensive study of Convergent and Commutative Replicated Data Types"),a(p)]),s("。")]),Z,n("ul",null,[n("li",null,[n("a",nn,[s("Data consistency for P2P collaborative editing"),a(p)])]),n("li",null,[n("a",sn,[s("Conflict-free Replicated Data Types"),a(p)])]),n("li",null,[n("a",an,[s("A comprehensive study of Convergent and Commutative Replicated Data Types"),a(p)])]),n("li",null,[n("a",pn,[s("CRDT 简介"),a(p)])]),n("li",null,[n("a",tn,[s("如何设计 CRDT 算法"),a(p)])]),n("li",null,[n("a",en,[s("An Interactive Intro to CRDTs"),a(p)])]),n("li",null,[n("a",on,[s("Lamport timestamp"),a(p)])])])])}const dn=i(b,[["render",cn],["__file","crdt1.html.vue"]]);export{dn as default};
