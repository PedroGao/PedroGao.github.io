import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as i,f as a}from"./app-8c08701c.js";const l={},u=a(`<h1 id="go-泛型尝鲜-实现一个流式处理库" tabindex="-1"><a class="header-anchor" href="#go-泛型尝鲜-实现一个流式处理库" aria-hidden="true">#</a> go 泛型尝鲜，实现一个流式处理库</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>熟悉 Java、Rust 的同学，肯定都非常喜欢其 Stream API，以 Java 为例，筛选一个简单的数字列表，可以有如下实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">allMatch</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>Stream 是流式处理的一种实现，Stream 是数据的通道，简称数据流，数据流进入(无状态)函数后，返回一个新的数据流。</p><p>而在 Go 中，目前标准库是没有提供相关的实现，既眼馋于 Stream API 的易用与炫酷，又恰逢 Go 泛型的即将发布(go1.18 发布)，<br> 想着将二者结合，体验一把 Go 泛型，于是就有了这篇文章。</p><p>我们的目标很明确，使用 Go 泛型实现一个流式处理库，实现后的效果如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ok <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Concat</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">Just</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">105</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">AllMatch</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">105</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，就来实现它吧。</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型是 Go 近几年最大的一次变动，考虑到很多同学对其不熟悉，这里会先介绍一下 Go 泛型，如果你对 Go 泛型非常了解，可以跳过。</p><h3 id="泛型样例-1" tabindex="-1"><a class="header-anchor" href="#泛型样例-1" aria-hidden="true">#</a> 泛型样例 1</h3><p>在 Go 中，对于一个加法函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Go 是强类型语言，因此在编译器就必须确定 a，b 的类型，一旦确定 a，b 是<code>int</code>类型后，就无法改变其类型。</p><p>因此，函数 <code>add</code> 就只能用于 <code>int</code> 类型数据的加法，如果此时还需要一个用于浮点数的加法函数，<br> 那么就只能新写一个函数了：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Bad</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 Go 本身是不支持函数重载的，因此两个 add 函数重名，是不能编译通过的，所以我们需要更改函数名：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">addi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">addf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再新增一个用于 <code>complex64</code> 加法函数，就需要再写一个相同功能的函数，而这些函数除了数据类型不同，其它的逻辑却一样。</p><p>在 Go1.18 之前，对于这些重复的逻辑，我们可以通过 <code>interface{}</code> 和反射来将其提取为一个函数，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Bad, need to be improved</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	typ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这样可以传入任意类型的参数，但是却给程序的安全性和可维护性带来了问题，并且每次都需要类型断言，给函数使用带来的麻烦。</p><p>而在 Go1.18 引入了泛型后，我们可以实现泛型来解决这个问题：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> add<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 add 的参数 a，b 类型为<code>T</code>，而<code>T</code>并不是一个固定的类型，它既可以为<code>int</code>类型， 也可以为<code>float64</code>类型，因此将其称为泛型。</p><p>有了泛型<code>T</code>后，函数 add 只需定义一次，就可以接受两种类型的参数，并且完成加法，<br> 而如果需要再支持一个新类型，也只需给<code>T</code>添加一个新的类型约束即可：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> add<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span> <span class="token operator">|</span> <span class="token builtin">complex64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到，如果<code>T</code>的类型约束过多，那么写在函数上面也不太好看，因此 Go 支持我们将泛型定义为接口再使用，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// main.go</span>
<span class="token keyword">type</span> Addable <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int64</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">float64</span> <span class="token operator">|</span> <span class="token builtin">float32</span> <span class="token operator">|</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> add<span class="token punctuation">[</span>T Addable<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，泛型<code>T</code>就能支持 6 种类型的加法，而无需为每种类型都写一个 add 函数。</p><h3 id="泛型原理" tabindex="-1"><a class="header-anchor" href="#泛型原理" aria-hidden="true">#</a> 泛型原理</h3><p>那么泛型<code>T</code>是如何实现支持多种数据类型的呢？</p><p>使用反汇编工具来查看一下生成的汇编代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go tool compile <span class="token parameter variable">-N</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-S</span> ./main.go
$ go tool objdump ./main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的汇编代码如下(截取部分)：</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>TEXT &quot;&quot;.add[go.shape.int_0](SB) gofile../add/main.go
  main.go:11            SUBQ $0x10, SP
  main.go:11            MOVQ BP, 0x8(SP)
  main.go:11            LEAQ 0x8(SP), BP
  main.go:11            MOVQ AX, 0x18(SP)
  main.go:11            MOVQ BX, 0x20(SP)
  main.go:11            MOVQ CX, 0x28(SP)
  main.go:11            MOVQ $0x0, 0(SP)
  main.go:12            MOVQ 0x20(SP), AX
  main.go:12            ADDQ 0x28(SP), AX
  main.go:12            MOVQ AX, 0(SP)
  main.go:12            MOVQ 0x8(SP), BP
  main.go:12            ADDQ $0x10, SP
  main.go:12            RET

TEXT &quot;&quot;.add[go.shape.float64_0](SB) gofile../add/main.go
  main.go:11            SUBQ $0x10, SP
  main.go:11            MOVQ BP, 0x8(SP)
  main.go:11            LEAQ 0x8(SP), BP
  main.go:11            MOVQ AX, 0x18(SP)
  main.go:11            MOVSD_XMM X0, 0x20(SP)
  main.go:11            MOVSD_XMM X1, 0x28(SP)
  main.go:11            XORPS X1, X1
  main.go:11            MOVSD_XMM X1, 0(SP)
  main.go:12            MOVSD_XMM 0x20(SP), X0
  main.go:12            ADDSD 0x28(SP), X0
  main.go:12            MOVSD_XMM X0, 0(SP)
  main.go:12            MOVQ 0x8(SP), BP
  main.go:12            ADDQ $0x10, SP
  main.go:12            RET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从汇编代码上可以看到，Go add 函数被编译成了多个 <code>add[go.shape.xxx]</code> 函数，不同类型<br> 对应的着不同的指令实现，如 <code>int_0</code> 是 <code>int</code> 的函数实现，通过 <code>ADDQ</code> 指令来实现加法,<br> 而 <code>float64_0</code> 通过 <code>ADDSD</code> 指令来实现加法。</p><p>Go 泛型可以理解为：编译器帮忙写不同类型的实现代码，编译器通过泛型定义来生成不同的指令实现。</p><h3 id="泛型样例-2" tabindex="-1"><a class="header-anchor" href="#泛型样例-2" aria-hidden="true">#</a> 泛型样例 2</h3><p>下面，来看一个稍微复杂一点的泛型样例。在正式的流式处理实现之前，我们先来看看 Map、Filter 函数的泛型是如何实现的？</p><p>首先，给出类型定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> <span class="token punctuation">(</span>
	Item <span class="token keyword">interface</span> <span class="token punctuation">{</span>
		comparable
	<span class="token punctuation">}</span>
	<span class="token comment">// FilterFunc 筛选函数</span>
	FilterFunc<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span> <span class="token keyword">func</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token comment">// MapFunc 数据映射函数</span>
	MapFunc<span class="token punctuation">[</span>T Item<span class="token punctuation">,</span> R Item<span class="token punctuation">]</span> <span class="token keyword">func</span><span class="token punctuation">(</span>item T<span class="token punctuation">)</span> R
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处定义了三个类型，<code>Item</code>接口，作为泛型约束，内部实际是一个 <code>comparable</code> 类型。</p><p>comparable 是 Go1.18 后新加入至标准库的内置类型：</p><blockquote><p>comparable is an interface that is implemented by all comparable types, (booleans, numbers, strings, pointers, channels, interfaces, arrays of comparable types, structs whose fields are all comparable types).</p></blockquote><p><code>FilterFunc</code>函数类型用于过滤数据，该函数有一个泛型参数，即 <code>T</code>，泛型约束则是 <code>Item</code>，代表着 FilterFunc 可以接受一切实现了 comparable 的参数。</p><p><code>MapFunc</code>函数类型用于数据映射，该函数拥有两个泛型参数，即<code>T</code>和<code>R</code>，泛型约束均为<code>Item</code>，所以 MapFunc 可以接受一个类型的参数，<br> 但返回另一个类型的结果，但这两个类型均需实现 comparable 接口。</p><p>有了 FilterFunc 和 MapFunc 函数类型后，我们还需实现对应的函数来使用它们，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Map<span class="token punctuation">[</span>T Item<span class="token punctuation">,</span> R Item<span class="token punctuation">]</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> m MapFunc<span class="token punctuation">[</span>T<span class="token punctuation">,</span> R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>R <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token punctuation">[</span><span class="token punctuation">]</span>R
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		v <span class="token operator">:=</span> <span class="token function">m</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
		n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> Filter<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> f FilterFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token punctuation">[</span><span class="token punctuation">]</span>T
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了泛型后，<code>Map</code>和<code>Filter</code>函数的实现可以说是既简洁又明确。对于 Map 函数，接受两个参数，分别是数据切片<code>a</code>和 MapFunc <code>m</code>，<br> 函数内部使用 range 得到每个元素后调用 m 函数得到新的元素，最后将其 append 到新的切片返回即可。</p><p>Filter 函数实现类似，就不做过多介绍了。</p><p>有了 Map 和 Filter 两个函数就，我们可以实现简单的数据过滤和映射。如下：</p><ol><li><code>vi</code>是一个简单的整数切片；</li><li><code>vi</code>通过 Filter 函数会过滤掉&gt;=4 的数字;</li><li>然后<code>vi</code>会通过 Map 函数得到最后的 float 切片;</li><li>输出最后的结果。</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// main.go</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vi <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>

	vi <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span>vi<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> v <span class="token operator">&lt;</span> <span class="token number">4</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	bi <span class="token operator">:=</span> <span class="token function">Map</span><span class="token punctuation">(</span>vi<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">float32</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100.01</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// output: [101.01 102.01 103.01]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，可以清晰的看到泛型的作用。因为泛型的存在，使 Map 和 Filter 函数足够简单，每当需要新的类型支持时，<br> 不用去兼容老的代码逻辑，而是直接在调用时指定泛型参数的类型即可。</p><h2 id="stream-设计" tabindex="-1"><a class="header-anchor" href="#stream-设计" aria-hidden="true">#</a> Stream 设计</h2><p>在对 Go 泛型和函数式编程有了一定了解后，我们再来看看如何设计和实现 Stream。流式处理与工厂中的流水线作业非常类似，可以<br> 将其拆解为如下三个阶段：</p><ol><li>创建阶段：获取原始数据；</li><li>加工阶段：数据处理、映射；</li><li>汇总阶段：得到数据处理后的结果。</li></ol><h3 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a> 创建阶段</h3><p>按照这三个阶段来设计 Stream 的 API。首先是创建阶段，即 Stream 的构造函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Stream computing</span>
Stream<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    source <span class="token operator">&lt;-</span><span class="token keyword">chan</span> T <span class="token comment">// 只读 channel，不能写</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> Range<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span><span class="token punctuation">(</span>source <span class="token operator">&lt;-</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> Just<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span><span class="token punctuation">(</span>items <span class="token operator">...</span>T<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> From<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span><span class="token punctuation">(</span>generate GenerateFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Concat</span><span class="token punctuation">(</span>steams <span class="token operator">...</span>Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了支持链式调用，将 Stream 定义为一个结构体，Stream 有一个泛型参数，用于编译时指定<br> 数据流的类型；Stream 内部通过 <code>source</code> 字段来存储数据流。</p><p>提供了 Range、Just、From、Concat 四个函数来初始化、合并数据流：</p><ul><li>Range：通过 channel 来初始化 Stream；</li><li>Just：通过切片来初始化；</li><li>From：通过生成函数来初始化；</li><li>Concat：通过 Stream 拼接得到新的 Stream。</li></ul><h3 id="加工阶段" tabindex="-1"><a class="header-anchor" href="#加工阶段" aria-hidden="true">#</a> 加工阶段</h3><p>数据处理映射阶段可以定义出非常复杂和丰富的 API，这里只给出部分的定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Distinct</span><span class="token punctuation">(</span>keyFunc KeyFunc<span class="token punctuation">[</span>T<span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Filter</span><span class="token punctuation">(</span>filterFunc FilterFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Walk</span><span class="token punctuation">(</span>fn WalkFunc<span class="token punctuation">[</span>T<span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Head</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Tail</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Map</span><span class="token punctuation">(</span>fn MapFunc<span class="token punctuation">[</span>T<span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Sort</span><span class="token punctuation">(</span>fn LessFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据处理不会停止流，而是彼此组合，越丰富的 API 越拥有强大的数据处理能力。</p><p>其对应的功能分别如下：</p><ul><li>Distinct：数据去重；</li><li>Filter：数据过滤；</li><li>Walk：数据遍历；</li><li>Head：截取流头部数据；</li><li>Tail：截取流尾部数据：</li><li>Map：数据映射；</li><li>Sort：数据排序。</li></ul><h3 id="汇总阶段" tabindex="-1"><a class="header-anchor" href="#汇总阶段" aria-hidden="true">#</a> 汇总阶段</h3><p>数据流经处理后，可由汇总函数得到最后的处理结果，汇总函数调用后，流处理就会终止。</p><p>其部分 API 定义如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">AllMatch</span><span class="token punctuation">(</span>fn PredicateFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">AnyMatch</span><span class="token punctuation">(</span>fn PredicateFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">NoneMatch</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>item T<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">ForAll</span><span class="token punctuation">(</span>fn ForAllFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">ForEach</span><span class="token punctuation">(</span>fn ForEachFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>汇总函数不会再返回新的数据流，而是一个处理结果：</p><ul><li>AllMatch：每个数据项均需满足条件后返回结果；</li><li>AnyMatch：任何一个数据项需满足条件后返回结果；</li><li>NoneMatch：无任何数据项需满足条件后返回结果；</li><li>Count：得到数据项总数；</li><li>ForAll：对整个数据流执行操作；</li><li>ForEach：对数据流中的每一项都执行操作。</li></ul><h2 id="stream-实现" tabindex="-1"><a class="header-anchor" href="#stream-实现" aria-hidden="true">#</a> Stream 实现</h2><p>在设计完备的基础上，借助 Go channel 和泛型的强大能力，我们能够非常方便的实现 Stream。</p><p>这里只给出部分 API 的实现，其它基本类似。</p><h3 id="创建阶段-1" tabindex="-1"><a class="header-anchor" href="#创建阶段-1" aria-hidden="true">#</a> 创建阶段</h3><p>以 <code>Range</code> 函数为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Range<span class="token punctuation">[</span>T Item<span class="token punctuation">]</span><span class="token punctuation">(</span>source <span class="token operator">&lt;-</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">{</span>
		source<span class="token punctuation">:</span> source<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Range 函数实则是一个简单的构造函数，从参数读取 source 后赋值给 Stream 返回即可。</p><p>对于稍微复杂一点的 <code>Concat</code> 函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Concat</span><span class="token punctuation">(</span>steams <span class="token operator">...</span>Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建新的无缓冲channel</span>
	source <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建一个waiGroup对象</span>
		group <span class="token operator">:=</span> task<span class="token punctuation">.</span><span class="token function">NewRoutineGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 异步从原channel读取数据</span>
		group<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
				source <span class="token operator">&lt;-</span> item
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token comment">// 异步读取待拼接Stream的channel数据</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> stream <span class="token operator">:=</span> <span class="token keyword">range</span> steams <span class="token punctuation">{</span>
			<span class="token comment">// 每个Stream开启一个协程</span>
			group<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> stream<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					source <span class="token operator">&lt;-</span> item
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 阻塞等待读取完成</span>
		group<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">close</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 返回新的Stream</span>
	<span class="token keyword">return</span> Range<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Concat 函数会拼接多个流的数据，然后汇总到 source 通道中，最后返回。</p><h3 id="加工阶段-1" tabindex="-1"><a class="header-anchor" href="#加工阶段-1" aria-hidden="true">#</a> 加工阶段</h3><p>数据处理函数是实现的一个难点，以 <code>Distinct</code> 为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Distinct 去重，使用 map 来实现去重</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Distinct</span><span class="token punctuation">(</span>keyFunc KeyFunc<span class="token punctuation">[</span>T<span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">{</span>
	source <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>
	common<span class="token punctuation">.</span><span class="token function">GoSafe</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 新建协程写数据</span>
		<span class="token comment">// channel记得关闭是个好习惯</span>
		<span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
		keys <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span>common<span class="token punctuation">.</span>PlaceholderType<span class="token punctuation">)</span>

		<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
			<span class="token comment">// 自定义去重逻辑</span>
			key <span class="token operator">:=</span> <span class="token function">keyFunc</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// 这里的key类型是R</span>
			<span class="token comment">// 如果key不存在,则将数据写入新的channel</span>
			<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
				source <span class="token operator">&lt;-</span> item
				keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> common<span class="token punctuation">.</span>Placeholder
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> Range<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Distinct 函数的核心在于去重，这里我们借助 map 来混存数据映射关系，以数据项作为 key，<br> 去掉重复的 key 从而达到去重的效果。</p><p>对于 <code>Tail</code> 函数，由于 channel 的特性，我们必须遍历完 channel 才能得到最后的几项，因此<br> 我们可以借助环形切片来实现：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Tail</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;n must be greater than 1&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	source <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ring <span class="token operator">:=</span> collection<span class="token punctuation">.</span>NewRing<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 读取全部元素，如果数量&gt;n环形切片能实现新数据覆盖旧数据</span>
		<span class="token comment">// 保证获取到的一定最后n个元素</span>
		<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
			ring<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> ring<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			source <span class="token operator">&lt;-</span> item
		<span class="token punctuation">}</span>
		<span class="token function">close</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> Range<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Ring</code>是一个带有固定缓存池的环形切片，它只能保存固定<code>n</code>个数据项，我们依次遍历 source<br> 并向 Ring 中添加，待遍历完毕后，就能得到最后的 n 个数据。</p><p>而 <code>Head</code> 函数就比较简单了，只需遍历 n 次停止即可，这里就不做过多介绍了。</p><h3 id="汇总阶段-1" tabindex="-1"><a class="header-anchor" href="#汇总阶段-1" aria-hidden="true">#</a> 汇总阶段</h3><p>在数据汇总阶段，实则是对数据流的一个检查与判断，以<code>AnyMatch</code>为例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">AnyMatch</span><span class="token punctuation">(</span>fn PredicateFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 需要排空 s.source，否则前面的goroutine可能阻塞</span>
			<span class="token keyword">go</span> <span class="token function">drain</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>source<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AnyMatch</code>接受一个断言函数<code>fn</code>，在遍历 source 的时候，只需一个满足条件的项出现，就能立马返回 true。</p><p><code>AllMatch</code>与<code>NoneMatch</code>与之类似，内部处理逻辑稍有不同。</p><p>而对于<code>ForEach</code>、<code>Count</code>就必须全部遍历，并对每一个数据项进行处理：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">ForEach</span><span class="token punctuation">(</span>fn ForEachFunc<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
		<span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Stream<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> count <span class="token builtin">int</span>
	<span class="token keyword">for</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>source <span class="token punctuation">{</span>
		count<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ForEach 接受一个 fn 参数，用于对每一个数据项处理，而 Count 函数只需增加数据项的总数返回即可。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>完成 Stream 后，就能方便的使用 Stream API 对数据进行处理与检查，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// main.go</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ok <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Concat</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">Just</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">100</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Filter</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">105</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Sort</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">&gt;</span> b
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">AllMatch</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>item <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">105</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stream 处理数据优雅又易读，在有了泛型后，就无需过多关系数据类型的问题，相较于使用 for range 的<br> 语法来处理数据流，Stream 无疑更加合适。</p><p>而在整个设计、实现的过程中，借助 channel 和泛型是颇为简单的，当然前提是你得对数据结构有一定的理解，<br> 上面我们就借助哈希表和环形切片来快速实现了数据去重、数据尾项等功能。</p><p>至此，一个基于泛型的流式处理库已实现完毕，当然这个库只能称为 tiny Stream，因为 Stream API 实则非常丰富，<br> 比如我们未涉及到的 Reduce 等，这就待我们后续去实践和完善了。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html</li><li>https://mp.weixin.qq.com/s/ocI6TWGI9f5c11uAKBumew</li><li>https://mp.weixin.qq.com/s/t3INtSfFSmv-nsJqLmdPew</li><li>https://github.com/zeromicro/go-zero</li><li>https://github.com/akutz/go-generics-the-hard-way</li><li>https://github.com/mattn/go-generics-example</li><li>https://github.com/zyedidia/generic</li><li>https://github.com/golang/go</li></ul>`,107);function r(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[s("Stream"),i(t)]),s(" API 能让我们以链式调用和 函数式编程的方式来处理数据，数据在函数之间流转、映射，最后汇总得到结果。")]),d])}const f=p(l,[["render",r],["__file","generics.html.vue"]]);export{f as default};
