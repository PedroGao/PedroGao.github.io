const e=JSON.parse('{"key":"v-3fa780eb","path":"/posts/go/generics.html","title":"go 泛型尝鲜，实现一个流式处理库","lang":"zh-CN","frontmatter":{"icon":"edit","title":"go 泛型尝鲜，实现一个流式处理库","date":"2022-02-28T00:00:00.000Z","tag":["go","generics"],"category":["go"],"description":"go 泛型尝鲜，实现一个流式处理库 背景 熟悉 Java、Rust 的同学，肯定都非常喜欢其 Stream API，以 Java 为例，筛选一个简单的数字列表，可以有如下实现： boolean ok = Stream.of(1, 2, 3, 4, 5). map(item -&gt; item + 100). filter(item -&gt; item &gt; 102). allMatch(item -&gt; item &gt; 102);","head":[["meta",{"property":"og:url","content":"https://pedrogao.github.io/posts/go/generics.html"}],["meta",{"property":"og:site_name","content":"廊中别苑"}],["meta",{"property":"og:title","content":"go 泛型尝鲜，实现一个流式处理库"}],["meta",{"property":"og:description","content":"go 泛型尝鲜，实现一个流式处理库 背景 熟悉 Java、Rust 的同学，肯定都非常喜欢其 Stream API，以 Java 为例，筛选一个简单的数字列表，可以有如下实现： boolean ok = Stream.of(1, 2, 3, 4, 5). map(item -&gt; item + 100). filter(item -&gt; item &gt; 102). allMatch(item -&gt; item &gt; 102);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-29T07:49:07.000Z"}],["meta",{"property":"article:author","content":"pedrogao"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"generics"}],["meta",{"property":"article:published_time","content":"2022-02-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-29T07:49:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go 泛型尝鲜，实现一个流式处理库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-05-29T07:49:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pedrogao\\",\\"url\\":\\"https://github.com/pedrogao/\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"泛型样例 1","slug":"泛型样例-1","link":"#泛型样例-1","children":[]},{"level":3,"title":"泛型原理","slug":"泛型原理","link":"#泛型原理","children":[]},{"level":3,"title":"泛型样例 2","slug":"泛型样例-2","link":"#泛型样例-2","children":[]}]},{"level":2,"title":"Stream 设计","slug":"stream-设计","link":"#stream-设计","children":[{"level":3,"title":"创建阶段","slug":"创建阶段","link":"#创建阶段","children":[]},{"level":3,"title":"加工阶段","slug":"加工阶段","link":"#加工阶段","children":[]},{"level":3,"title":"汇总阶段","slug":"汇总阶段","link":"#汇总阶段","children":[]}]},{"level":2,"title":"Stream 实现","slug":"stream-实现","link":"#stream-实现","children":[{"level":3,"title":"创建阶段","slug":"创建阶段-1","link":"#创建阶段-1","children":[]},{"level":3,"title":"加工阶段","slug":"加工阶段-1","link":"#加工阶段-1","children":[]},{"level":3,"title":"汇总阶段","slug":"汇总阶段-1","link":"#汇总阶段-1","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1653810547000,"updatedTime":1653810547000,"contributors":[{"name":"pedrogao","email":"1312342604@qq.com","commits":1}]},"readingTime":{"minutes":13.09,"words":3927},"filePathRelative":"posts/go/generics.md","localizedDate":"2022年2月28日","excerpt":"<h1> go 泛型尝鲜，实现一个流式处理库</h1>\\n<h2> 背景</h2>\\n<p>熟悉 Java、Rust 的同学，肯定都非常喜欢其 Stream API，以 Java 为例，筛选一个简单的数字列表，可以有如下实现：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">boolean</span> ok <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Stream</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>\\n            <span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">-&gt;</span> item <span class=\\"token operator\\">+</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>\\n            <span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">-&gt;</span> item <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">102</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>\\n            <span class=\\"token function\\">allMatch</span><span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">-&gt;</span> item <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">102</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
