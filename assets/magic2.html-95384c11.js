const t=JSON.parse('{"key":"v-44d91362","path":"/posts/go/magic2.html","title":"go 另外几个黑魔法技巧","lang":"zh-CN","frontmatter":{"icon":"edit","title":"go 另外几个黑魔法技巧","date":"2022-03-28T00:00:00.000Z","tag":["go","magic"],"category":["go"],"description":"go 另外几个黑魔法技巧 在上一篇文章中，笔者分享了 go 中两个有意思的技巧。 而最近一段时间，笔者重新梳理了一下 go 知识点，并深入地看看了它的源码，在实践中又有了新的沉淀，于是写下这篇文章和大家分享一下。 魔法 1：最小化运行时(minimal runtime) 我们知道，go 有一层很重的运行时(runtime)，包括内存管理、goroutine 调度等重要组件；这些组件极大地方便了应用程序的开发和迭代，但也带来了一些问题，比如：","head":[["meta",{"property":"og:url","content":"https://pedrogao.github.io/posts/go/magic2.html"}],["meta",{"property":"og:site_name","content":"廊中别苑"}],["meta",{"property":"og:title","content":"go 另外几个黑魔法技巧"}],["meta",{"property":"og:description","content":"go 另外几个黑魔法技巧 在上一篇文章中，笔者分享了 go 中两个有意思的技巧。 而最近一段时间，笔者重新梳理了一下 go 知识点，并深入地看看了它的源码，在实践中又有了新的沉淀，于是写下这篇文章和大家分享一下。 魔法 1：最小化运行时(minimal runtime) 我们知道，go 有一层很重的运行时(runtime)，包括内存管理、goroutine 调度等重要组件；这些组件极大地方便了应用程序的开发和迭代，但也带来了一些问题，比如："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-29T08:00:33.000Z"}],["meta",{"property":"article:author","content":"pedrogao"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"magic"}],["meta",{"property":"article:published_time","content":"2022-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-29T08:00:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go 另外几个黑魔法技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-05-29T08:00:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pedrogao\\",\\"url\\":\\"https://github.com/pedrogao/\\"}]}"]]},"headers":[{"level":2,"title":"魔法 1：最小化运行时(minimal runtime)","slug":"魔法-1-最小化运行时-minimal-runtime","link":"#魔法-1-最小化运行时-minimal-runtime","children":[]},{"level":2,"title":"魔法 2：即时编译 JIT(just-in-time)","slug":"魔法-2-即时编译-jit-just-in-time","link":"#魔法-2-即时编译-jit-just-in-time","children":[]},{"level":2,"title":"魔法 3：自举(bootstrap)","slug":"魔法-3-自举-bootstrap","link":"#魔法-3-自举-bootstrap","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1653810547000,"updatedTime":1653811233000,"contributors":[{"name":"pedrogao","email":"1312342604@qq.com","commits":2}]},"readingTime":{"minutes":18.13,"words":5440},"filePathRelative":"posts/go/magic2.md","localizedDate":"2022年3月28日","excerpt":"<h1> go 另外几个黑魔法技巧</h1>\\n<p>在上一篇<a href=\\"/posts/go/magic.html\\" target=\\"blank\\">文章</a>中，笔者分享了 go 中两个有意思的技巧。</p>\\n<p>而最近一段时间，笔者重新梳理了一下 go 知识点，并深入地看看了它的源码，在实践中又有了新的沉淀，于是写下这篇文章和大家分享一下。</p>\\n<h2> 魔法 1：最小化运行时(minimal runtime)</h2>\\n<p>我们知道，go 有一层很重的运行时(runtime)，包括内存管理、goroutine 调度等重要组件；这些组件极大地方便了应用程序的开发和迭代，但也带来了一些问题，比如：</p>","autoDesc":true}');export{t as data};
